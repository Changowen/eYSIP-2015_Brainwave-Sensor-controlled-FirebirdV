
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800200  00800200  0000029e  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004c1  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000185  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000361  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000197  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000151  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_51>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e2       	ldi	r30, 0x2A	; 42
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 30       	cpi	r26, 0x01	; 1
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 10 01 	call	0x220	; 0x220 <main>
 122:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED_bargraph_config>:

unsigned char data; //to store received data from UDR1

void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	80 93 04 01 	sts	0x0104, r24
	PORTJ = 0x00; //Output is set to 0
 130:	10 92 05 01 	sts	0x0105, r1
}
 134:	08 95       	ret

00000136 <buzzer_pin_config>:


void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 136:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 138:	43 98       	cbi	0x08, 3	; 8
}
 13a:	08 95       	ret

0000013c <motion_pin_config>:


void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
 13c:	81 b1       	in	r24, 0x01	; 1
 13e:	8f 60       	ori	r24, 0x0F	; 15
 140:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
 142:	82 b1       	in	r24, 0x02	; 2
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 148:	ea e0       	ldi	r30, 0x0A	; 10
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	80 81       	ld	r24, Z
 14e:	88 61       	ori	r24, 0x18	; 24
 150:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 152:	eb e0       	ldi	r30, 0x0B	; 11
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	80 81       	ld	r24, Z
 158:	88 61       	ori	r24, 0x18	; 24
 15a:	80 83       	st	Z, r24
}
 15c:	08 95       	ret

0000015e <port_init>:

//Function to initialize ports
void port_init()
{
	LED_bargraph_config();
 15e:	0e 94 95 00 	call	0x12a	; 0x12a <LED_bargraph_config>
	motion_pin_config();
 162:	0e 94 9e 00 	call	0x13c	; 0x13c <motion_pin_config>
	buzzer_pin_config();
 166:	0e 94 9b 00 	call	0x136	; 0x136 <buzzer_pin_config>
}
 16a:	08 95       	ret

0000016c <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 16c:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
 16e:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
 170:	88 b9       	out	0x08, r24	; 8
}
 172:	08 95       	ret

00000174 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 174:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
 176:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
 178:	88 b9       	out	0x08, r24	; 8
}
 17a:	08 95       	ret

0000017c <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
 17c:	e1 ed       	ldi	r30, 0xD1	; 209
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	10 82       	st	Z, r1
 UCSR2A = 0x00;
 182:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
 18c:	8f e5       	ldi	r24, 0x5F	; 95
 18e:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
 192:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
 196:	88 e9       	ldi	r24, 0x98	; 152
 198:	80 83       	st	Z, r24
}
 19a:	08 95       	ret

0000019c <__vector_51>:


SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	data = UDR2; 				//making copy of data from UDR2 in 'data' variable 
 1c2:	e6 ed       	ldi	r30, 0xD6	; 214
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 93 00 02 	sts	0x0200, r24

	UDR2 = data; 				//echo data back to PC
 1cc:	80 83       	st	Z, r24

		if(data == 0xAA)//ASCII value of 8
 1ce:	8a 3a       	cpi	r24, 0xAA	; 170
 1d0:	69 f4       	brne	.+26     	; 0x1ec <__vector_51+0x50>
		{
			buzzer_on();
 1d2:	0e 94 b6 00 	call	0x16c	; 0x16c <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	9d e0       	ldi	r25, 0x0D	; 13
 1da:	a3 e0       	ldi	r26, 0x03	; 3
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	a0 40       	sbci	r26, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <__vector_51+0x40>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <__vector_51+0x4a>
 1e6:	00 00       	nop
			_delay_ms(1000);
			buzzer_off();
 1e8:	0e 94 ba 00 	call	0x174	; 0x174 <buzzer_off>
		}

}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0b be       	out	0x3b, r0	; 59
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <init_devices>:
//Function To Initialize all The Devices
void init_devices()
{
 cli(); //Clears the global interrupts
 212:	f8 94       	cli
 port_init();  //Initializes all the ports
 214:	0e 94 af 00 	call	0x15e	; 0x15e <port_init>
 uart2_init(); //Initailize UART1 for serial communiaction
 218:	0e 94 be 00 	call	0x17c	; 0x17c <uart2_init>
 sei();   //Enables the global interrupts
 21c:	78 94       	sei
}
 21e:	08 95       	ret

00000220 <main>:

//Main Function
int main(void)
{
	init_devices();
 220:	0e 94 09 01 	call	0x212	; 0x212 <init_devices>
 224:	ff cf       	rjmp	.-2      	; 0x224 <main+0x4>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
