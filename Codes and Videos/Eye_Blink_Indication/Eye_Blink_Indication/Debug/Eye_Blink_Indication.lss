
Eye_Blink_Indication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000005da  0000066e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bc  00800202  00800202  00000670  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000de0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d5  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000247  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052d  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ac  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d0  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ed       	ldi	r30, 0xDA	; 218
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 3b       	cpi	r26, 0xBE	; 190
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 91 02 	call	0x522	; 0x522 <main>
 122:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <Onesec_Rawval_Fun>:
       Eye_Enable = 0;
     }
 }
 
 void Onesec_Rawval_Fun ()       //Taking average of 3 values obtained from 64 data packets for confirmation of eye-blink detection
 {
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
   Avg_Raw = Temp/64;
 12e:	60 91 ae 02 	lds	r22, 0x02AE
 132:	70 91 af 02 	lds	r23, 0x02AF
 136:	80 91 b0 02 	lds	r24, 0x02B0
 13a:	90 91 b1 02 	lds	r25, 0x02B1
 13e:	20 e4       	ldi	r18, 0x40	; 64
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	0e 94 ae 02 	call	0x55c	; 0x55c <__divmodsi4>
 14a:	89 01       	movw	r16, r18
 14c:	9a 01       	movw	r18, r20
 14e:	00 93 b6 02 	sts	0x02B6, r16
 152:	10 93 b7 02 	sts	0x02B7, r17
 156:	20 93 b8 02 	sts	0x02B8, r18
 15a:	30 93 b9 02 	sts	0x02B9, r19
   if (On_Flag==0 && Off_Flag==1)
 15e:	80 91 10 02 	lds	r24, 0x0210
 162:	90 91 11 02 	lds	r25, 0x0211
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	09 f0       	breq	.+2      	; 0x16c <Onesec_Rawval_Fun+0x42>
 16a:	52 c0       	rjmp	.+164    	; 0x210 <Onesec_Rawval_Fun+0xe6>
 16c:	80 91 00 02 	lds	r24, 0x0200
 170:	90 91 01 02 	lds	r25, 0x0201
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	91 05       	cpc	r25, r1
 178:	09 f0       	breq	.+2      	; 0x17c <Onesec_Rawval_Fun+0x52>
 17a:	4a c0       	rjmp	.+148    	; 0x210 <Onesec_Rawval_Fun+0xe6>
   {
     if (n<3)
 17c:	80 91 0a 02 	lds	r24, 0x020A
 180:	90 91 0b 02 	lds	r25, 0x020B
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	91 05       	cpc	r25, r1
 188:	d0 f4       	brcc	.+52     	; 0x1be <Onesec_Rawval_Fun+0x94>
     {
       Temp_Avg += Avg_Raw;
 18a:	40 91 ba 02 	lds	r20, 0x02BA
 18e:	50 91 bb 02 	lds	r21, 0x02BB
 192:	60 91 bc 02 	lds	r22, 0x02BC
 196:	70 91 bd 02 	lds	r23, 0x02BD
 19a:	04 0f       	add	r16, r20
 19c:	15 1f       	adc	r17, r21
 19e:	26 1f       	adc	r18, r22
 1a0:	37 1f       	adc	r19, r23
 1a2:	00 93 ba 02 	sts	0x02BA, r16
 1a6:	10 93 bb 02 	sts	0x02BB, r17
 1aa:	20 93 bc 02 	sts	0x02BC, r18
 1ae:	30 93 bd 02 	sts	0x02BD, r19
       n++;
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	90 93 0b 02 	sts	0x020B, r25
 1b8:	80 93 0a 02 	sts	0x020A, r24
 1bc:	29 c0       	rjmp	.+82     	; 0x210 <Onesec_Rawval_Fun+0xe6>
     }
     else
     {
       Temp_Avg = Temp_Avg/3;
 1be:	60 91 ba 02 	lds	r22, 0x02BA
 1c2:	70 91 bb 02 	lds	r23, 0x02BB
 1c6:	80 91 bc 02 	lds	r24, 0x02BC
 1ca:	90 91 bd 02 	lds	r25, 0x02BD
 1ce:	23 e0       	ldi	r18, 0x03	; 3
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	0e 94 ae 02 	call	0x55c	; 0x55c <__divmodsi4>
       if (Temp_Avg<EEG_AVG)
 1da:	26 34       	cpi	r18, 0x46	; 70
 1dc:	31 05       	cpc	r19, r1
 1de:	41 05       	cpc	r20, r1
 1e0:	51 05       	cpc	r21, r1
 1e2:	54 f4       	brge	.+20     	; 0x1f8 <Onesec_Rawval_Fun+0xce>
       {
         On_Flag=1;Off_Flag=0;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 11 02 	sts	0x0211, r25
 1ec:	80 93 10 02 	sts	0x0210, r24
 1f0:	10 92 01 02 	sts	0x0201, r1
 1f4:	10 92 00 02 	sts	0x0200, r1
       }
       n=0;Temp_Avg=0;
 1f8:	10 92 0b 02 	sts	0x020B, r1
 1fc:	10 92 0a 02 	sts	0x020A, r1
 200:	10 92 ba 02 	sts	0x02BA, r1
 204:	10 92 bb 02 	sts	0x02BB, r1
 208:	10 92 bc 02 	sts	0x02BC, r1
 20c:	10 92 bd 02 	sts	0x02BD, r1
     } 
   }             
   Eye_Blink ();
 210:	0e 94 4e 01 	call	0x29c	; 0x29c <Eye_Blink>
   j=0;
 214:	10 92 ab 02 	sts	0x02AB, r1
 218:	10 92 aa 02 	sts	0x02AA, r1
   Temp=0; 
 21c:	10 92 ae 02 	sts	0x02AE, r1
 220:	10 92 af 02 	sts	0x02AF, r1
 224:	10 92 b0 02 	sts	0x02B0, r1
 228:	10 92 b1 02 	sts	0x02B1, r1
   }
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <LED_bargraph_config>:
long Temp,Avg_Raw,Temp_Avg;

 //LED bargraph configuration
 void LED_bargraph_config (void)
 {
	 DDRJ = 0xFF;  //PORT J is configured as output
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	80 93 04 01 	sts	0x0104, r24
	 PORTJ = 0x00; //Output is set to 0
 238:	10 92 05 01 	sts	0x0105, r1
	 
	 //LCD
	 DDRC = DDRC | 0xF7;
 23c:	87 b1       	in	r24, 0x07	; 7
 23e:	87 6f       	ori	r24, 0xF7	; 247
 240:	87 b9       	out	0x07, r24	; 7
	 PORTC = PORTC & 0x80;
 242:	88 b1       	in	r24, 0x08	; 8
 244:	80 78       	andi	r24, 0x80	; 128
 246:	88 b9       	out	0x08, r24	; 8
 }
 248:	08 95       	ret

0000024a <buzzer_pin_config>:
 //Buzzer configuration
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 24a:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 24c:	43 98       	cbi	0x08, 3	; 8
}
 24e:	08 95       	ret

00000250 <motion_pin_config>:
//Motion configuration
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
 250:	81 b1       	in	r24, 0x01	; 1
 252:	8f 60       	ori	r24, 0x0F	; 15
 254:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
 256:	82 b1       	in	r24, 0x02	; 2
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 25c:	ea e0       	ldi	r30, 0x0A	; 10
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	80 81       	ld	r24, Z
 262:	88 61       	ori	r24, 0x18	; 24
 264:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 266:	eb e0       	ldi	r30, 0x0B	; 11
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	80 81       	ld	r24, Z
 26c:	88 61       	ori	r24, 0x18	; 24
 26e:	80 83       	st	Z, r24
}
 270:	08 95       	ret

00000272 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortARestore = PORTA; 			// reading the PORTA's original status
 272:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 274:	90 7f       	andi	r25, 0xF0	; 240
}
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 276:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 			// reading the PORTA's original status
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
	PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 278:	98 2b       	or	r25, r24
	PORTA = PortARestore; 			// setting the command to the port
 27a:	92 b9       	out	0x02, r25	; 2
}
 27c:	08 95       	ret

0000027e <port_init>:


//Function to initialize ports
void port_init()
{
	motion_pin_config();
 27e:	0e 94 28 01 	call	0x250	; 0x250 <motion_pin_config>
	buzzer_pin_config();
 282:	0e 94 25 01 	call	0x24a	; 0x24a <buzzer_pin_config>
	LED_bargraph_config();
 286:	0e 94 19 01 	call	0x232	; 0x232 <LED_bargraph_config>
}
 28a:	08 95       	ret

0000028c <buzzer_on>:
//Buzzer On
void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 28c:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
 28e:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
 290:	88 b9       	out	0x08, r24	; 8
}
 292:	08 95       	ret

00000294 <buzzer_off>:
//Buzzer Off
void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 294:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
 296:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
 298:	88 b9       	out	0x08, r24	; 8
}
 29a:	08 95       	ret

0000029c <Eye_Blink>:
   Temp=0; 
   }
 
 void Eye_Blink ()
 {
   if (Eye_Enable)         
 29c:	80 91 12 02 	lds	r24, 0x0212
 2a0:	90 91 13 02 	lds	r25, 0x0213
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	e9 f1       	breq	.+122    	; 0x322 <Eye_Blink+0x86>
   {
     if (On_Flag==1 && Off_Flag==0)
 2a8:	80 91 10 02 	lds	r24, 0x0210
 2ac:	90 91 11 02 	lds	r25, 0x0211
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	91 05       	cpc	r25, r1
 2b4:	99 f5       	brne	.+102    	; 0x31c <Eye_Blink+0x80>
 2b6:	80 91 00 02 	lds	r24, 0x0200
 2ba:	90 91 01 02 	lds	r25, 0x0201
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	69 f5       	brne	.+90     	; 0x31c <Eye_Blink+0x80>
     {
       if ((Avg_Raw>Theshold_Eyeblink) && (Avg_Raw<350))  //Eye-blink detection confirmed
 2c2:	80 91 b6 02 	lds	r24, 0x02B6
 2c6:	90 91 b7 02 	lds	r25, 0x02B7
 2ca:	a0 91 b8 02 	lds	r26, 0x02B8
 2ce:	b0 91 b9 02 	lds	r27, 0x02B9
 2d2:	ac 01       	movw	r20, r24
 2d4:	bd 01       	movw	r22, r26
 2d6:	4f 56       	subi	r20, 0x6F	; 111
 2d8:	50 40       	sbci	r21, 0x00	; 0
 2da:	60 40       	sbci	r22, 0x00	; 0
 2dc:	70 40       	sbci	r23, 0x00	; 0
 2de:	4f 3e       	cpi	r20, 0xEF	; 239
 2e0:	51 05       	cpc	r21, r1
 2e2:	61 05       	cpc	r22, r1
 2e4:	71 05       	cpc	r23, r1
 2e6:	70 f4       	brcc	.+28     	; 0x304 <Eye_Blink+0x68>
       {
		   buzzer_on();_delay_ms(250);buzzer_off();	
 2e8:	0e 94 46 01 	call	0x28c	; 0x28c <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	9f e3       	ldi	r25, 0x3F	; 63
 2f0:	ab e0       	ldi	r26, 0x0B	; 11
 2f2:	81 50       	subi	r24, 0x01	; 1
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	a0 40       	sbci	r26, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <Eye_Blink+0x56>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <Eye_Blink+0x60>
 2fc:	00 00       	nop
 2fe:	0e 94 4a 01 	call	0x294	; 0x294 <buzzer_off>
 302:	12 c0       	rjmp	.+36     	; 0x328 <Eye_Blink+0x8c>
	   }		   
       else
       {
         if (Avg_Raw>350)  //Not connected to head or Raw data values indication
 304:	8f 35       	cpi	r24, 0x5F	; 95
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	92 07       	cpc	r25, r18
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	a2 07       	cpc	r26, r18
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	b2 07       	cpc	r27, r18
 312:	54 f0       	brlt	.+20     	; 0x328 <Eye_Blink+0x8c>
         {
			PORTJ=0xFF;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	80 93 05 01 	sts	0x0105, r24
 31a:	06 c0       	rjmp	.+12     	; 0x328 <Eye_Blink+0x8c>
       }
	   }	   
     
	 else
     {
       PORTJ=0x00;
 31c:	10 92 05 01 	sts	0x0105, r1
 320:	03 c0       	rjmp	.+6      	; 0x328 <Eye_Blink+0x8c>
     }  
	 }	      
   else    //Device is paired
   {
     PORTJ=0x01;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 05 01 	sts	0x0105, r24
   }
	    
   i++;
 328:	80 91 02 02 	lds	r24, 0x0202
 32c:	90 91 03 02 	lds	r25, 0x0203
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	90 93 03 02 	sts	0x0203, r25
 336:	80 93 02 02 	sts	0x0202, r24
   if(i<=10000)
 33a:	a7 e2       	ldi	r26, 0x27	; 39
 33c:	81 31       	cpi	r24, 0x11	; 17
 33e:	9a 07       	cpc	r25, r26
 340:	10 f4       	brcc	.+4      	; 0x346 <Eye_Blink+0xaa>
   {
	   buzzer_on();
 342:	0e 94 46 01 	call	0x28c	; 0x28c <buzzer_on>
 346:	08 95       	ret

00000348 <left>:
	port_restore = port_restore & 0xF7;
	PORTC = port_restore;
}
void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	0e 94 39 01 	call	0x272	; 0x272 <motion_set>
}
 34e:	08 95       	ret

00000350 <uart1_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart1_init(void)
{
	UCSR1B = 0x00; //disable while setting baud rate
 350:	e9 ec       	ldi	r30, 0xC9	; 201
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	10 82       	st	Z, r1
	UCSR1A = 0x00;
 356:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0x06;
 35a:	86 e0       	ldi	r24, 0x06	; 6
 35c:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1L = 0x5F; //set baud rate lo
 360:	8f e5       	ldi	r24, 0x5F	; 95
 362:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = 0x00; //set baud rate hi
 366:	10 92 cd 00 	sts	0x00CD, r1
	UCSR1B = 0xD8;
 36a:	88 ed       	ldi	r24, 0xD8	; 216
 36c:	80 83       	st	Z, r24
}
 36e:	08 95       	ret

00000370 <__vector_36>:
//Function to take data from ISR byte by byte
char USART1_RX_vect()
{
	while(!(UCSR1A & (1<<RXC1)));
 370:	e8 ec       	ldi	r30, 0xC8	; 200
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	ec f7       	brge	.-6      	; 0x374 <__vector_36+0x4>
	return UDR1;
 37a:	80 91 ce 00 	lds	r24, 0x00CE
}
 37e:	08 95       	ret

00000380 <Small_Packet>:

 void Small_Packet ()
 {
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
   generatedchecksum = 0;
 388:	10 92 14 02 	sts	0x0214, r1
   for(int i = 0; i < Plength; i++)
 38c:	80 91 ac 02 	lds	r24, 0x02AC
 390:	90 91 ad 02 	lds	r25, 0x02AD
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	e9 f0       	breq	.+58     	; 0x3d2 <Small_Packet+0x52>
 398:	06 e9       	ldi	r16, 0x96	; 150
 39a:	12 e0       	ldi	r17, 0x02	; 2
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
   { 
     payloadDataS[i] = USART1_RX_vect();      //Read payload into memory
 3a0:	0e 94 b8 01 	call	0x370	; 0x370 <__vector_36>
 3a4:	48 2f       	mov	r20, r24
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	f8 01       	movw	r30, r16
 3ae:	41 93       	st	Z+, r20
 3b0:	51 93       	st	Z+, r21
 3b2:	61 93       	st	Z+, r22
 3b4:	71 93       	st	Z+, r23
 3b6:	8f 01       	movw	r16, r30
     generatedchecksum  += payloadDataS[i] ;
 3b8:	90 91 14 02 	lds	r25, 0x0214
 3bc:	89 0f       	add	r24, r25
 3be:	80 93 14 02 	sts	0x0214, r24
}

 void Small_Packet ()
 {
   generatedchecksum = 0;
   for(int i = 0; i < Plength; i++)
 3c2:	21 96       	adiw	r28, 0x01	; 1
 3c4:	80 91 ac 02 	lds	r24, 0x02AC
 3c8:	90 91 ad 02 	lds	r25, 0x02AD
 3cc:	c8 17       	cp	r28, r24
 3ce:	d9 07       	cpc	r29, r25
 3d0:	38 f3       	brcs	.-50     	; 0x3a0 <Small_Packet+0x20>
   { 
     payloadDataS[i] = USART1_RX_vect();      //Read payload into memory
     generatedchecksum  += payloadDataS[i] ;
   }
   generatedchecksum = 255 - generatedchecksum;
 3d2:	80 91 14 02 	lds	r24, 0x0214
 3d6:	80 95       	com	r24
 3d8:	80 93 14 02 	sts	0x0214, r24
   checksum  = USART1_RX_vect();
 3dc:	0e 94 b8 01 	call	0x370	; 0x370 <__vector_36>
 3e0:	80 93 15 02 	sts	0x0215, r24
   if(checksum == generatedchecksum)        // Verify Checksum
 3e4:	90 91 15 02 	lds	r25, 0x0215
 3e8:	80 91 14 02 	lds	r24, 0x0214
 3ec:	98 17       	cp	r25, r24
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <Small_Packet+0x72>
 3f0:	51 c0       	rjmp	.+162    	; 0x494 <Small_Packet+0x114>
   { 
	//Detection of eye-blink value   
     if (j<64)                             //Taking average of 64 data packets for detection of eye-blink value
 3f2:	80 91 aa 02 	lds	r24, 0x02AA
 3f6:	90 91 ab 02 	lds	r25, 0x02AB
 3fa:	80 34       	cpi	r24, 0x40	; 64
 3fc:	91 05       	cpc	r25, r1
 3fe:	08 f0       	brcs	.+2      	; 0x402 <Small_Packet+0x82>
 400:	47 c0       	rjmp	.+142    	; 0x490 <Small_Packet+0x110>
     {
       Raw_data  = ((payloadDataS[2] <<8)| payloadDataS[3]);
 402:	40 91 9e 02 	lds	r20, 0x029E
 406:	50 91 9f 02 	lds	r21, 0x029F
 40a:	60 91 a0 02 	lds	r22, 0x02A0
 40e:	70 91 a1 02 	lds	r23, 0x02A1
 412:	76 2f       	mov	r23, r22
 414:	65 2f       	mov	r22, r21
 416:	54 2f       	mov	r21, r20
 418:	44 27       	eor	r20, r20
 41a:	20 91 a2 02 	lds	r18, 0x02A2
 41e:	30 91 a3 02 	lds	r19, 0x02A3
 422:	24 2b       	or	r18, r20
 424:	35 2b       	or	r19, r21
       if(Raw_data&0xF000)
 426:	a9 01       	movw	r20, r18
 428:	40 70       	andi	r20, 0x00	; 0
 42a:	50 7f       	andi	r21, 0xF0	; 240
 42c:	41 15       	cp	r20, r1
 42e:	51 05       	cpc	r21, r1
 430:	51 f0       	breq	.+20     	; 0x446 <Small_Packet+0xc6>
       {
         Raw_data = (((~Raw_data)&0xFFF)+1);
 432:	20 95       	com	r18
 434:	30 95       	com	r19
 436:	3f 70       	andi	r19, 0x0F	; 15
 438:	2f 5f       	subi	r18, 0xFF	; 255
 43a:	3f 4f       	sbci	r19, 0xFF	; 255
 43c:	30 93 b5 02 	sts	0x02B5, r19
 440:	20 93 b4 02 	sts	0x02B4, r18
 444:	05 c0       	rjmp	.+10     	; 0x450 <Small_Packet+0xd0>
       }
       else
       {
		   
         Raw_data = (Raw_data&0xFFF);
 446:	3f 70       	andi	r19, 0x0F	; 15
 448:	30 93 b5 02 	sts	0x02B5, r19
 44c:	20 93 b4 02 	sts	0x02B4, r18
       }
       Temp += Raw_data;
 450:	40 91 b4 02 	lds	r20, 0x02B4
 454:	50 91 b5 02 	lds	r21, 0x02B5
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	00 91 ae 02 	lds	r16, 0x02AE
 460:	10 91 af 02 	lds	r17, 0x02AF
 464:	20 91 b0 02 	lds	r18, 0x02B0
 468:	30 91 b1 02 	lds	r19, 0x02B1
 46c:	40 0f       	add	r20, r16
 46e:	51 1f       	adc	r21, r17
 470:	62 1f       	adc	r22, r18
 472:	73 1f       	adc	r23, r19
 474:	40 93 ae 02 	sts	0x02AE, r20
 478:	50 93 af 02 	sts	0x02AF, r21
 47c:	60 93 b0 02 	sts	0x02B0, r22
 480:	70 93 b1 02 	sts	0x02B1, r23
       j++;
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	90 93 ab 02 	sts	0x02AB, r25
 48a:	80 93 aa 02 	sts	0x02AA, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <Small_Packet+0x114>
     }
     else
     {
       Onesec_Rawval_Fun ();
 490:	0e 94 95 00 	call	0x12a	; 0x12a <Onesec_Rawval_Fun>
     }
   }
 }
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	08 95       	ret

0000049e <Big_Packet>:
 
 void Big_Packet()                            //Detection of zero poor quality signal for verification of eye-blink detection
 {
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
   for(int i = 0; i < Plength; i++)
 4a6:	80 91 ac 02 	lds	r24, 0x02AC
 4aa:	90 91 ad 02 	lds	r25, 0x02AD
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	b9 f0       	breq	.+46     	; 0x4e0 <Big_Packet+0x42>
 4b2:	06 e1       	ldi	r16, 0x16	; 22
 4b4:	12 e0       	ldi	r17, 0x02	; 2
 4b6:	c0 e0       	ldi	r28, 0x00	; 0
 4b8:	d0 e0       	ldi	r29, 0x00	; 0
   { 
     payloadDataB[i] = USART1_RX_vect();      //Read payload into memory
 4ba:	0e 94 b8 01 	call	0x370	; 0x370 <__vector_36>
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	a0 e0       	ldi	r26, 0x00	; 0
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	f8 01       	movw	r30, r16
 4c6:	81 93       	st	Z+, r24
 4c8:	91 93       	st	Z+, r25
 4ca:	a1 93       	st	Z+, r26
 4cc:	b1 93       	st	Z+, r27
 4ce:	8f 01       	movw	r16, r30
   }
 }
 
 void Big_Packet()                            //Detection of zero poor quality signal for verification of eye-blink detection
 {
   for(int i = 0; i < Plength; i++)
 4d0:	21 96       	adiw	r28, 0x01	; 1
 4d2:	80 91 ac 02 	lds	r24, 0x02AC
 4d6:	90 91 ad 02 	lds	r25, 0x02AD
 4da:	c8 17       	cp	r28, r24
 4dc:	d9 07       	cpc	r29, r25
 4de:	68 f3       	brcs	.-38     	; 0x4ba <Big_Packet+0x1c>
   { 
     payloadDataB[i] = USART1_RX_vect();      //Read payload into memory
   }
     Poorquality = payloadDataB[1];
 4e0:	80 91 1a 02 	lds	r24, 0x021A
 4e4:	90 91 1b 02 	lds	r25, 0x021B
 4e8:	90 93 b3 02 	sts	0x02B3, r25
 4ec:	80 93 b2 02 	sts	0x02B2, r24
     if (Poorquality==0 )
 4f0:	00 97       	sbiw	r24, 0x00	; 0
 4f2:	39 f4       	brne	.+14     	; 0x502 <Big_Packet+0x64>
     {
       Eye_Enable = 1;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	90 93 13 02 	sts	0x0213, r25
 4fc:	80 93 12 02 	sts	0x0212, r24
 500:	04 c0       	rjmp	.+8      	; 0x50a <Big_Packet+0x6c>
     }
     else
     {
       Eye_Enable = 0;
 502:	10 92 13 02 	sts	0x0213, r1
 506:	10 92 12 02 	sts	0x0212, r1
     }
 }
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	08 95       	ret

00000514 <init_devices>:
	   buzzer_on();
   }
 }
void init_devices(void)
{
	cli(); //Clears the global interrupts
 514:	f8 94       	cli
	port_init();  //Initializes all the ports
 516:	0e 94 3f 01 	call	0x27e	; 0x27e <port_init>
	uart1_init(); //Initialize UART1 for serial communication
 51a:	0e 94 a8 01 	call	0x350	; 0x350 <uart1_init>
	sei();   //Enables the global interrupts
 51e:	78 94       	sei
}
 520:	08 95       	ret

00000522 <main>:
 void main(void)                     // Main Function
 {
	 init_devices();
 522:	0e 94 8a 02 	call	0x514	; 0x514 <init_devices>
	 int j=0;
	 while (1)
	 {
		 
	 if(USART1_RX_vect() == 170)        // AA 1 st Sync data
 526:	0e 94 b8 01 	call	0x370	; 0x370 <__vector_36>
 52a:	8a 3a       	cpi	r24, 0xAA	; 170
 52c:	e1 f7       	brne	.-8      	; 0x526 <main+0x4>
	 {
		 if(USART1_RX_vect() == 170)      // AA 2 st Sync data
 52e:	0e 94 b8 01 	call	0x370	; 0x370 <__vector_36>
 532:	8a 3a       	cpi	r24, 0xAA	; 170
 534:	c1 f7       	brne	.-16     	; 0x526 <main+0x4>
		 {
			 Plength = USART1_RX_vect();
 536:	0e 94 b8 01 	call	0x370	; 0x370 <__vector_36>
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	90 93 ad 02 	sts	0x02AD, r25
 540:	80 93 ac 02 	sts	0x02AC, r24
			 if(Plength == 4)   // Small Packet
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	91 05       	cpc	r25, r1
 548:	19 f4       	brne	.+6      	; 0x550 <main+0x2e>
			 {
				 
				 Small_Packet ();
 54a:	0e 94 c0 01 	call	0x380	; 0x380 <Small_Packet>
 54e:	eb cf       	rjmp	.-42     	; 0x526 <main+0x4>
			 }
			 else if(Plength == 32)   // Big Packet
 550:	80 32       	cpi	r24, 0x20	; 32
 552:	91 05       	cpc	r25, r1
 554:	41 f7       	brne	.-48     	; 0x526 <main+0x4>
			 {
				 Big_Packet ();
 556:	0e 94 4f 02 	call	0x49e	; 0x49e <Big_Packet>
 55a:	e5 cf       	rjmp	.-54     	; 0x526 <main+0x4>

0000055c <__divmodsi4>:
 55c:	97 fb       	bst	r25, 7
 55e:	09 2e       	mov	r0, r25
 560:	05 26       	eor	r0, r21
 562:	0e d0       	rcall	.+28     	; 0x580 <__divmodsi4_neg1>
 564:	57 fd       	sbrc	r21, 7
 566:	04 d0       	rcall	.+8      	; 0x570 <__divmodsi4_neg2>
 568:	14 d0       	rcall	.+40     	; 0x592 <__udivmodsi4>
 56a:	0a d0       	rcall	.+20     	; 0x580 <__divmodsi4_neg1>
 56c:	00 1c       	adc	r0, r0
 56e:	38 f4       	brcc	.+14     	; 0x57e <__divmodsi4_exit>

00000570 <__divmodsi4_neg2>:
 570:	50 95       	com	r21
 572:	40 95       	com	r20
 574:	30 95       	com	r19
 576:	21 95       	neg	r18
 578:	3f 4f       	sbci	r19, 0xFF	; 255
 57a:	4f 4f       	sbci	r20, 0xFF	; 255
 57c:	5f 4f       	sbci	r21, 0xFF	; 255

0000057e <__divmodsi4_exit>:
 57e:	08 95       	ret

00000580 <__divmodsi4_neg1>:
 580:	f6 f7       	brtc	.-4      	; 0x57e <__divmodsi4_exit>
 582:	90 95       	com	r25
 584:	80 95       	com	r24
 586:	70 95       	com	r23
 588:	61 95       	neg	r22
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	8f 4f       	sbci	r24, 0xFF	; 255
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	08 95       	ret

00000592 <__udivmodsi4>:
 592:	a1 e2       	ldi	r26, 0x21	; 33
 594:	1a 2e       	mov	r1, r26
 596:	aa 1b       	sub	r26, r26
 598:	bb 1b       	sub	r27, r27
 59a:	fd 01       	movw	r30, r26
 59c:	0d c0       	rjmp	.+26     	; 0x5b8 <__udivmodsi4_ep>

0000059e <__udivmodsi4_loop>:
 59e:	aa 1f       	adc	r26, r26
 5a0:	bb 1f       	adc	r27, r27
 5a2:	ee 1f       	adc	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	a2 17       	cp	r26, r18
 5a8:	b3 07       	cpc	r27, r19
 5aa:	e4 07       	cpc	r30, r20
 5ac:	f5 07       	cpc	r31, r21
 5ae:	20 f0       	brcs	.+8      	; 0x5b8 <__udivmodsi4_ep>
 5b0:	a2 1b       	sub	r26, r18
 5b2:	b3 0b       	sbc	r27, r19
 5b4:	e4 0b       	sbc	r30, r20
 5b6:	f5 0b       	sbc	r31, r21

000005b8 <__udivmodsi4_ep>:
 5b8:	66 1f       	adc	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	88 1f       	adc	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	1a 94       	dec	r1
 5c2:	69 f7       	brne	.-38     	; 0x59e <__udivmodsi4_loop>
 5c4:	60 95       	com	r22
 5c6:	70 95       	com	r23
 5c8:	80 95       	com	r24
 5ca:	90 95       	com	r25
 5cc:	9b 01       	movw	r18, r22
 5ce:	ac 01       	movw	r20, r24
 5d0:	bd 01       	movw	r22, r26
 5d2:	cf 01       	movw	r24, r30
 5d4:	08 95       	ret

000005d6 <_exit>:
 5d6:	f8 94       	cli

000005d8 <__stop_program>:
 5d8:	ff cf       	rjmp	.-2      	; 0x5d8 <__stop_program>
