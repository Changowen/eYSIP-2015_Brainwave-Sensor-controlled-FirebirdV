
Attention+EyeBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000bbe  00000c52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800202  00800202  00000c54  2**0
                  ALLOC
  3 .stab         000016c8  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000027e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1e  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f6  00000000  00000000  000035be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000608  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00003ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000375  00000000  00000000  0000454e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_5>
  18:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_6>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee eb       	ldi	r30, 0xBE	; 190
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 36       	cpi	r26, 0x61	; 97
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <main>
 122:	0c 94 dd 05 	jmp	0xbba	; 0xbba <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortARestore = PORTA; 			// reading the PORTA's original status
 12a:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 12c:	90 7f       	andi	r25, 0xF0	; 240
}
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 12e:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 			// reading the PORTA's original status
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
	PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 130:	98 2b       	or	r25, r24
	PORTA = PortARestore; 			// setting the command to the port
 132:	92 b9       	out	0x02, r25	; 2
}
 134:	08 95       	ret

00000136 <right>:
	UBRR1H = 0x00; //set baud rate hi
	UCSR1B = 0xD8;
}
void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
 136:	8a e0       	ldi	r24, 0x0A	; 10
 138:	0e 94 95 00 	call	0x12a	; 0x12a <motion_set>
}
 13c:	08 95       	ret

0000013e <stop>:
	while(!(UCSR1A & (1<<RXC1)));
	return UDR1;
}
void stop (void) //hard stop
{
	motion_set(0x00);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 95 00 	call	0x12a	; 0x12a <motion_set>
}
 144:	08 95       	ret

00000146 <Onesec_Rawval_Fun>:
		       }
	  }
  }

 void Onesec_Rawval_Fun ()
 {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
   Avg_Raw = Temp/100;
 14a:	60 91 49 02 	lds	r22, 0x0249
 14e:	70 91 4a 02 	lds	r23, 0x024A
 152:	80 91 4b 02 	lds	r24, 0x024B
 156:	90 91 4c 02 	lds	r25, 0x024C
 15a:	24 e6       	ldi	r18, 0x64	; 100
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	0e 94 a0 05 	call	0xb40	; 0xb40 <__divmodsi4>
 166:	89 01       	movw	r16, r18
 168:	9a 01       	movw	r18, r20
 16a:	00 93 53 02 	sts	0x0253, r16
 16e:	10 93 54 02 	sts	0x0254, r17
 172:	20 93 55 02 	sts	0x0255, r18
 176:	30 93 56 02 	sts	0x0256, r19
   if (On_Flag==0 && Off_Flag==1)
 17a:	80 91 12 02 	lds	r24, 0x0212
 17e:	90 91 13 02 	lds	r25, 0x0213
 182:	00 97       	sbiw	r24, 0x00	; 0
 184:	09 f0       	breq	.+2      	; 0x188 <Onesec_Rawval_Fun+0x42>
 186:	52 c0       	rjmp	.+164    	; 0x22c <Onesec_Rawval_Fun+0xe6>
 188:	80 91 00 02 	lds	r24, 0x0200
 18c:	90 91 01 02 	lds	r25, 0x0201
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	91 05       	cpc	r25, r1
 194:	09 f0       	breq	.+2      	; 0x198 <Onesec_Rawval_Fun+0x52>
 196:	4a c0       	rjmp	.+148    	; 0x22c <Onesec_Rawval_Fun+0xe6>
   {
     if (n<3)
 198:	80 91 0a 02 	lds	r24, 0x020A
 19c:	90 91 0b 02 	lds	r25, 0x020B
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	91 05       	cpc	r25, r1
 1a4:	d0 f4       	brcc	.+52     	; 0x1da <Onesec_Rawval_Fun+0x94>
     {
       Temp_Avg += Avg_Raw;
 1a6:	40 91 59 02 	lds	r20, 0x0259
 1aa:	50 91 5a 02 	lds	r21, 0x025A
 1ae:	60 91 5b 02 	lds	r22, 0x025B
 1b2:	70 91 5c 02 	lds	r23, 0x025C
 1b6:	04 0f       	add	r16, r20
 1b8:	15 1f       	adc	r17, r21
 1ba:	26 1f       	adc	r18, r22
 1bc:	37 1f       	adc	r19, r23
 1be:	00 93 59 02 	sts	0x0259, r16
 1c2:	10 93 5a 02 	sts	0x025A, r17
 1c6:	20 93 5b 02 	sts	0x025B, r18
 1ca:	30 93 5c 02 	sts	0x025C, r19
       n++;
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	90 93 0b 02 	sts	0x020B, r25
 1d4:	80 93 0a 02 	sts	0x020A, r24
 1d8:	29 c0       	rjmp	.+82     	; 0x22c <Onesec_Rawval_Fun+0xe6>
     }
     else
     {
       Temp_Avg = Temp_Avg/3;
 1da:	60 91 59 02 	lds	r22, 0x0259
 1de:	70 91 5a 02 	lds	r23, 0x025A
 1e2:	80 91 5b 02 	lds	r24, 0x025B
 1e6:	90 91 5c 02 	lds	r25, 0x025C
 1ea:	23 e0       	ldi	r18, 0x03	; 3
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	0e 94 a0 05 	call	0xb40	; 0xb40 <__divmodsi4>
       if (Temp_Avg<EEG_AVG)
 1f6:	26 34       	cpi	r18, 0x46	; 70
 1f8:	31 05       	cpc	r19, r1
 1fa:	41 05       	cpc	r20, r1
 1fc:	51 05       	cpc	r21, r1
 1fe:	54 f4       	brge	.+20     	; 0x214 <Onesec_Rawval_Fun+0xce>
       {
         On_Flag=1;Off_Flag=0;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 13 02 	sts	0x0213, r25
 208:	80 93 12 02 	sts	0x0212, r24
 20c:	10 92 01 02 	sts	0x0201, r1
 210:	10 92 00 02 	sts	0x0200, r1
       }
       n=0;Temp_Avg=0;
 214:	10 92 0b 02 	sts	0x020B, r1
 218:	10 92 0a 02 	sts	0x020A, r1
 21c:	10 92 59 02 	sts	0x0259, r1
 220:	10 92 5a 02 	sts	0x025A, r1
 224:	10 92 5b 02 	sts	0x025B, r1
 228:	10 92 5c 02 	sts	0x025C, r1
     } 
   }             
   Eye_Blink ();
 22c:	0e 94 b5 02 	call	0x56a	; 0x56a <Eye_Blink>
   j=0;
 230:	10 92 41 02 	sts	0x0241, r1
 234:	10 92 40 02 	sts	0x0240, r1
   Temp=0;
 238:	10 92 49 02 	sts	0x0249, r1
 23c:	10 92 4a 02 	sts	0x024A, r1
 240:	10 92 4b 02 	sts	0x024B, r1
 244:	10 92 4c 02 	sts	0x024C, r1
    
   }
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <soft_left_2>:
unsigned int timer_flag=0,eye_count=0,j,l=0,f,n=0,k=0,z=0,p=0,i=0;
long Temp,Temp1,Avg_Raw,Temp_Avg;
volatile unsigned int ShaftCountRight,ShaftCountLeft,flag;
 void soft_left_2 (void) //Left wheel backward, right wheel stationary
 {
	 motion_set(0x01);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 95 00 	call	0x12a	; 0x12a <motion_set>
 }
 256:	08 95       	ret

00000258 <LED_bargraph_config>:
 void LED_bargraph_config (void)
 {
	 DDRJ = 0xFF;  //PORT J is configured as output
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	80 93 04 01 	sts	0x0104, r24
	 PORTJ = 0x00; //Output is set to 0
 25e:	10 92 05 01 	sts	0x0105, r1
	 
	 //LCD
// 	 DDRC = DDRC | 0xF7;
// 	 PORTC = PORTC & 0x80;
 }
 262:	08 95       	ret

00000264 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
 264:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
 266:	74 9a       	sbi	0x0e, 4	; 14
}
 268:	08 95       	ret

0000026a <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
 26a:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
 26c:	75 9a       	sbi	0x0e, 5	; 14
}
 26e:	08 95       	ret

00000270 <left_position_encoder_interrupt_init>:

 
 void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
 {
	 cli(); //Clears the global interrupt
 270:	f8 94       	cli
	 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
 272:	ea e6       	ldi	r30, 0x6A	; 106
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	80 83       	st	Z, r24
	 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
 27c:	ec 9a       	sbi	0x1d, 4	; 29
	 sei();   // Enables the global interrupt
 27e:	78 94       	sei
 }
 280:	08 95       	ret

00000282 <right_position_encoder_interrupt_init>:

 void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
 {
	 cli(); //Clears the global interrupt
 282:	f8 94       	cli
	 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
 284:	ea e6       	ldi	r30, 0x6A	; 106
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	88 60       	ori	r24, 0x08	; 8
 28c:	80 83       	st	Z, r24
	 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 28e:	ed 9a       	sbi	0x1d, 5	; 29
	 sei();   // Enables the global interrupt
 290:	78 94       	sei
 }
 292:	08 95       	ret

00000294 <__vector_6>:

 //ISR for right position encoder
 ISR(INT5_vect)
 {
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
	 ShaftCountRight++;  //increment right shaft position count
 2a2:	80 91 4f 02 	lds	r24, 0x024F
 2a6:	90 91 50 02 	lds	r25, 0x0250
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	90 93 50 02 	sts	0x0250, r25
 2b0:	80 93 4f 02 	sts	0x024F, r24
 }
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_5>:


 //ISR for left position encoder
 ISR(INT4_vect)
 {
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
	 ShaftCountLeft++;  //increment left shaft position count
 2d0:	80 91 57 02 	lds	r24, 0x0257
 2d4:	90 91 58 02 	lds	r25, 0x0258
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 58 02 	sts	0x0258, r25
 2de:	80 93 57 02 	sts	0x0257, r24
 }
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <buzzer_pin_config>:


 
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 2f0:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 2f2:	43 98       	cbi	0x08, 3	; 8
}
 2f4:	08 95       	ret

000002f6 <motion_pin_config>:
//Motion configuration
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
 2f6:	81 b1       	in	r24, 0x01	; 1
 2f8:	8f 60       	ori	r24, 0x0F	; 15
 2fa:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
 2fc:	82 b1       	in	r24, 0x02	; 2
 2fe:	80 7f       	andi	r24, 0xF0	; 240
 300:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 302:	ea e0       	ldi	r30, 0x0A	; 10
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	80 81       	ld	r24, Z
 308:	88 61       	ori	r24, 0x18	; 24
 30a:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 30c:	eb e0       	ldi	r30, 0x0B	; 11
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	80 81       	ld	r24, Z
 312:	88 61       	ori	r24, 0x18	; 24
 314:	80 83       	st	Z, r24
}
 316:	08 95       	ret

00000318 <angle_rotate>:
	PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
	PORTA = PortARestore; 			// setting the command to the port
}

void angle_rotate(unsigned int Degrees)
{
 318:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount =  Degrees/ 4.090; // division by resolution to get shaft count
 31a:	bc 01       	movw	r22, r24
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 12 05 	call	0xa24	; 0xa24 <__floatunsisf>
 324:	28 e4       	ldi	r18, 0x48	; 72
 326:	31 ee       	ldi	r19, 0xE1	; 225
 328:	42 e8       	ldi	r20, 0x82	; 130
 32a:	50 e4       	ldi	r21, 0x40	; 64
 32c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3>
	ReqdShaftCountInt =  ReqdShaftCount;
 330:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__fixunssfsi>
 334:	46 2f       	mov	r20, r22
 336:	57 2f       	mov	r21, r23
 338:	68 2f       	mov	r22, r24
 33a:	79 2f       	mov	r23, r25
	ShaftCountRight = 0;
 33c:	10 92 50 02 	sts	0x0250, r1
 340:	10 92 4f 02 	sts	0x024F, r1
	ShaftCountLeft = 0;
 344:	10 92 58 02 	sts	0x0258, r1
 348:	10 92 57 02 	sts	0x0257, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	80 91 4f 02 	lds	r24, 0x024F
 354:	90 91 50 02 	lds	r25, 0x0250
 358:	20 91 57 02 	lds	r18, 0x0257
 35c:	30 91 58 02 	lds	r19, 0x0258
 360:	a0 e0       	ldi	r26, 0x00	; 0
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	ef 2f       	mov	r30, r31
 366:	84 17       	cp	r24, r20
 368:	95 07       	cpc	r25, r21
 36a:	a6 07       	cpc	r26, r22
 36c:	b7 07       	cpc	r27, r23
 36e:	08 f4       	brcc	.+2      	; 0x372 <angle_rotate+0x5a>
 370:	ec 2f       	mov	r30, r28
 372:	ee 23       	and	r30, r30
 374:	61 f4       	brne	.+24     	; 0x38e <angle_rotate+0x76>
 376:	c9 01       	movw	r24, r18
 378:	a0 e0       	ldi	r26, 0x00	; 0
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	2f 2f       	mov	r18, r31
 37e:	84 17       	cp	r24, r20
 380:	95 07       	cpc	r25, r21
 382:	a6 07       	cpc	r26, r22
 384:	b7 07       	cpc	r27, r23
 386:	08 f4       	brcc	.+2      	; 0x38a <angle_rotate+0x72>
 388:	2c 2f       	mov	r18, r28
 38a:	22 23       	and	r18, r18
 38c:	09 f3       	breq	.-62     	; 0x350 <angle_rotate+0x38>
		break;
	}
	stop(); //Stop robot
 38e:	0e 94 9f 00 	call	0x13e	; 0x13e <stop>
}
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <right_degrees>:
void right_degrees(unsigned int Degrees)
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
 39c:	0e 94 9b 00 	call	0x136	; 0x136 <right>
	angle_rotate(Degrees);
 3a0:	ce 01       	movw	r24, r28
 3a2:	0e 94 8c 01 	call	0x318	; 0x318 <angle_rotate>
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <port_init>:


//Function to initialize ports
void port_init()
{
	motion_pin_config();
 3ac:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
 3b0:	0e 94 32 01 	call	0x264	; 0x264 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
 3b4:	0e 94 35 01 	call	0x26a	; 0x26a <right_encoder_pin_config>
	buzzer_pin_config();
 3b8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <buzzer_pin_config>
	LED_bargraph_config();
 3bc:	0e 94 2c 01 	call	0x258	; 0x258 <LED_bargraph_config>
}
 3c0:	08 95       	ret

000003c2 <buzzer_on>:
//Buzzer On
void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 3c2:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
 3c4:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
 3c6:	88 b9       	out	0x08, r24	; 8
}
 3c8:	08 95       	ret

000003ca <buzzer_off>:
//Buzzer Off
void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 3ca:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
 3cc:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
 3ce:	88 b9       	out	0x08, r24	; 8
}
 3d0:	08 95       	ret

000003d2 <left>:
void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
 3d2:	85 e0       	ldi	r24, 0x05	; 5
 3d4:	0e 94 95 00 	call	0x12a	; 0x12a <motion_set>
}
 3d8:	08 95       	ret

000003da <timer5_init>:
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 3da:	e1 e2       	ldi	r30, 0x21	; 33
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 3ec:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 3f0:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 3f4:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 3f8:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 3fc:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 400:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 404:	89 ea       	ldi	r24, 0xA9	; 169
 406:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 40a:	8b e0       	ldi	r24, 0x0B	; 11
 40c:	80 83       	st	Z, r24
}
 40e:	08 95       	ret

00000410 <uart1_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart1_init(void)
{
	UCSR1B = 0x00; //disable while setting baud rate
 410:	e9 ec       	ldi	r30, 0xC9	; 201
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	10 82       	st	Z, r1
	UCSR1A = 0x00;
 416:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0x06;
 41a:	86 e0       	ldi	r24, 0x06	; 6
 41c:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1L = 0x5F; //set baud rate lo
 420:	8f e5       	ldi	r24, 0x5F	; 95
 422:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = 0x00; //set baud rate hi
 426:	10 92 cd 00 	sts	0x00CD, r1
	UCSR1B = 0xD8;
 42a:	88 ed       	ldi	r24, 0xD8	; 216
 42c:	80 83       	st	Z, r24
}
 42e:	08 95       	ret

00000430 <__vector_36>:
//Function used for turning robot by specified degrees

//Function to take data from ISR byte by byte
char USART1_RX_vect()
{
	while(!(UCSR1A & (1<<RXC1)));
 430:	e8 ec       	ldi	r30, 0xC8	; 200
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	88 23       	and	r24, r24
 438:	ec f7       	brge	.-6      	; 0x434 <__vector_36+0x4>
	return UDR1;
 43a:	80 91 ce 00 	lds	r24, 0x00CE
}
 43e:	08 95       	ret

00000440 <velocity>:
	motion_set(0x00);
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 440:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 444:	60 93 2a 01 	sts	0x012A, r22
}
 448:	08 95       	ret

0000044a <forward>:
void forward (void) //both wheels forward
{
	motion_set(0x06);
 44a:	86 e0       	ldi	r24, 0x06	; 6
 44c:	0e 94 95 00 	call	0x12a	; 0x12a <motion_set>
}
 450:	08 95       	ret

00000452 <run>:
void run(){
	 if(Att_Avg>=1 && Att_Avg<=10){
 452:	80 91 48 02 	lds	r24, 0x0248
 456:	88 23       	and	r24, r24
 458:	51 f0       	breq	.+20     	; 0x46e <run+0x1c>
 45a:	80 91 48 02 	lds	r24, 0x0248
 45e:	8b 30       	cpi	r24, 0x0B	; 11
 460:	30 f4       	brcc	.+12     	; 0x46e <run+0x1c>
		 PORTJ=0X01;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	80 93 05 01 	sts	0x0105, r24
		 stop();
 468:	0e 94 9f 00 	call	0x13e	; 0x13e <stop>
 46c:	08 95       	ret
		 }
	 else if(Att_Avg>10 && Att_Avg<=30){
 46e:	80 91 48 02 	lds	r24, 0x0248
 472:	8b 30       	cpi	r24, 0x0B	; 11
 474:	70 f0       	brcs	.+28     	; 0x492 <run+0x40>
 476:	80 91 48 02 	lds	r24, 0x0248
 47a:	8f 31       	cpi	r24, 0x1F	; 31
 47c:	50 f4       	brcc	.+20     	; 0x492 <run+0x40>
		 PORTJ=0x03;
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	80 93 05 01 	sts	0x0105, r24
		 velocity(170,170);
 484:	8a ea       	ldi	r24, 0xAA	; 170
 486:	6a ea       	ldi	r22, 0xAA	; 170
 488:	0e 94 20 02 	call	0x440	; 0x440 <velocity>
		 forward();
 48c:	0e 94 25 02 	call	0x44a	; 0x44a <forward>
 490:	08 95       	ret
	 }
	 else if(Att_Avg>30 && Att_Avg<=40){
 492:	80 91 48 02 	lds	r24, 0x0248
 496:	8f 31       	cpi	r24, 0x1F	; 31
 498:	70 f0       	brcs	.+28     	; 0x4b6 <run+0x64>
 49a:	80 91 48 02 	lds	r24, 0x0248
 49e:	89 32       	cpi	r24, 0x29	; 41
 4a0:	50 f4       	brcc	.+20     	; 0x4b6 <run+0x64>
		 PORTJ=0X07;
 4a2:	87 e0       	ldi	r24, 0x07	; 7
 4a4:	80 93 05 01 	sts	0x0105, r24
		 velocity(200,200);
 4a8:	88 ec       	ldi	r24, 0xC8	; 200
 4aa:	68 ec       	ldi	r22, 0xC8	; 200
 4ac:	0e 94 20 02 	call	0x440	; 0x440 <velocity>
		 forward();
 4b0:	0e 94 25 02 	call	0x44a	; 0x44a <forward>
 4b4:	08 95       	ret
	 }
	 else if(Att_Avg>40 && Att_Avg<=50){
 4b6:	80 91 48 02 	lds	r24, 0x0248
 4ba:	89 32       	cpi	r24, 0x29	; 41
 4bc:	70 f0       	brcs	.+28     	; 0x4da <run+0x88>
 4be:	80 91 48 02 	lds	r24, 0x0248
 4c2:	83 33       	cpi	r24, 0x33	; 51
 4c4:	50 f4       	brcc	.+20     	; 0x4da <run+0x88>
		 PORTJ=0X0F;
 4c6:	8f e0       	ldi	r24, 0x0F	; 15
 4c8:	80 93 05 01 	sts	0x0105, r24
		 velocity(220,220);
 4cc:	8c ed       	ldi	r24, 0xDC	; 220
 4ce:	6c ed       	ldi	r22, 0xDC	; 220
 4d0:	0e 94 20 02 	call	0x440	; 0x440 <velocity>
		 forward();
 4d4:	0e 94 25 02 	call	0x44a	; 0x44a <forward>
 4d8:	08 95       	ret
	 }
	 else if(Att_Avg>50 && Att_Avg<=60){
 4da:	80 91 48 02 	lds	r24, 0x0248
 4de:	83 33       	cpi	r24, 0x33	; 51
 4e0:	70 f0       	brcs	.+28     	; 0x4fe <run+0xac>
 4e2:	80 91 48 02 	lds	r24, 0x0248
 4e6:	8d 33       	cpi	r24, 0x3D	; 61
 4e8:	50 f4       	brcc	.+20     	; 0x4fe <run+0xac>
		 PORTJ=0X1F;
 4ea:	8f e1       	ldi	r24, 0x1F	; 31
 4ec:	80 93 05 01 	sts	0x0105, r24
		 velocity(220,220);
 4f0:	8c ed       	ldi	r24, 0xDC	; 220
 4f2:	6c ed       	ldi	r22, 0xDC	; 220
 4f4:	0e 94 20 02 	call	0x440	; 0x440 <velocity>
		 forward();
 4f8:	0e 94 25 02 	call	0x44a	; 0x44a <forward>
 4fc:	08 95       	ret
	 }
	 else if(Att_Avg>60 && Att_Avg<=70){
 4fe:	80 91 48 02 	lds	r24, 0x0248
 502:	8d 33       	cpi	r24, 0x3D	; 61
 504:	70 f0       	brcs	.+28     	; 0x522 <run+0xd0>
 506:	80 91 48 02 	lds	r24, 0x0248
 50a:	87 34       	cpi	r24, 0x47	; 71
 50c:	50 f4       	brcc	.+20     	; 0x522 <run+0xd0>
		 PORTJ=0X3F;
 50e:	8f e3       	ldi	r24, 0x3F	; 63
 510:	80 93 05 01 	sts	0x0105, r24
		 velocity(230,230);
 514:	86 ee       	ldi	r24, 0xE6	; 230
 516:	66 ee       	ldi	r22, 0xE6	; 230
 518:	0e 94 20 02 	call	0x440	; 0x440 <velocity>
		 forward();
 51c:	0e 94 25 02 	call	0x44a	; 0x44a <forward>
 520:	08 95       	ret
	 }
	 else if(Att_Avg>70 && Att_Avg<=80){
 522:	80 91 48 02 	lds	r24, 0x0248
 526:	87 34       	cpi	r24, 0x47	; 71
 528:	70 f0       	brcs	.+28     	; 0x546 <run+0xf4>
 52a:	80 91 48 02 	lds	r24, 0x0248
 52e:	81 35       	cpi	r24, 0x51	; 81
 530:	50 f4       	brcc	.+20     	; 0x546 <run+0xf4>
		 PORTJ=0X7F;
 532:	8f e7       	ldi	r24, 0x7F	; 127
 534:	80 93 05 01 	sts	0x0105, r24
		 velocity(240,240);
 538:	80 ef       	ldi	r24, 0xF0	; 240
 53a:	60 ef       	ldi	r22, 0xF0	; 240
 53c:	0e 94 20 02 	call	0x440	; 0x440 <velocity>
		 forward();
 540:	0e 94 25 02 	call	0x44a	; 0x44a <forward>
 544:	08 95       	ret
	 }
	 else if(Att_Avg>80 && Att_Avg<=100){
 546:	80 91 48 02 	lds	r24, 0x0248
 54a:	81 35       	cpi	r24, 0x51	; 81
 54c:	68 f0       	brcs	.+26     	; 0x568 <run+0x116>
 54e:	80 91 48 02 	lds	r24, 0x0248
 552:	85 36       	cpi	r24, 0x65	; 101
 554:	48 f4       	brcc	.+18     	; 0x568 <run+0x116>
		 PORTJ=0xFF;
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	80 93 05 01 	sts	0x0105, r24
		 velocity(240,240);
 55c:	80 ef       	ldi	r24, 0xF0	; 240
 55e:	60 ef       	ldi	r22, 0xF0	; 240
 560:	0e 94 20 02 	call	0x440	; 0x440 <velocity>
		 forward();
 564:	0e 94 25 02 	call	0x44a	; 0x44a <forward>
 568:	08 95       	ret

0000056a <Eye_Blink>:
    
   }
 
 void Eye_Blink ()
 {
   if (Eye_Enable)         
 56a:	80 91 14 02 	lds	r24, 0x0214
 56e:	90 91 15 02 	lds	r25, 0x0215
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	09 f4       	brne	.+2      	; 0x578 <Eye_Blink+0xe>
 576:	70 c0       	rjmp	.+224    	; 0x658 <Eye_Blink+0xee>
   {
     if (On_Flag==1 && Off_Flag==0)
 578:	80 91 12 02 	lds	r24, 0x0212
 57c:	90 91 13 02 	lds	r25, 0x0213
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	91 05       	cpc	r25, r1
 584:	09 f0       	breq	.+2      	; 0x588 <Eye_Blink+0x1e>
 586:	65 c0       	rjmp	.+202    	; 0x652 <Eye_Blink+0xe8>
 588:	80 91 00 02 	lds	r24, 0x0200
 58c:	90 91 01 02 	lds	r25, 0x0201
 590:	00 97       	sbiw	r24, 0x00	; 0
 592:	09 f0       	breq	.+2      	; 0x596 <Eye_Blink+0x2c>
 594:	5e c0       	rjmp	.+188    	; 0x652 <Eye_Blink+0xe8>
     {
       if ((Avg_Raw>Theshold_Eyeblink) && (Avg_Raw<350))
 596:	80 91 53 02 	lds	r24, 0x0253
 59a:	90 91 54 02 	lds	r25, 0x0254
 59e:	a0 91 55 02 	lds	r26, 0x0255
 5a2:	b0 91 56 02 	lds	r27, 0x0256
 5a6:	ac 01       	movw	r20, r24
 5a8:	bd 01       	movw	r22, r26
 5aa:	4f 56       	subi	r20, 0x6F	; 111
 5ac:	50 40       	sbci	r21, 0x00	; 0
 5ae:	60 40       	sbci	r22, 0x00	; 0
 5b0:	70 40       	sbci	r23, 0x00	; 0
 5b2:	4f 3e       	cpi	r20, 0xEF	; 239
 5b4:	51 05       	cpc	r21, r1
 5b6:	61 05       	cpc	r22, r1
 5b8:	71 05       	cpc	r23, r1
 5ba:	98 f5       	brcc	.+102    	; 0x622 <Eye_Blink+0xb8>
       {
		   p++;
 5bc:	80 91 04 02 	lds	r24, 0x0204
 5c0:	90 91 05 02 	lds	r25, 0x0205
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	90 93 05 02 	sts	0x0205, r25
 5ca:	80 93 04 02 	sts	0x0204, r24
		   buzzer_on();
 5ce:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	9f e7       	ldi	r25, 0x7F	; 127
 5d6:	a6 e1       	ldi	r26, 0x16	; 22
 5d8:	81 50       	subi	r24, 0x01	; 1
 5da:	90 40       	sbci	r25, 0x00	; 0
 5dc:	a0 40       	sbci	r26, 0x00	; 0
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <Eye_Blink+0x6e>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <Eye_Blink+0x78>
 5e2:	00 00       	nop
		   _delay_ms(500);
		   buzzer_off();
 5e4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <buzzer_off>
		   switch (p){
 5e8:	80 91 04 02 	lds	r24, 0x0204
 5ec:	90 91 05 02 	lds	r25, 0x0205
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	91 05       	cpc	r25, r1
 5f4:	21 f0       	breq	.+8      	; 0x5fe <Eye_Blink+0x94>
 5f6:	83 30       	cpi	r24, 0x03	; 3
 5f8:	91 05       	cpc	r25, r1
 5fa:	99 f5       	brne	.+102    	; 0x662 <Eye_Blink+0xf8>
 5fc:	09 c0       	rjmp	.+18     	; 0x610 <Eye_Blink+0xa6>
		   case 2:
			   stop();
 5fe:	0e 94 9f 00 	call	0x13e	; 0x13e <stop>
			   velocity(0,170);
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	6a ea       	ldi	r22, 0xAA	; 170
 606:	0e 94 20 02 	call	0x440	; 0x440 <velocity>
		       forward();
 60a:	0e 94 25 02 	call	0x44a	; 0x44a <forward>
			   break;
 60e:	08 95       	ret
		   case 3:
		       stop();
 610:	0e 94 9f 00 	call	0x13e	; 0x13e <stop>
		       run();
 614:	0e 94 29 02 	call	0x452	; 0x452 <run>
			   p=0;
 618:	10 92 05 02 	sts	0x0205, r1
 61c:	10 92 04 02 	sts	0x0204, r1
			   break;
 620:	08 95       	ret
		   }		   	
		   	  
	   }
       else
       {
         if (Avg_Raw>350)  //Raw data values indication
 622:	8f 35       	cpi	r24, 0x5F	; 95
 624:	21 e0       	ldi	r18, 0x01	; 1
 626:	92 07       	cpc	r25, r18
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	a2 07       	cpc	r26, r18
 62c:	20 e0       	ldi	r18, 0x00	; 0
 62e:	b2 07       	cpc	r27, r18
 630:	c4 f0       	brlt	.+48     	; 0x662 <Eye_Blink+0xf8>
         {
			buzzer_on();_delay_ms(50);buzzer_off();
 632:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <buzzer_on>
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	9f e3       	ldi	r25, 0x3F	; 63
 63a:	a2 e0       	ldi	r26, 0x02	; 2
 63c:	81 50       	subi	r24, 0x01	; 1
 63e:	90 40       	sbci	r25, 0x00	; 0
 640:	a0 40       	sbci	r26, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <Eye_Blink+0xd2>
 644:	00 c0       	rjmp	.+0      	; 0x646 <Eye_Blink+0xdc>
 646:	00 00       	nop
 648:	0e 94 e5 01 	call	0x3ca	; 0x3ca <buzzer_off>
			stop();		
 64c:	0e 94 9f 00 	call	0x13e	; 0x13e <stop>
 650:	08 95       	ret
       }
	   }	   
     
	 else
     {
       PORTJ=0x00;
 652:	10 92 05 01 	sts	0x0105, r1
 656:	08 95       	ret
     }  
	 }	      
   else    //Device is paired
   {
     PORTJ=0x01;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	80 93 05 01 	sts	0x0105, r24
	 stop();
 65e:	0e 94 9f 00 	call	0x13e	; 0x13e <stop>
 662:	08 95       	ret

00000664 <checkData>:
	 }
} 
 
 
 void checkData(){
	 if(p<2){
 664:	80 91 04 02 	lds	r24, 0x0204
 668:	90 91 05 02 	lds	r25, 0x0205
 66c:	82 30       	cpi	r24, 0x02	; 2
 66e:	91 05       	cpc	r25, r1
 670:	10 f4       	brcc	.+4      	; 0x676 <checkData+0x12>
	 run();	
 672:	0e 94 29 02 	call	0x452	; 0x452 <run>
 676:	08 95       	ret

00000678 <Small_Packet>:
	 }	 	  
 }
	 
 
 void Small_Packet ()
 {
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
   generatedchecksum = 0;
 680:	10 92 16 02 	sts	0x0216, r1
   for(int i = 0; i < Plength; i++)
 684:	80 91 42 02 	lds	r24, 0x0242
 688:	90 91 43 02 	lds	r25, 0x0243
 68c:	00 97       	sbiw	r24, 0x00	; 0
 68e:	c1 f0       	breq	.+48     	; 0x6c0 <Small_Packet+0x48>
 690:	c0 e0       	ldi	r28, 0x00	; 0
 692:	d0 e0       	ldi	r29, 0x00	; 0
   { 
     payloadDataS[i] = USART1_RX_vect();      //Read payload into memory
 694:	08 e3       	ldi	r16, 0x38	; 56
 696:	12 e0       	ldi	r17, 0x02	; 2
 698:	0e 94 18 02 	call	0x430	; 0x430 <__vector_36>
 69c:	f8 01       	movw	r30, r16
 69e:	ec 0f       	add	r30, r28
 6a0:	fd 1f       	adc	r31, r29
 6a2:	80 83       	st	Z, r24
     generatedchecksum  += payloadDataS[i] ;
 6a4:	90 81       	ld	r25, Z
 6a6:	80 91 16 02 	lds	r24, 0x0216
 6aa:	89 0f       	add	r24, r25
 6ac:	80 93 16 02 	sts	0x0216, r24
	 
 
 void Small_Packet ()
 {
   generatedchecksum = 0;
   for(int i = 0; i < Plength; i++)
 6b0:	21 96       	adiw	r28, 0x01	; 1
 6b2:	80 91 42 02 	lds	r24, 0x0242
 6b6:	90 91 43 02 	lds	r25, 0x0243
 6ba:	c8 17       	cp	r28, r24
 6bc:	d9 07       	cpc	r29, r25
 6be:	60 f3       	brcs	.-40     	; 0x698 <Small_Packet+0x20>
   { 
     payloadDataS[i] = USART1_RX_vect();      //Read payload into memory
     generatedchecksum  += payloadDataS[i] ;
   }
   generatedchecksum = 255 - generatedchecksum;
 6c0:	80 91 16 02 	lds	r24, 0x0216
 6c4:	80 95       	com	r24
 6c6:	80 93 16 02 	sts	0x0216, r24
   checksum  = USART1_RX_vect();
 6ca:	0e 94 18 02 	call	0x430	; 0x430 <__vector_36>
 6ce:	80 93 17 02 	sts	0x0217, r24
   if(checksum == generatedchecksum)        // Varify Checksum
 6d2:	90 91 17 02 	lds	r25, 0x0217
 6d6:	80 91 16 02 	lds	r24, 0x0216
 6da:	98 17       	cp	r25, r24
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <Small_Packet+0x68>
 6de:	48 c0       	rjmp	.+144    	; 0x770 <Small_Packet+0xf8>
   { 	   
     if (j<100)
 6e0:	80 91 40 02 	lds	r24, 0x0240
 6e4:	90 91 41 02 	lds	r25, 0x0241
 6e8:	84 36       	cpi	r24, 0x64	; 100
 6ea:	91 05       	cpc	r25, r1
 6ec:	08 f0       	brcs	.+2      	; 0x6f0 <Small_Packet+0x78>
 6ee:	3e c0       	rjmp	.+124    	; 0x76c <Small_Packet+0xf4>
     {
       Raw_data  = ((payloadDataS[2] <<8)| payloadDataS[3]);
 6f0:	50 91 3a 02 	lds	r21, 0x023A
 6f4:	40 91 3b 02 	lds	r20, 0x023B
 6f8:	35 2f       	mov	r19, r21
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	24 2b       	or	r18, r20
 700:	35 2b       	or	r19, r21
       if(Raw_data&0xF000)
 702:	a9 01       	movw	r20, r18
 704:	40 70       	andi	r20, 0x00	; 0
 706:	50 7f       	andi	r21, 0xF0	; 240
 708:	41 15       	cp	r20, r1
 70a:	51 05       	cpc	r21, r1
 70c:	51 f0       	breq	.+20     	; 0x722 <Small_Packet+0xaa>
       {
         Raw_data = (((~Raw_data)&0xFFF)+1);
 70e:	20 95       	com	r18
 710:	30 95       	com	r19
 712:	3f 70       	andi	r19, 0x0F	; 15
 714:	2f 5f       	subi	r18, 0xFF	; 255
 716:	3f 4f       	sbci	r19, 0xFF	; 255
 718:	30 93 52 02 	sts	0x0252, r19
 71c:	20 93 51 02 	sts	0x0251, r18
 720:	05 c0       	rjmp	.+10     	; 0x72c <Small_Packet+0xb4>
       }
       else
       {
		   
         Raw_data = (Raw_data&0xFFF);
 722:	3f 70       	andi	r19, 0x0F	; 15
 724:	30 93 52 02 	sts	0x0252, r19
 728:	20 93 51 02 	sts	0x0251, r18
       }
       Temp += Raw_data;
 72c:	40 91 51 02 	lds	r20, 0x0251
 730:	50 91 52 02 	lds	r21, 0x0252
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	00 91 49 02 	lds	r16, 0x0249
 73c:	10 91 4a 02 	lds	r17, 0x024A
 740:	20 91 4b 02 	lds	r18, 0x024B
 744:	30 91 4c 02 	lds	r19, 0x024C
 748:	40 0f       	add	r20, r16
 74a:	51 1f       	adc	r21, r17
 74c:	62 1f       	adc	r22, r18
 74e:	73 1f       	adc	r23, r19
 750:	40 93 49 02 	sts	0x0249, r20
 754:	50 93 4a 02 	sts	0x024A, r21
 758:	60 93 4b 02 	sts	0x024B, r22
 75c:	70 93 4c 02 	sts	0x024C, r23
       j++;
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	90 93 41 02 	sts	0x0241, r25
 766:	80 93 40 02 	sts	0x0240, r24
 76a:	02 c0       	rjmp	.+4      	; 0x770 <Small_Packet+0xf8>
     }
     else
     {
       Onesec_Rawval_Fun ();
 76c:	0e 94 a3 00 	call	0x146	; 0x146 <Onesec_Rawval_Fun>
     }
   }
 }
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	08 95       	ret

0000077a <Big_Packet>:
 
 void Big_Packet()
 {
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
	  generatedchecksum = 0;
 782:	10 92 16 02 	sts	0x0216, r1
	  for(int i = 0; i < Plength; i++)
 786:	80 91 42 02 	lds	r24, 0x0242
 78a:	90 91 43 02 	lds	r25, 0x0243
 78e:	00 97       	sbiw	r24, 0x00	; 0
 790:	c1 f0       	breq	.+48     	; 0x7c2 <Big_Packet+0x48>
 792:	c0 e0       	ldi	r28, 0x00	; 0
 794:	d0 e0       	ldi	r29, 0x00	; 0
	  {
		  payloadDataB[i]     = USART1_RX_vect();      //Read payload into memory
 796:	08 e1       	ldi	r16, 0x18	; 24
 798:	12 e0       	ldi	r17, 0x02	; 2
 79a:	0e 94 18 02 	call	0x430	; 0x430 <__vector_36>
 79e:	f8 01       	movw	r30, r16
 7a0:	ec 0f       	add	r30, r28
 7a2:	fd 1f       	adc	r31, r29
 7a4:	80 83       	st	Z, r24
		  generatedchecksum  += payloadDataB[i] ;
 7a6:	90 81       	ld	r25, Z
 7a8:	80 91 16 02 	lds	r24, 0x0216
 7ac:	89 0f       	add	r24, r25
 7ae:	80 93 16 02 	sts	0x0216, r24
 }
 
 void Big_Packet()
 {
	  generatedchecksum = 0;
	  for(int i = 0; i < Plength; i++)
 7b2:	21 96       	adiw	r28, 0x01	; 1
 7b4:	80 91 42 02 	lds	r24, 0x0242
 7b8:	90 91 43 02 	lds	r25, 0x0243
 7bc:	c8 17       	cp	r28, r24
 7be:	d9 07       	cpc	r29, r25
 7c0:	60 f3       	brcs	.-40     	; 0x79a <Big_Packet+0x20>
	  {
		  payloadDataB[i]     = USART1_RX_vect();      //Read payload into memory
		  generatedchecksum  += payloadDataB[i] ;
	  }
	  generatedchecksum = 255 - generatedchecksum;
 7c2:	80 91 16 02 	lds	r24, 0x0216
 7c6:	80 95       	com	r24
 7c8:	80 93 16 02 	sts	0x0216, r24
	  checksum  = USART1_RX_vect();
 7cc:	0e 94 18 02 	call	0x430	; 0x430 <__vector_36>
 7d0:	80 93 17 02 	sts	0x0217, r24
	  
	  if(checksum == generatedchecksum)        // Varify Checksum
 7d4:	90 91 17 02 	lds	r25, 0x0217
 7d8:	80 91 16 02 	lds	r24, 0x0216
 7dc:	98 17       	cp	r25, r24
 7de:	09 f0       	breq	.+2      	; 0x7e2 <Big_Packet+0x68>
 7e0:	62 c0       	rjmp	.+196    	; 0x8a6 <Big_Packet+0x12c>
	  {
		   if (payloadDataB[28]==4)
 7e2:	80 91 34 02 	lds	r24, 0x0234
 7e6:	84 30       	cpi	r24, 0x04	; 4
 7e8:	09 f0       	breq	.+2      	; 0x7ec <Big_Packet+0x72>
 7ea:	49 c0       	rjmp	.+146    	; 0x87e <Big_Packet+0x104>
		   {
			   if (f<2)
 7ec:	80 91 44 02 	lds	r24, 0x0244
 7f0:	90 91 45 02 	lds	r25, 0x0245
 7f4:	82 30       	cpi	r24, 0x02	; 2
 7f6:	91 05       	cpc	r25, r1
 7f8:	20 f5       	brcc	.+72     	; 0x842 <Big_Packet+0xc8>
			   {
				   attention [k] = payloadDataB[29];
 7fa:	e0 91 08 02 	lds	r30, 0x0208
 7fe:	f0 91 09 02 	lds	r31, 0x0209
 802:	20 91 35 02 	lds	r18, 0x0235
 806:	e3 5c       	subi	r30, 0xC3	; 195
 808:	fd 4f       	sbci	r31, 0xFD	; 253
 80a:	20 83       	st	Z, r18
				   Temp1 += attention [k];
 80c:	20 81       	ld	r18, Z
 80e:	40 91 5d 02 	lds	r20, 0x025D
 812:	50 91 5e 02 	lds	r21, 0x025E
 816:	60 91 5f 02 	lds	r22, 0x025F
 81a:	70 91 60 02 	lds	r23, 0x0260
 81e:	42 0f       	add	r20, r18
 820:	51 1d       	adc	r21, r1
 822:	61 1d       	adc	r22, r1
 824:	71 1d       	adc	r23, r1
 826:	40 93 5d 02 	sts	0x025D, r20
 82a:	50 93 5e 02 	sts	0x025E, r21
 82e:	60 93 5f 02 	sts	0x025F, r22
 832:	70 93 60 02 	sts	0x0260, r23
				   f++;
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	90 93 45 02 	sts	0x0245, r25
 83c:	80 93 44 02 	sts	0x0244, r24
 840:	1e c0       	rjmp	.+60     	; 0x87e <Big_Packet+0x104>
			   }
			   else
			   {
				   Att_Avg = Temp1/2;
 842:	60 91 5d 02 	lds	r22, 0x025D
 846:	70 91 5e 02 	lds	r23, 0x025E
 84a:	80 91 5f 02 	lds	r24, 0x025F
 84e:	90 91 60 02 	lds	r25, 0x0260
 852:	22 e0       	ldi	r18, 0x02	; 2
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	40 e0       	ldi	r20, 0x00	; 0
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	0e 94 a0 05 	call	0xb40	; 0xb40 <__divmodsi4>
 85e:	20 93 48 02 	sts	0x0248, r18
				   checkData();
 862:	0e 94 32 03 	call	0x664	; 0x664 <checkData>
				   f=0;
 866:	10 92 45 02 	sts	0x0245, r1
 86a:	10 92 44 02 	sts	0x0244, r1
				   Temp1=0;
 86e:	10 92 5d 02 	sts	0x025D, r1
 872:	10 92 5e 02 	sts	0x025E, r1
 876:	10 92 5f 02 	sts	0x025F, r1
 87a:	10 92 60 02 	sts	0x0260, r1
			   }
		   }
		       Poorquality = payloadDataB[1];
 87e:	80 91 19 02 	lds	r24, 0x0219
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	90 93 4e 02 	sts	0x024E, r25
 888:	80 93 4d 02 	sts	0x024D, r24
		       if (Poorquality==0 )
 88c:	00 97       	sbiw	r24, 0x00	; 0
 88e:	39 f4       	brne	.+14     	; 0x89e <Big_Packet+0x124>
		       {
			       Eye_Enable = 1;
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	90 93 15 02 	sts	0x0215, r25
 898:	80 93 14 02 	sts	0x0214, r24
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <Big_Packet+0x12c>
		       }
		       else
		       {
			       Eye_Enable = 0;
 89e:	10 92 15 02 	sts	0x0215, r1
 8a2:	10 92 14 02 	sts	0x0214, r1
		       }
	  }
  }
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	1f 91       	pop	r17
 8ac:	0f 91       	pop	r16
 8ae:	08 95       	ret

000008b0 <init_devices>:
   }
	    
 }
void init_devices(void)
{
	cli(); //Clears the global interrupts
 8b0:	f8 94       	cli
	port_init();  //Initializes all the ports
 8b2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <port_init>
	uart1_init(); //Initialize UART1 for serial communication
 8b6:	0e 94 08 02 	call	0x410	; 0x410 <uart1_init>
	timer5_init();
 8ba:	0e 94 ed 01 	call	0x3da	; 0x3da <timer5_init>
	sei();   //Enables the global interrupts
 8be:	78 94       	sei
}
 8c0:	08 95       	ret

000008c2 <main>:
 void main(void)                     // Main Function
 {
	 init_devices();
 8c2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <init_devices>
	 int j=0;
	 while (1)
	 {
		 
	 if(USART1_RX_vect() == 170)        // AA 1 st Sync data
 8c6:	0e 94 18 02 	call	0x430	; 0x430 <__vector_36>
 8ca:	8a 3a       	cpi	r24, 0xAA	; 170
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <main+0x4>
	 {
		 if(USART1_RX_vect() == 170)      // AA 2 st Sync data
 8ce:	0e 94 18 02 	call	0x430	; 0x430 <__vector_36>
 8d2:	8a 3a       	cpi	r24, 0xAA	; 170
 8d4:	c1 f7       	brne	.-16     	; 0x8c6 <main+0x4>
		 {
			 Plength = USART1_RX_vect();
 8d6:	0e 94 18 02 	call	0x430	; 0x430 <__vector_36>
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	90 93 43 02 	sts	0x0243, r25
 8e0:	80 93 42 02 	sts	0x0242, r24
			 if(Plength == 4)   // Small Packet
 8e4:	84 30       	cpi	r24, 0x04	; 4
 8e6:	91 05       	cpc	r25, r1
 8e8:	19 f4       	brne	.+6      	; 0x8f0 <main+0x2e>
			 {
				 
				 Small_Packet ();
 8ea:	0e 94 3c 03 	call	0x678	; 0x678 <Small_Packet>
 8ee:	eb cf       	rjmp	.-42     	; 0x8c6 <main+0x4>
			 }
			 else if(Plength == 32)   // Big Packet
 8f0:	80 32       	cpi	r24, 0x20	; 32
 8f2:	91 05       	cpc	r25, r1
 8f4:	41 f7       	brne	.-48     	; 0x8c6 <main+0x4>
			 {
				 Big_Packet ();
 8f6:	0e 94 bd 03 	call	0x77a	; 0x77a <Big_Packet>
 8fa:	e5 cf       	rjmp	.-54     	; 0x8c6 <main+0x4>

000008fc <__divsf3>:
 8fc:	0c d0       	rcall	.+24     	; 0x916 <__divsf3x>
 8fe:	e6 c0       	rjmp	.+460    	; 0xacc <__fp_round>
 900:	de d0       	rcall	.+444    	; 0xabe <__fp_pscB>
 902:	40 f0       	brcs	.+16     	; 0x914 <__divsf3+0x18>
 904:	d5 d0       	rcall	.+426    	; 0xab0 <__fp_pscA>
 906:	30 f0       	brcs	.+12     	; 0x914 <__divsf3+0x18>
 908:	21 f4       	brne	.+8      	; 0x912 <__divsf3+0x16>
 90a:	5f 3f       	cpi	r21, 0xFF	; 255
 90c:	19 f0       	breq	.+6      	; 0x914 <__divsf3+0x18>
 90e:	c7 c0       	rjmp	.+398    	; 0xa9e <__fp_inf>
 910:	51 11       	cpse	r21, r1
 912:	10 c1       	rjmp	.+544    	; 0xb34 <__fp_szero>
 914:	ca c0       	rjmp	.+404    	; 0xaaa <__fp_nan>

00000916 <__divsf3x>:
 916:	eb d0       	rcall	.+470    	; 0xaee <__fp_split3>
 918:	98 f3       	brcs	.-26     	; 0x900 <__divsf3+0x4>

0000091a <__divsf3_pse>:
 91a:	99 23       	and	r25, r25
 91c:	c9 f3       	breq	.-14     	; 0x910 <__divsf3+0x14>
 91e:	55 23       	and	r21, r21
 920:	b1 f3       	breq	.-20     	; 0x90e <__divsf3+0x12>
 922:	95 1b       	sub	r25, r21
 924:	55 0b       	sbc	r21, r21
 926:	bb 27       	eor	r27, r27
 928:	aa 27       	eor	r26, r26
 92a:	62 17       	cp	r22, r18
 92c:	73 07       	cpc	r23, r19
 92e:	84 07       	cpc	r24, r20
 930:	38 f0       	brcs	.+14     	; 0x940 <__divsf3_pse+0x26>
 932:	9f 5f       	subi	r25, 0xFF	; 255
 934:	5f 4f       	sbci	r21, 0xFF	; 255
 936:	22 0f       	add	r18, r18
 938:	33 1f       	adc	r19, r19
 93a:	44 1f       	adc	r20, r20
 93c:	aa 1f       	adc	r26, r26
 93e:	a9 f3       	breq	.-22     	; 0x92a <__divsf3_pse+0x10>
 940:	33 d0       	rcall	.+102    	; 0x9a8 <__divsf3_pse+0x8e>
 942:	0e 2e       	mov	r0, r30
 944:	3a f0       	brmi	.+14     	; 0x954 <__divsf3_pse+0x3a>
 946:	e0 e8       	ldi	r30, 0x80	; 128
 948:	30 d0       	rcall	.+96     	; 0x9aa <__divsf3_pse+0x90>
 94a:	91 50       	subi	r25, 0x01	; 1
 94c:	50 40       	sbci	r21, 0x00	; 0
 94e:	e6 95       	lsr	r30
 950:	00 1c       	adc	r0, r0
 952:	ca f7       	brpl	.-14     	; 0x946 <__divsf3_pse+0x2c>
 954:	29 d0       	rcall	.+82     	; 0x9a8 <__divsf3_pse+0x8e>
 956:	fe 2f       	mov	r31, r30
 958:	27 d0       	rcall	.+78     	; 0x9a8 <__divsf3_pse+0x8e>
 95a:	66 0f       	add	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	bb 1f       	adc	r27, r27
 962:	26 17       	cp	r18, r22
 964:	37 07       	cpc	r19, r23
 966:	48 07       	cpc	r20, r24
 968:	ab 07       	cpc	r26, r27
 96a:	b0 e8       	ldi	r27, 0x80	; 128
 96c:	09 f0       	breq	.+2      	; 0x970 <__divsf3_pse+0x56>
 96e:	bb 0b       	sbc	r27, r27
 970:	80 2d       	mov	r24, r0
 972:	bf 01       	movw	r22, r30
 974:	ff 27       	eor	r31, r31
 976:	93 58       	subi	r25, 0x83	; 131
 978:	5f 4f       	sbci	r21, 0xFF	; 255
 97a:	2a f0       	brmi	.+10     	; 0x986 <__divsf3_pse+0x6c>
 97c:	9e 3f       	cpi	r25, 0xFE	; 254
 97e:	51 05       	cpc	r21, r1
 980:	68 f0       	brcs	.+26     	; 0x99c <__divsf3_pse+0x82>
 982:	8d c0       	rjmp	.+282    	; 0xa9e <__fp_inf>
 984:	d7 c0       	rjmp	.+430    	; 0xb34 <__fp_szero>
 986:	5f 3f       	cpi	r21, 0xFF	; 255
 988:	ec f3       	brlt	.-6      	; 0x984 <__divsf3_pse+0x6a>
 98a:	98 3e       	cpi	r25, 0xE8	; 232
 98c:	dc f3       	brlt	.-10     	; 0x984 <__divsf3_pse+0x6a>
 98e:	86 95       	lsr	r24
 990:	77 95       	ror	r23
 992:	67 95       	ror	r22
 994:	b7 95       	ror	r27
 996:	f7 95       	ror	r31
 998:	9f 5f       	subi	r25, 0xFF	; 255
 99a:	c9 f7       	brne	.-14     	; 0x98e <__divsf3_pse+0x74>
 99c:	88 0f       	add	r24, r24
 99e:	91 1d       	adc	r25, r1
 9a0:	96 95       	lsr	r25
 9a2:	87 95       	ror	r24
 9a4:	97 f9       	bld	r25, 7
 9a6:	08 95       	ret
 9a8:	e1 e0       	ldi	r30, 0x01	; 1
 9aa:	66 0f       	add	r22, r22
 9ac:	77 1f       	adc	r23, r23
 9ae:	88 1f       	adc	r24, r24
 9b0:	bb 1f       	adc	r27, r27
 9b2:	62 17       	cp	r22, r18
 9b4:	73 07       	cpc	r23, r19
 9b6:	84 07       	cpc	r24, r20
 9b8:	ba 07       	cpc	r27, r26
 9ba:	20 f0       	brcs	.+8      	; 0x9c4 <__divsf3_pse+0xaa>
 9bc:	62 1b       	sub	r22, r18
 9be:	73 0b       	sbc	r23, r19
 9c0:	84 0b       	sbc	r24, r20
 9c2:	ba 0b       	sbc	r27, r26
 9c4:	ee 1f       	adc	r30, r30
 9c6:	88 f7       	brcc	.-30     	; 0x9aa <__divsf3_pse+0x90>
 9c8:	e0 95       	com	r30
 9ca:	08 95       	ret

000009cc <__fixunssfsi>:
 9cc:	98 d0       	rcall	.+304    	; 0xafe <__fp_splitA>
 9ce:	88 f0       	brcs	.+34     	; 0x9f2 <__fixunssfsi+0x26>
 9d0:	9f 57       	subi	r25, 0x7F	; 127
 9d2:	90 f0       	brcs	.+36     	; 0x9f8 <__fixunssfsi+0x2c>
 9d4:	b9 2f       	mov	r27, r25
 9d6:	99 27       	eor	r25, r25
 9d8:	b7 51       	subi	r27, 0x17	; 23
 9da:	a0 f0       	brcs	.+40     	; 0xa04 <__fixunssfsi+0x38>
 9dc:	d1 f0       	breq	.+52     	; 0xa12 <__fixunssfsi+0x46>
 9de:	66 0f       	add	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	1a f0       	brmi	.+6      	; 0x9ee <__fixunssfsi+0x22>
 9e8:	ba 95       	dec	r27
 9ea:	c9 f7       	brne	.-14     	; 0x9de <__fixunssfsi+0x12>
 9ec:	12 c0       	rjmp	.+36     	; 0xa12 <__fixunssfsi+0x46>
 9ee:	b1 30       	cpi	r27, 0x01	; 1
 9f0:	81 f0       	breq	.+32     	; 0xa12 <__fixunssfsi+0x46>
 9f2:	9f d0       	rcall	.+318    	; 0xb32 <__fp_zero>
 9f4:	b1 e0       	ldi	r27, 0x01	; 1
 9f6:	08 95       	ret
 9f8:	9c c0       	rjmp	.+312    	; 0xb32 <__fp_zero>
 9fa:	67 2f       	mov	r22, r23
 9fc:	78 2f       	mov	r23, r24
 9fe:	88 27       	eor	r24, r24
 a00:	b8 5f       	subi	r27, 0xF8	; 248
 a02:	39 f0       	breq	.+14     	; 0xa12 <__fixunssfsi+0x46>
 a04:	b9 3f       	cpi	r27, 0xF9	; 249
 a06:	cc f3       	brlt	.-14     	; 0x9fa <__fixunssfsi+0x2e>
 a08:	86 95       	lsr	r24
 a0a:	77 95       	ror	r23
 a0c:	67 95       	ror	r22
 a0e:	b3 95       	inc	r27
 a10:	d9 f7       	brne	.-10     	; 0xa08 <__fixunssfsi+0x3c>
 a12:	3e f4       	brtc	.+14     	; 0xa22 <__fixunssfsi+0x56>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <__floatunsisf>:
 a24:	e8 94       	clt
 a26:	09 c0       	rjmp	.+18     	; 0xa3a <__floatsisf+0x12>

00000a28 <__floatsisf>:
 a28:	97 fb       	bst	r25, 7
 a2a:	3e f4       	brtc	.+14     	; 0xa3a <__floatsisf+0x12>
 a2c:	90 95       	com	r25
 a2e:	80 95       	com	r24
 a30:	70 95       	com	r23
 a32:	61 95       	neg	r22
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	99 23       	and	r25, r25
 a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x40>
 a3e:	f9 2f       	mov	r31, r25
 a40:	96 e9       	ldi	r25, 0x96	; 150
 a42:	bb 27       	eor	r27, r27
 a44:	93 95       	inc	r25
 a46:	f6 95       	lsr	r31
 a48:	87 95       	ror	r24
 a4a:	77 95       	ror	r23
 a4c:	67 95       	ror	r22
 a4e:	b7 95       	ror	r27
 a50:	f1 11       	cpse	r31, r1
 a52:	f8 cf       	rjmp	.-16     	; 0xa44 <__floatsisf+0x1c>
 a54:	fa f4       	brpl	.+62     	; 0xa94 <__floatsisf+0x6c>
 a56:	bb 0f       	add	r27, r27
 a58:	11 f4       	brne	.+4      	; 0xa5e <__floatsisf+0x36>
 a5a:	60 ff       	sbrs	r22, 0
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <__floatsisf+0x6c>
 a5e:	6f 5f       	subi	r22, 0xFF	; 255
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	16 c0       	rjmp	.+44     	; 0xa94 <__floatsisf+0x6c>
 a68:	88 23       	and	r24, r24
 a6a:	11 f0       	breq	.+4      	; 0xa70 <__floatsisf+0x48>
 a6c:	96 e9       	ldi	r25, 0x96	; 150
 a6e:	11 c0       	rjmp	.+34     	; 0xa92 <__floatsisf+0x6a>
 a70:	77 23       	and	r23, r23
 a72:	21 f0       	breq	.+8      	; 0xa7c <__floatsisf+0x54>
 a74:	9e e8       	ldi	r25, 0x8E	; 142
 a76:	87 2f       	mov	r24, r23
 a78:	76 2f       	mov	r23, r22
 a7a:	05 c0       	rjmp	.+10     	; 0xa86 <__floatsisf+0x5e>
 a7c:	66 23       	and	r22, r22
 a7e:	71 f0       	breq	.+28     	; 0xa9c <__floatsisf+0x74>
 a80:	96 e8       	ldi	r25, 0x86	; 134
 a82:	86 2f       	mov	r24, r22
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	2a f0       	brmi	.+10     	; 0xa94 <__floatsisf+0x6c>
 a8a:	9a 95       	dec	r25
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	da f7       	brpl	.-10     	; 0xa8a <__floatsisf+0x62>
 a94:	88 0f       	add	r24, r24
 a96:	96 95       	lsr	r25
 a98:	87 95       	ror	r24
 a9a:	97 f9       	bld	r25, 7
 a9c:	08 95       	ret

00000a9e <__fp_inf>:
 a9e:	97 f9       	bld	r25, 7
 aa0:	9f 67       	ori	r25, 0x7F	; 127
 aa2:	80 e8       	ldi	r24, 0x80	; 128
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	60 e0       	ldi	r22, 0x00	; 0
 aa8:	08 95       	ret

00000aaa <__fp_nan>:
 aaa:	9f ef       	ldi	r25, 0xFF	; 255
 aac:	80 ec       	ldi	r24, 0xC0	; 192
 aae:	08 95       	ret

00000ab0 <__fp_pscA>:
 ab0:	00 24       	eor	r0, r0
 ab2:	0a 94       	dec	r0
 ab4:	16 16       	cp	r1, r22
 ab6:	17 06       	cpc	r1, r23
 ab8:	18 06       	cpc	r1, r24
 aba:	09 06       	cpc	r0, r25
 abc:	08 95       	ret

00000abe <__fp_pscB>:
 abe:	00 24       	eor	r0, r0
 ac0:	0a 94       	dec	r0
 ac2:	12 16       	cp	r1, r18
 ac4:	13 06       	cpc	r1, r19
 ac6:	14 06       	cpc	r1, r20
 ac8:	05 06       	cpc	r0, r21
 aca:	08 95       	ret

00000acc <__fp_round>:
 acc:	09 2e       	mov	r0, r25
 ace:	03 94       	inc	r0
 ad0:	00 0c       	add	r0, r0
 ad2:	11 f4       	brne	.+4      	; 0xad8 <__fp_round+0xc>
 ad4:	88 23       	and	r24, r24
 ad6:	52 f0       	brmi	.+20     	; 0xaec <__fp_round+0x20>
 ad8:	bb 0f       	add	r27, r27
 ada:	40 f4       	brcc	.+16     	; 0xaec <__fp_round+0x20>
 adc:	bf 2b       	or	r27, r31
 ade:	11 f4       	brne	.+4      	; 0xae4 <__fp_round+0x18>
 ae0:	60 ff       	sbrs	r22, 0
 ae2:	04 c0       	rjmp	.+8      	; 0xaec <__fp_round+0x20>
 ae4:	6f 5f       	subi	r22, 0xFF	; 255
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	08 95       	ret

00000aee <__fp_split3>:
 aee:	57 fd       	sbrc	r21, 7
 af0:	90 58       	subi	r25, 0x80	; 128
 af2:	44 0f       	add	r20, r20
 af4:	55 1f       	adc	r21, r21
 af6:	59 f0       	breq	.+22     	; 0xb0e <__fp_splitA+0x10>
 af8:	5f 3f       	cpi	r21, 0xFF	; 255
 afa:	71 f0       	breq	.+28     	; 0xb18 <__fp_splitA+0x1a>
 afc:	47 95       	ror	r20

00000afe <__fp_splitA>:
 afe:	88 0f       	add	r24, r24
 b00:	97 fb       	bst	r25, 7
 b02:	99 1f       	adc	r25, r25
 b04:	61 f0       	breq	.+24     	; 0xb1e <__fp_splitA+0x20>
 b06:	9f 3f       	cpi	r25, 0xFF	; 255
 b08:	79 f0       	breq	.+30     	; 0xb28 <__fp_splitA+0x2a>
 b0a:	87 95       	ror	r24
 b0c:	08 95       	ret
 b0e:	12 16       	cp	r1, r18
 b10:	13 06       	cpc	r1, r19
 b12:	14 06       	cpc	r1, r20
 b14:	55 1f       	adc	r21, r21
 b16:	f2 cf       	rjmp	.-28     	; 0xafc <__fp_split3+0xe>
 b18:	46 95       	lsr	r20
 b1a:	f1 df       	rcall	.-30     	; 0xafe <__fp_splitA>
 b1c:	08 c0       	rjmp	.+16     	; 0xb2e <__fp_splitA+0x30>
 b1e:	16 16       	cp	r1, r22
 b20:	17 06       	cpc	r1, r23
 b22:	18 06       	cpc	r1, r24
 b24:	99 1f       	adc	r25, r25
 b26:	f1 cf       	rjmp	.-30     	; 0xb0a <__fp_splitA+0xc>
 b28:	86 95       	lsr	r24
 b2a:	71 05       	cpc	r23, r1
 b2c:	61 05       	cpc	r22, r1
 b2e:	08 94       	sec
 b30:	08 95       	ret

00000b32 <__fp_zero>:
 b32:	e8 94       	clt

00000b34 <__fp_szero>:
 b34:	bb 27       	eor	r27, r27
 b36:	66 27       	eor	r22, r22
 b38:	77 27       	eor	r23, r23
 b3a:	cb 01       	movw	r24, r22
 b3c:	97 f9       	bld	r25, 7
 b3e:	08 95       	ret

00000b40 <__divmodsi4>:
 b40:	97 fb       	bst	r25, 7
 b42:	09 2e       	mov	r0, r25
 b44:	05 26       	eor	r0, r21
 b46:	0e d0       	rcall	.+28     	; 0xb64 <__divmodsi4_neg1>
 b48:	57 fd       	sbrc	r21, 7
 b4a:	04 d0       	rcall	.+8      	; 0xb54 <__divmodsi4_neg2>
 b4c:	14 d0       	rcall	.+40     	; 0xb76 <__udivmodsi4>
 b4e:	0a d0       	rcall	.+20     	; 0xb64 <__divmodsi4_neg1>
 b50:	00 1c       	adc	r0, r0
 b52:	38 f4       	brcc	.+14     	; 0xb62 <__divmodsi4_exit>

00000b54 <__divmodsi4_neg2>:
 b54:	50 95       	com	r21
 b56:	40 95       	com	r20
 b58:	30 95       	com	r19
 b5a:	21 95       	neg	r18
 b5c:	3f 4f       	sbci	r19, 0xFF	; 255
 b5e:	4f 4f       	sbci	r20, 0xFF	; 255
 b60:	5f 4f       	sbci	r21, 0xFF	; 255

00000b62 <__divmodsi4_exit>:
 b62:	08 95       	ret

00000b64 <__divmodsi4_neg1>:
 b64:	f6 f7       	brtc	.-4      	; 0xb62 <__divmodsi4_exit>
 b66:	90 95       	com	r25
 b68:	80 95       	com	r24
 b6a:	70 95       	com	r23
 b6c:	61 95       	neg	r22
 b6e:	7f 4f       	sbci	r23, 0xFF	; 255
 b70:	8f 4f       	sbci	r24, 0xFF	; 255
 b72:	9f 4f       	sbci	r25, 0xFF	; 255
 b74:	08 95       	ret

00000b76 <__udivmodsi4>:
 b76:	a1 e2       	ldi	r26, 0x21	; 33
 b78:	1a 2e       	mov	r1, r26
 b7a:	aa 1b       	sub	r26, r26
 b7c:	bb 1b       	sub	r27, r27
 b7e:	fd 01       	movw	r30, r26
 b80:	0d c0       	rjmp	.+26     	; 0xb9c <__udivmodsi4_ep>

00000b82 <__udivmodsi4_loop>:
 b82:	aa 1f       	adc	r26, r26
 b84:	bb 1f       	adc	r27, r27
 b86:	ee 1f       	adc	r30, r30
 b88:	ff 1f       	adc	r31, r31
 b8a:	a2 17       	cp	r26, r18
 b8c:	b3 07       	cpc	r27, r19
 b8e:	e4 07       	cpc	r30, r20
 b90:	f5 07       	cpc	r31, r21
 b92:	20 f0       	brcs	.+8      	; 0xb9c <__udivmodsi4_ep>
 b94:	a2 1b       	sub	r26, r18
 b96:	b3 0b       	sbc	r27, r19
 b98:	e4 0b       	sbc	r30, r20
 b9a:	f5 0b       	sbc	r31, r21

00000b9c <__udivmodsi4_ep>:
 b9c:	66 1f       	adc	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	99 1f       	adc	r25, r25
 ba4:	1a 94       	dec	r1
 ba6:	69 f7       	brne	.-38     	; 0xb82 <__udivmodsi4_loop>
 ba8:	60 95       	com	r22
 baa:	70 95       	com	r23
 bac:	80 95       	com	r24
 bae:	90 95       	com	r25
 bb0:	9b 01       	movw	r18, r22
 bb2:	ac 01       	movw	r20, r24
 bb4:	bd 01       	movw	r22, r26
 bb6:	cf 01       	movw	r24, r30
 bb8:	08 95       	ret

00000bba <_exit>:
 bba:	f8 94       	cli

00000bbc <__stop_program>:
 bbc:	ff cf       	rjmp	.-2      	; 0xbbc <__stop_program>
