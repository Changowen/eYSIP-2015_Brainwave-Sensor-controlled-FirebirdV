
Attention_Eyeblink_bot _control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000008e4  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800202  00800202  0000097a  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000010e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca0  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002df  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000602  00000000  00000000  00002127  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  0000272c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f2  00000000  00000000  00002d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_5>
  18:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_6>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 36       	cpi	r26, 0x61	; 97
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 16 04 	call	0x82c	; 0x82c <main>
 122:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <Onesec_Rawval_Fun>:
		       }
	  }
  }

 void Onesec_Rawval_Fun ()
 {                                   //taking average of 100 data packets raw value samples
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
   Avg_Raw = Temp/100;
 12e:	60 91 49 02 	lds	r22, 0x0249
 132:	70 91 4a 02 	lds	r23, 0x024A
 136:	80 91 4b 02 	lds	r24, 0x024B
 13a:	90 91 4c 02 	lds	r25, 0x024C
 13e:	24 e6       	ldi	r18, 0x64	; 100
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	0e 94 33 04 	call	0x866	; 0x866 <__divmodsi4>
 14a:	89 01       	movw	r16, r18
 14c:	9a 01       	movw	r18, r20
 14e:	00 93 53 02 	sts	0x0253, r16
 152:	10 93 54 02 	sts	0x0254, r17
 156:	20 93 55 02 	sts	0x0255, r18
 15a:	30 93 56 02 	sts	0x0256, r19
   if (On_Flag==0 && Off_Flag==1)
 15e:	80 91 12 02 	lds	r24, 0x0212
 162:	90 91 13 02 	lds	r25, 0x0213
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	09 f0       	breq	.+2      	; 0x16c <Onesec_Rawval_Fun+0x42>
 16a:	52 c0       	rjmp	.+164    	; 0x210 <Onesec_Rawval_Fun+0xe6>
 16c:	80 91 00 02 	lds	r24, 0x0200
 170:	90 91 01 02 	lds	r25, 0x0201
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	91 05       	cpc	r25, r1
 178:	09 f0       	breq	.+2      	; 0x17c <Onesec_Rawval_Fun+0x52>
 17a:	4a c0       	rjmp	.+148    	; 0x210 <Onesec_Rawval_Fun+0xe6>
   {
     if (n<2)						//taking 2 sample of 100 data packets for verification of raw-data values
 17c:	80 91 0a 02 	lds	r24, 0x020A
 180:	90 91 0b 02 	lds	r25, 0x020B
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	91 05       	cpc	r25, r1
 188:	d0 f4       	brcc	.+52     	; 0x1be <Onesec_Rawval_Fun+0x94>
     {
       Temp_Avg += Avg_Raw;
 18a:	40 91 59 02 	lds	r20, 0x0259
 18e:	50 91 5a 02 	lds	r21, 0x025A
 192:	60 91 5b 02 	lds	r22, 0x025B
 196:	70 91 5c 02 	lds	r23, 0x025C
 19a:	04 0f       	add	r16, r20
 19c:	15 1f       	adc	r17, r21
 19e:	26 1f       	adc	r18, r22
 1a0:	37 1f       	adc	r19, r23
 1a2:	00 93 59 02 	sts	0x0259, r16
 1a6:	10 93 5a 02 	sts	0x025A, r17
 1aa:	20 93 5b 02 	sts	0x025B, r18
 1ae:	30 93 5c 02 	sts	0x025C, r19
       n++;
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	90 93 0b 02 	sts	0x020B, r25
 1b8:	80 93 0a 02 	sts	0x020A, r24
 1bc:	29 c0       	rjmp	.+82     	; 0x210 <Onesec_Rawval_Fun+0xe6>
     }
     else
     {
       Temp_Avg = Temp_Avg/2;		//taking average
 1be:	60 91 59 02 	lds	r22, 0x0259
 1c2:	70 91 5a 02 	lds	r23, 0x025A
 1c6:	80 91 5b 02 	lds	r24, 0x025B
 1ca:	90 91 5c 02 	lds	r25, 0x025C
 1ce:	22 e0       	ldi	r18, 0x02	; 2
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	0e 94 33 04 	call	0x866	; 0x866 <__divmodsi4>
       if (Temp_Avg<EEG_AVG)
 1da:	2a 3f       	cpi	r18, 0xFA	; 250
 1dc:	31 05       	cpc	r19, r1
 1de:	41 05       	cpc	r20, r1
 1e0:	51 05       	cpc	r21, r1
 1e2:	54 f4       	brge	.+20     	; 0x1f8 <Onesec_Rawval_Fun+0xce>
       {
         On_Flag=1;Off_Flag=0;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 13 02 	sts	0x0213, r25
 1ec:	80 93 12 02 	sts	0x0212, r24
 1f0:	10 92 01 02 	sts	0x0201, r1
 1f4:	10 92 00 02 	sts	0x0200, r1
       }
       n=0;Temp_Avg=0;
 1f8:	10 92 0b 02 	sts	0x020B, r1
 1fc:	10 92 0a 02 	sts	0x020A, r1
 200:	10 92 59 02 	sts	0x0259, r1
 204:	10 92 5a 02 	sts	0x025A, r1
 208:	10 92 5b 02 	sts	0x025B, r1
 20c:	10 92 5c 02 	sts	0x025C, r1
     }
   }
   Eye_Blink ();
 210:	0e 94 66 02 	call	0x4cc	; 0x4cc <Eye_Blink>
   j=0;
 214:	10 92 41 02 	sts	0x0241, r1
 218:	10 92 40 02 	sts	0x0240, r1
   Temp=0;
 21c:	10 92 49 02 	sts	0x0249, r1
 220:	10 92 4a 02 	sts	0x024A, r1
 224:	10 92 4b 02 	sts	0x024B, r1
 228:	10 92 4c 02 	sts	0x024C, r1

   }
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <LED_bargraph_config>:
long Temp,Temp1,Avg_Raw,Temp_Avg;
volatile unsigned int ShaftCountRight,ShaftCountLeft,flag;
//LED configuration
 void LED_bargraph_config (void)
 {
	 DDRJ = 0xFF;  //PORT J is configured as output
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	80 93 04 01 	sts	0x0104, r24
	 PORTJ = 0x00; //Output is set to 0
 238:	10 92 05 01 	sts	0x0105, r1

	 //LCD
// 	 DDRC = DDRC | 0xF7;
// 	 PORTC = PORTC & 0x80;
 }
 23c:	08 95       	ret

0000023e <buzzer_pin_config>:
 //Buzzer pin configuration
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 23e:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 240:	43 98       	cbi	0x08, 3	; 8
}
 242:	08 95       	ret

00000244 <motion_pin_config>:
//Motion configuration
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
 244:	81 b1       	in	r24, 0x01	; 1
 246:	8f 60       	ori	r24, 0x0F	; 15
 248:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
 24a:	82 b1       	in	r24, 0x02	; 2
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 250:	ea e0       	ldi	r30, 0x0A	; 10
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	80 81       	ld	r24, Z
 256:	88 61       	ori	r24, 0x18	; 24
 258:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 25a:	eb e0       	ldi	r30, 0x0B	; 11
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	80 81       	ld	r24, Z
 260:	88 61       	ori	r24, 0x18	; 24
 262:	80 83       	st	Z, r24
}
 264:	08 95       	ret

00000266 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortARestore = PORTA; 			// reading the PORTA's original status
 266:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 268:	90 7f       	andi	r25, 0xF0	; 240
}
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 26a:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 			// reading the PORTA's original status
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
	PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 26c:	98 2b       	or	r25, r24
	PORTA = PortARestore; 			// setting the command to the port
 26e:	92 b9       	out	0x02, r25	; 2
}
 270:	08 95       	ret

00000272 <left_encoder_pin_config>:
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
 272:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
 274:	74 9a       	sbi	0x0e, 4	; 14
}
 276:	08 95       	ret

00000278 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
 278:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
 27a:	75 9a       	sbi	0x0e, 5	; 14
}
 27c:	08 95       	ret

0000027e <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
 27e:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
 280:	ea e6       	ldi	r30, 0x6A	; 106
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	82 60       	ori	r24, 0x02	; 2
 288:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
 28a:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
 28c:	78 94       	sei
}
 28e:	08 95       	ret

00000290 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
 290:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
 292:	ea e6       	ldi	r30, 0x6A	; 106
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 29c:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
 29e:	78 94       	sei
}
 2a0:	08 95       	ret

000002a2 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
	ShaftCountRight++;  //increment right shaft position count
 2b0:	80 91 4f 02 	lds	r24, 0x024F
 2b4:	90 91 50 02 	lds	r25, 0x0250
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	90 93 50 02 	sts	0x0250, r25
 2be:	80 93 4f 02 	sts	0x024F, r24
}
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
	ShaftCountLeft++;  //increment left shaft position count
 2de:	80 91 57 02 	lds	r24, 0x0257
 2e2:	90 91 58 02 	lds	r25, 0x0258
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	90 93 58 02 	sts	0x0258, r25
 2ec:	80 93 57 02 	sts	0x0257, r24
}
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <port_init>:


//Function to initialize ports
void port_init()
{
	motion_pin_config();
 2fe:	0e 94 22 01 	call	0x244	; 0x244 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
 302:	0e 94 39 01 	call	0x272	; 0x272 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
 306:	0e 94 3c 01 	call	0x278	; 0x278 <right_encoder_pin_config>
	buzzer_pin_config();
 30a:	0e 94 1f 01 	call	0x23e	; 0x23e <buzzer_pin_config>
	LED_bargraph_config();
 30e:	0e 94 19 01 	call	0x232	; 0x232 <LED_bargraph_config>
}
 312:	08 95       	ret

00000314 <buzzer_on>:

//Buzzer On
void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 314:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
 316:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
 318:	88 b9       	out	0x08, r24	; 8
}
 31a:	08 95       	ret

0000031c <buzzer_off>:
//Buzzer Off
void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 31c:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
 31e:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
 320:	88 b9       	out	0x08, r24	; 8
}
 322:	08 95       	ret

00000324 <left>:
//Left motion
void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
 324:	85 e0       	ldi	r24, 0x05	; 5
 326:	0e 94 33 01 	call	0x266	; 0x266 <motion_set>
}
 32a:	08 95       	ret

0000032c <timer5_init>:
//Initialization of timer 5 for velocity
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 32c:	e1 e2       	ldi	r30, 0x21	; 33
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 33e:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 342:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 346:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 34a:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 34e:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 352:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 356:	89 ea       	ldi	r24, 0xA9	; 169
 358:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 35c:	8b e0       	ldi	r24, 0x0B	; 11
 35e:	80 83       	st	Z, r24
}
 360:	08 95       	ret

00000362 <uart1_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart1_init(void)
{
	UCSR1B = 0x00; //disable while setting baud rate
 362:	e9 ec       	ldi	r30, 0xC9	; 201
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	10 82       	st	Z, r1
	UCSR1A = 0x00;
 368:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0x06;
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1L = 0x5F; //set baud rate lo
 372:	8f e5       	ldi	r24, 0x5F	; 95
 374:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = 0x00; //set baud rate hi
 378:	10 92 cd 00 	sts	0x00CD, r1
	UCSR1B = 0xD8;
 37c:	88 ed       	ldi	r24, 0xD8	; 216
 37e:	80 83       	st	Z, r24
}
 380:	08 95       	ret

00000382 <right>:
//Right turn
void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
 382:	8a e0       	ldi	r24, 0x0A	; 10
 384:	0e 94 33 01 	call	0x266	; 0x266 <motion_set>
}
 388:	08 95       	ret

0000038a <__vector_36>:

//Function to take data from ISR byte by byte
char USART1_RX_vect()
{
	while(!(UCSR1A & (1<<RXC1)));
 38a:	e8 ec       	ldi	r30, 0xC8	; 200
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	88 23       	and	r24, r24
 392:	ec f7       	brge	.-6      	; 0x38e <__vector_36+0x4>
	return UDR1;
 394:	80 91 ce 00 	lds	r24, 0x00CE
}
 398:	08 95       	ret

0000039a <stop>:
void stop (void) //hard stop
{
	motion_set(0x00);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 33 01 	call	0x266	; 0x266 <motion_set>
}
 3a0:	08 95       	ret

000003a2 <velocity>:
//velocity
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 3a2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 3a6:	60 93 2a 01 	sts	0x012A, r22
}
 3aa:	08 95       	ret

000003ac <forward>:
//Forward motion
void forward (void) //both wheels forward
{
	motion_set(0x06);
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	0e 94 33 01 	call	0x266	; 0x266 <motion_set>
}
 3b2:	08 95       	ret

000003b4 <run>:

void run(){
	 if(Att_Avg>=1 && Att_Avg<=10){ //Mind Wandering level
 3b4:	80 91 48 02 	lds	r24, 0x0248
 3b8:	88 23       	and	r24, r24
 3ba:	51 f0       	breq	.+20     	; 0x3d0 <run+0x1c>
 3bc:	80 91 48 02 	lds	r24, 0x0248
 3c0:	8b 30       	cpi	r24, 0x0B	; 11
 3c2:	30 f4       	brcc	.+12     	; 0x3d0 <run+0x1c>
		 PORTJ=0X01;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 05 01 	sts	0x0105, r24
		 stop();
 3ca:	0e 94 cd 01 	call	0x39a	; 0x39a <stop>
 3ce:	08 95       	ret
		 }
	 else if(Att_Avg>10 && Att_Avg<=30){ //Poor level of attention
 3d0:	80 91 48 02 	lds	r24, 0x0248
 3d4:	8b 30       	cpi	r24, 0x0B	; 11
 3d6:	70 f0       	brcs	.+28     	; 0x3f4 <run+0x40>
 3d8:	80 91 48 02 	lds	r24, 0x0248
 3dc:	8f 31       	cpi	r24, 0x1F	; 31
 3de:	50 f4       	brcc	.+20     	; 0x3f4 <run+0x40>
		 PORTJ=0x03;
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	80 93 05 01 	sts	0x0105, r24
		 velocity(190,190);
 3e6:	8e eb       	ldi	r24, 0xBE	; 190
 3e8:	6e eb       	ldi	r22, 0xBE	; 190
 3ea:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <velocity>
		 forward();
 3ee:	0e 94 d6 01 	call	0x3ac	; 0x3ac <forward>
 3f2:	08 95       	ret
	 }
	 else if(Att_Avg>30 && Att_Avg<=40){ //Attention level building up
 3f4:	80 91 48 02 	lds	r24, 0x0248
 3f8:	8f 31       	cpi	r24, 0x1F	; 31
 3fa:	70 f0       	brcs	.+28     	; 0x418 <run+0x64>
 3fc:	80 91 48 02 	lds	r24, 0x0248
 400:	89 32       	cpi	r24, 0x29	; 41
 402:	50 f4       	brcc	.+20     	; 0x418 <run+0x64>
		 PORTJ=0X07;
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	80 93 05 01 	sts	0x0105, r24
		 velocity(200,200);
 40a:	88 ec       	ldi	r24, 0xC8	; 200
 40c:	68 ec       	ldi	r22, 0xC8	; 200
 40e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <velocity>
		 forward();
 412:	0e 94 d6 01 	call	0x3ac	; 0x3ac <forward>
 416:	08 95       	ret
	 }
	 else if(Att_Avg>40 && Att_Avg<=50){ //Neutral
 418:	80 91 48 02 	lds	r24, 0x0248
 41c:	89 32       	cpi	r24, 0x29	; 41
 41e:	70 f0       	brcs	.+28     	; 0x43c <run+0x88>
 420:	80 91 48 02 	lds	r24, 0x0248
 424:	83 33       	cpi	r24, 0x33	; 51
 426:	50 f4       	brcc	.+20     	; 0x43c <run+0x88>
		 PORTJ=0X0F;
 428:	8f e0       	ldi	r24, 0x0F	; 15
 42a:	80 93 05 01 	sts	0x0105, r24
		 velocity(220,220);
 42e:	8c ed       	ldi	r24, 0xDC	; 220
 430:	6c ed       	ldi	r22, 0xDC	; 220
 432:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <velocity>
		 forward();
 436:	0e 94 d6 01 	call	0x3ac	; 0x3ac <forward>
 43a:	08 95       	ret
	 }
	 else if(Att_Avg>50 && Att_Avg<=60){ //Neutral
 43c:	80 91 48 02 	lds	r24, 0x0248
 440:	83 33       	cpi	r24, 0x33	; 51
 442:	70 f0       	brcs	.+28     	; 0x460 <run+0xac>
 444:	80 91 48 02 	lds	r24, 0x0248
 448:	8d 33       	cpi	r24, 0x3D	; 61
 44a:	50 f4       	brcc	.+20     	; 0x460 <run+0xac>
		 PORTJ=0X1F;
 44c:	8f e1       	ldi	r24, 0x1F	; 31
 44e:	80 93 05 01 	sts	0x0105, r24
		 velocity(220,220);
 452:	8c ed       	ldi	r24, 0xDC	; 220
 454:	6c ed       	ldi	r22, 0xDC	; 220
 456:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <velocity>
		 forward();
 45a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <forward>
 45e:	08 95       	ret
	 }
	 else if(Att_Avg>60 && Att_Avg<=70){ //Slightly elevated
 460:	80 91 48 02 	lds	r24, 0x0248
 464:	8d 33       	cpi	r24, 0x3D	; 61
 466:	70 f0       	brcs	.+28     	; 0x484 <run+0xd0>
 468:	80 91 48 02 	lds	r24, 0x0248
 46c:	87 34       	cpi	r24, 0x47	; 71
 46e:	50 f4       	brcc	.+20     	; 0x484 <run+0xd0>
		 PORTJ=0X3F;
 470:	8f e3       	ldi	r24, 0x3F	; 63
 472:	80 93 05 01 	sts	0x0105, r24
		 velocity(230,230);
 476:	86 ee       	ldi	r24, 0xE6	; 230
 478:	66 ee       	ldi	r22, 0xE6	; 230
 47a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <velocity>
		 forward();
 47e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <forward>
 482:	08 95       	ret
	 }
	 else if(Att_Avg>70 && Att_Avg<=80){ //Slightly elevated
 484:	80 91 48 02 	lds	r24, 0x0248
 488:	87 34       	cpi	r24, 0x47	; 71
 48a:	70 f0       	brcs	.+28     	; 0x4a8 <run+0xf4>
 48c:	80 91 48 02 	lds	r24, 0x0248
 490:	81 35       	cpi	r24, 0x51	; 81
 492:	50 f4       	brcc	.+20     	; 0x4a8 <run+0xf4>
		 PORTJ=0X7F;
 494:	8f e7       	ldi	r24, 0x7F	; 127
 496:	80 93 05 01 	sts	0x0105, r24
		 velocity(240,240);
 49a:	80 ef       	ldi	r24, 0xF0	; 240
 49c:	60 ef       	ldi	r22, 0xF0	; 240
 49e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <velocity>
		 forward();
 4a2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <forward>
 4a6:	08 95       	ret
	 }
	 else if(Att_Avg>80 && Att_Avg<=100){ //Elevated
 4a8:	80 91 48 02 	lds	r24, 0x0248
 4ac:	81 35       	cpi	r24, 0x51	; 81
 4ae:	68 f0       	brcs	.+26     	; 0x4ca <run+0x116>
 4b0:	80 91 48 02 	lds	r24, 0x0248
 4b4:	85 36       	cpi	r24, 0x65	; 101
 4b6:	48 f4       	brcc	.+18     	; 0x4ca <run+0x116>
		 PORTJ=0xFF;
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	80 93 05 01 	sts	0x0105, r24
		 velocity(240,240);
 4be:	80 ef       	ldi	r24, 0xF0	; 240
 4c0:	60 ef       	ldi	r22, 0xF0	; 240
 4c2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <velocity>
		 forward();
 4c6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <forward>
 4ca:	08 95       	ret

000004cc <Eye_Blink>:

   }
 //function for indication of eye-bling and raw values when removed from head
 void Eye_Blink ()
 {
   if (Eye_Enable)
 4cc:	80 91 14 02 	lds	r24, 0x0214
 4d0:	90 91 15 02 	lds	r25, 0x0215
 4d4:	00 97       	sbiw	r24, 0x00	; 0
 4d6:	09 f4       	brne	.+2      	; 0x4da <Eye_Blink+0xe>
 4d8:	74 c0       	rjmp	.+232    	; 0x5c2 <Eye_Blink+0xf6>
   {
     if (On_Flag==1 && Off_Flag==0)
 4da:	80 91 12 02 	lds	r24, 0x0212
 4de:	90 91 13 02 	lds	r25, 0x0213
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	91 05       	cpc	r25, r1
 4e6:	09 f0       	breq	.+2      	; 0x4ea <Eye_Blink+0x1e>
 4e8:	69 c0       	rjmp	.+210    	; 0x5bc <Eye_Blink+0xf0>
 4ea:	80 91 00 02 	lds	r24, 0x0200
 4ee:	90 91 01 02 	lds	r25, 0x0201
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <Eye_Blink+0x2c>
 4f6:	62 c0       	rjmp	.+196    	; 0x5bc <Eye_Blink+0xf0>
     {
       if ((Avg_Raw>Theshold_Eyeblink) && (Avg_Raw<350)) //eye-blink detected
 4f8:	80 91 53 02 	lds	r24, 0x0253
 4fc:	90 91 54 02 	lds	r25, 0x0254
 500:	a0 91 55 02 	lds	r26, 0x0255
 504:	b0 91 56 02 	lds	r27, 0x0256
 508:	ac 01       	movw	r20, r24
 50a:	bd 01       	movw	r22, r26
 50c:	4f 56       	subi	r20, 0x6F	; 111
 50e:	50 40       	sbci	r21, 0x00	; 0
 510:	60 40       	sbci	r22, 0x00	; 0
 512:	70 40       	sbci	r23, 0x00	; 0
 514:	4f 3e       	cpi	r20, 0xEF	; 239
 516:	51 05       	cpc	r21, r1
 518:	61 05       	cpc	r22, r1
 51a:	71 05       	cpc	r23, r1
 51c:	b8 f5       	brcc	.+110    	; 0x58c <Eye_Blink+0xc0>
       {
		   p++;
 51e:	80 91 04 02 	lds	r24, 0x0204
 522:	90 91 05 02 	lds	r25, 0x0205
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	90 93 05 02 	sts	0x0205, r25
 52c:	80 93 04 02 	sts	0x0204, r24
		   buzzer_on();
 530:	0e 94 8a 01 	call	0x314	; 0x314 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 534:	8f ef       	ldi	r24, 0xFF	; 255
 536:	9f e7       	ldi	r25, 0x7F	; 127
 538:	a6 e1       	ldi	r26, 0x16	; 22
 53a:	81 50       	subi	r24, 0x01	; 1
 53c:	90 40       	sbci	r25, 0x00	; 0
 53e:	a0 40       	sbci	r26, 0x00	; 0
 540:	e1 f7       	brne	.-8      	; 0x53a <Eye_Blink+0x6e>
 542:	00 c0       	rjmp	.+0      	; 0x544 <Eye_Blink+0x78>
 544:	00 00       	nop
		   _delay_ms(500);
		   buzzer_off();
 546:	0e 94 8e 01 	call	0x31c	; 0x31c <buzzer_off>
		  if(p==2){
 54a:	80 91 04 02 	lds	r24, 0x0204
 54e:	90 91 05 02 	lds	r25, 0x0205
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	91 05       	cpc	r25, r1
 556:	d1 f5       	brne	.+116    	; 0x5cc <Eye_Blink+0x100>
		stop();
 558:	0e 94 cd 01 	call	0x39a	; 0x39a <stop>
		velocity(240,240);
 55c:	80 ef       	ldi	r24, 0xF0	; 240
 55e:	60 ef       	ldi	r22, 0xF0	; 240
 560:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <velocity>
		left();
 564:	0e 94 92 01 	call	0x324	; 0x324 <left>
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	9f e3       	ldi	r25, 0x3F	; 63
 56c:	ad e1       	ldi	r26, 0x1D	; 29
 56e:	81 50       	subi	r24, 0x01	; 1
 570:	90 40       	sbci	r25, 0x00	; 0
 572:	a0 40       	sbci	r26, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <Eye_Blink+0xa2>
 576:	00 c0       	rjmp	.+0      	; 0x578 <Eye_Blink+0xac>
 578:	00 00       	nop
		_delay_ms(650);
		stop();
 57a:	0e 94 cd 01 	call	0x39a	; 0x39a <stop>
		run();
 57e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <run>
		p=0;
 582:	10 92 05 02 	sts	0x0205, r1
 586:	10 92 04 02 	sts	0x0204, r1
 58a:	08 95       	ret
		   }
	   }
       else
       {
         if (Avg_Raw>350)  //Raw data values indication
 58c:	8f 35       	cpi	r24, 0x5F	; 95
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	92 07       	cpc	r25, r18
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	a2 07       	cpc	r26, r18
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	b2 07       	cpc	r27, r18
 59a:	c4 f0       	brlt	.+48     	; 0x5cc <Eye_Blink+0x100>
         {
			buzzer_on();_delay_ms(50);buzzer_off(); //Sensor removed from head, bot stops.
 59c:	0e 94 8a 01 	call	0x314	; 0x314 <buzzer_on>
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	9f e3       	ldi	r25, 0x3F	; 63
 5a4:	a2 e0       	ldi	r26, 0x02	; 2
 5a6:	81 50       	subi	r24, 0x01	; 1
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	a0 40       	sbci	r26, 0x00	; 0
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <Eye_Blink+0xda>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <Eye_Blink+0xe4>
 5b0:	00 00       	nop
 5b2:	0e 94 8e 01 	call	0x31c	; 0x31c <buzzer_off>
			stop();
 5b6:	0e 94 cd 01 	call	0x39a	; 0x39a <stop>
 5ba:	08 95       	ret
       }
	   }

	 else
     {
       PORTJ=0x00;
 5bc:	10 92 05 01 	sts	0x0105, r1
 5c0:	08 95       	ret
     }
	 }
   else    //Device is paired
   {
     PORTJ=0x01;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	80 93 05 01 	sts	0x0105, r24
	 stop();
 5c8:	0e 94 cd 01 	call	0x39a	; 0x39a <stop>
 5cc:	08 95       	ret

000005ce <checkData>:
	 }
}


 void checkData(){ //if two eye-blinks are not detected vary the velocity depending upon the attention level
	 if(p<2){
 5ce:	80 91 04 02 	lds	r24, 0x0204
 5d2:	90 91 05 02 	lds	r25, 0x0205
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	91 05       	cpc	r25, r1
 5da:	10 f4       	brcc	.+4      	; 0x5e0 <checkData+0x12>
	 run();
 5dc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <run>
 5e0:	08 95       	ret

000005e2 <Small_Packet>:
	 }
 }

 //Function performed when payload length of 0x04 is detected
 void Small_Packet ()
 {
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
   generatedchecksum = 0;
 5ea:	10 92 16 02 	sts	0x0216, r1
   for(int i = 0; i < Plength; i++)
 5ee:	80 91 42 02 	lds	r24, 0x0242
 5f2:	90 91 43 02 	lds	r25, 0x0243
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	c1 f0       	breq	.+48     	; 0x62a <Small_Packet+0x48>
 5fa:	c0 e0       	ldi	r28, 0x00	; 0
 5fc:	d0 e0       	ldi	r29, 0x00	; 0
   {
     payloadDataS[i] = USART1_RX_vect();      //Read payload into memory
 5fe:	08 e3       	ldi	r16, 0x38	; 56
 600:	12 e0       	ldi	r17, 0x02	; 2
 602:	0e 94 c5 01 	call	0x38a	; 0x38a <__vector_36>
 606:	f8 01       	movw	r30, r16
 608:	ec 0f       	add	r30, r28
 60a:	fd 1f       	adc	r31, r29
 60c:	80 83       	st	Z, r24
     generatedchecksum  += payloadDataS[i] ;
 60e:	90 81       	ld	r25, Z
 610:	80 91 16 02 	lds	r24, 0x0216
 614:	89 0f       	add	r24, r25
 616:	80 93 16 02 	sts	0x0216, r24

 //Function performed when payload length of 0x04 is detected
 void Small_Packet ()
 {
   generatedchecksum = 0;
   for(int i = 0; i < Plength; i++)
 61a:	21 96       	adiw	r28, 0x01	; 1
 61c:	80 91 42 02 	lds	r24, 0x0242
 620:	90 91 43 02 	lds	r25, 0x0243
 624:	c8 17       	cp	r28, r24
 626:	d9 07       	cpc	r29, r25
 628:	60 f3       	brcs	.-40     	; 0x602 <Small_Packet+0x20>
   {
     payloadDataS[i] = USART1_RX_vect();      //Read payload into memory
     generatedchecksum  += payloadDataS[i] ;
   }
   generatedchecksum = 255 - generatedchecksum;
 62a:	80 91 16 02 	lds	r24, 0x0216
 62e:	80 95       	com	r24
 630:	80 93 16 02 	sts	0x0216, r24
   checksum  = USART1_RX_vect();
 634:	0e 94 c5 01 	call	0x38a	; 0x38a <__vector_36>
 638:	80 93 17 02 	sts	0x0217, r24
   if(checksum == generatedchecksum)        // Verify Checksum
 63c:	90 91 17 02 	lds	r25, 0x0217
 640:	80 91 16 02 	lds	r24, 0x0216
 644:	98 17       	cp	r25, r24
 646:	09 f0       	breq	.+2      	; 0x64a <Small_Packet+0x68>
 648:	48 c0       	rjmp	.+144    	; 0x6da <Small_Packet+0xf8>
   {
     if (j<100)								//Take 100 data packets sample
 64a:	80 91 40 02 	lds	r24, 0x0240
 64e:	90 91 41 02 	lds	r25, 0x0241
 652:	84 36       	cpi	r24, 0x64	; 100
 654:	91 05       	cpc	r25, r1
 656:	08 f0       	brcs	.+2      	; 0x65a <Small_Packet+0x78>
 658:	3e c0       	rjmp	.+124    	; 0x6d6 <Small_Packet+0xf4>
     {
       Raw_data  = ((payloadDataS[2] <<8)| payloadDataS[3]); //check for raw data values
 65a:	50 91 3a 02 	lds	r21, 0x023A
 65e:	40 91 3b 02 	lds	r20, 0x023B
 662:	35 2f       	mov	r19, r21
 664:	20 e0       	ldi	r18, 0x00	; 0
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	24 2b       	or	r18, r20
 66a:	35 2b       	or	r19, r21
       if(Raw_data&0xF000)
 66c:	a9 01       	movw	r20, r18
 66e:	40 70       	andi	r20, 0x00	; 0
 670:	50 7f       	andi	r21, 0xF0	; 240
 672:	41 15       	cp	r20, r1
 674:	51 05       	cpc	r21, r1
 676:	51 f0       	breq	.+20     	; 0x68c <Small_Packet+0xaa>
       {
         Raw_data = (((~Raw_data)&0xFFF)+1);
 678:	20 95       	com	r18
 67a:	30 95       	com	r19
 67c:	3f 70       	andi	r19, 0x0F	; 15
 67e:	2f 5f       	subi	r18, 0xFF	; 255
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	30 93 52 02 	sts	0x0252, r19
 686:	20 93 51 02 	sts	0x0251, r18
 68a:	05 c0       	rjmp	.+10     	; 0x696 <Small_Packet+0xb4>
       }
       else
       {
         Raw_data = (Raw_data&0xFFF);
 68c:	3f 70       	andi	r19, 0x0F	; 15
 68e:	30 93 52 02 	sts	0x0252, r19
 692:	20 93 51 02 	sts	0x0251, r18
       }
       Temp += Raw_data;
 696:	40 91 51 02 	lds	r20, 0x0251
 69a:	50 91 52 02 	lds	r21, 0x0252
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	00 91 49 02 	lds	r16, 0x0249
 6a6:	10 91 4a 02 	lds	r17, 0x024A
 6aa:	20 91 4b 02 	lds	r18, 0x024B
 6ae:	30 91 4c 02 	lds	r19, 0x024C
 6b2:	40 0f       	add	r20, r16
 6b4:	51 1f       	adc	r21, r17
 6b6:	62 1f       	adc	r22, r18
 6b8:	73 1f       	adc	r23, r19
 6ba:	40 93 49 02 	sts	0x0249, r20
 6be:	50 93 4a 02 	sts	0x024A, r21
 6c2:	60 93 4b 02 	sts	0x024B, r22
 6c6:	70 93 4c 02 	sts	0x024C, r23
       j++;
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	90 93 41 02 	sts	0x0241, r25
 6d0:	80 93 40 02 	sts	0x0240, r24
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <Small_Packet+0xf8>
     }
     else
     {
       Onesec_Rawval_Fun ();
 6d6:	0e 94 95 00 	call	0x12a	; 0x12a <Onesec_Rawval_Fun>
     }
   }
 }
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	08 95       	ret

000006e4 <Big_Packet>:

 void Big_Packet()
 {
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
	  generatedchecksum = 0;
 6ec:	10 92 16 02 	sts	0x0216, r1
	  for(int i = 0; i < Plength; i++)
 6f0:	80 91 42 02 	lds	r24, 0x0242
 6f4:	90 91 43 02 	lds	r25, 0x0243
 6f8:	00 97       	sbiw	r24, 0x00	; 0
 6fa:	c1 f0       	breq	.+48     	; 0x72c <Big_Packet+0x48>
 6fc:	c0 e0       	ldi	r28, 0x00	; 0
 6fe:	d0 e0       	ldi	r29, 0x00	; 0
	  {
		  payloadDataB[i]     = USART1_RX_vect();      //Read payload into memory
 700:	08 e1       	ldi	r16, 0x18	; 24
 702:	12 e0       	ldi	r17, 0x02	; 2
 704:	0e 94 c5 01 	call	0x38a	; 0x38a <__vector_36>
 708:	f8 01       	movw	r30, r16
 70a:	ec 0f       	add	r30, r28
 70c:	fd 1f       	adc	r31, r29
 70e:	80 83       	st	Z, r24
		  generatedchecksum  += payloadDataB[i] ;
 710:	90 81       	ld	r25, Z
 712:	80 91 16 02 	lds	r24, 0x0216
 716:	89 0f       	add	r24, r25
 718:	80 93 16 02 	sts	0x0216, r24
 }

 void Big_Packet()
 {
	  generatedchecksum = 0;
	  for(int i = 0; i < Plength; i++)
 71c:	21 96       	adiw	r28, 0x01	; 1
 71e:	80 91 42 02 	lds	r24, 0x0242
 722:	90 91 43 02 	lds	r25, 0x0243
 726:	c8 17       	cp	r28, r24
 728:	d9 07       	cpc	r29, r25
 72a:	60 f3       	brcs	.-40     	; 0x704 <Big_Packet+0x20>
	  {
		  payloadDataB[i]     = USART1_RX_vect();      //Read payload into memory
		  generatedchecksum  += payloadDataB[i] ;
	  }
	  generatedchecksum = 255 - generatedchecksum;
 72c:	80 91 16 02 	lds	r24, 0x0216
 730:	80 95       	com	r24
 732:	80 93 16 02 	sts	0x0216, r24
	  checksum  = USART1_RX_vect();
 736:	0e 94 c5 01 	call	0x38a	; 0x38a <__vector_36>
 73a:	80 93 17 02 	sts	0x0217, r24

	  if(checksum == generatedchecksum)        // Varify Checksum
 73e:	90 91 17 02 	lds	r25, 0x0217
 742:	80 91 16 02 	lds	r24, 0x0216
 746:	98 17       	cp	r25, r24
 748:	09 f0       	breq	.+2      	; 0x74c <Big_Packet+0x68>
 74a:	62 c0       	rjmp	.+196    	; 0x810 <Big_Packet+0x12c>
	  {
		   if (payloadDataB[28]==4)				//check for attention signal
 74c:	80 91 34 02 	lds	r24, 0x0234
 750:	84 30       	cpi	r24, 0x04	; 4
 752:	09 f0       	breq	.+2      	; 0x756 <Big_Packet+0x72>
 754:	49 c0       	rjmp	.+146    	; 0x7e8 <Big_Packet+0x104>
		   {
			   if (f<2)
 756:	80 91 44 02 	lds	r24, 0x0244
 75a:	90 91 45 02 	lds	r25, 0x0245
 75e:	82 30       	cpi	r24, 0x02	; 2
 760:	91 05       	cpc	r25, r1
 762:	20 f5       	brcc	.+72     	; 0x7ac <Big_Packet+0xc8>
			   {
				   attention [k] = payloadDataB[29];  //attention level indication
 764:	e0 91 08 02 	lds	r30, 0x0208
 768:	f0 91 09 02 	lds	r31, 0x0209
 76c:	20 91 35 02 	lds	r18, 0x0235
 770:	e3 5c       	subi	r30, 0xC3	; 195
 772:	fd 4f       	sbci	r31, 0xFD	; 253
 774:	20 83       	st	Z, r18
				   Temp1 += attention [k];
 776:	20 81       	ld	r18, Z
 778:	40 91 5d 02 	lds	r20, 0x025D
 77c:	50 91 5e 02 	lds	r21, 0x025E
 780:	60 91 5f 02 	lds	r22, 0x025F
 784:	70 91 60 02 	lds	r23, 0x0260
 788:	42 0f       	add	r20, r18
 78a:	51 1d       	adc	r21, r1
 78c:	61 1d       	adc	r22, r1
 78e:	71 1d       	adc	r23, r1
 790:	40 93 5d 02 	sts	0x025D, r20
 794:	50 93 5e 02 	sts	0x025E, r21
 798:	60 93 5f 02 	sts	0x025F, r22
 79c:	70 93 60 02 	sts	0x0260, r23
				   f++;
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	90 93 45 02 	sts	0x0245, r25
 7a6:	80 93 44 02 	sts	0x0244, r24
 7aa:	1e c0       	rjmp	.+60     	; 0x7e8 <Big_Packet+0x104>
			   }
			   else
			   {
				   Att_Avg = Temp1/2;
 7ac:	60 91 5d 02 	lds	r22, 0x025D
 7b0:	70 91 5e 02 	lds	r23, 0x025E
 7b4:	80 91 5f 02 	lds	r24, 0x025F
 7b8:	90 91 60 02 	lds	r25, 0x0260
 7bc:	22 e0       	ldi	r18, 0x02	; 2
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	0e 94 33 04 	call	0x866	; 0x866 <__divmodsi4>
 7c8:	20 93 48 02 	sts	0x0248, r18
				   checkData();
 7cc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <checkData>
				   f=0;
 7d0:	10 92 45 02 	sts	0x0245, r1
 7d4:	10 92 44 02 	sts	0x0244, r1
				   Temp1=0;
 7d8:	10 92 5d 02 	sts	0x025D, r1
 7dc:	10 92 5e 02 	sts	0x025E, r1
 7e0:	10 92 5f 02 	sts	0x025F, r1
 7e4:	10 92 60 02 	sts	0x0260, r1
			   }
		   }
		       Poorquality = payloadDataB[1];  //check for zero poor quality signal level
 7e8:	80 91 19 02 	lds	r24, 0x0219
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	90 93 4e 02 	sts	0x024E, r25
 7f2:	80 93 4d 02 	sts	0x024D, r24
		       if (Poorquality==0 )
 7f6:	00 97       	sbiw	r24, 0x00	; 0
 7f8:	39 f4       	brne	.+14     	; 0x808 <Big_Packet+0x124>
		       {
			       Eye_Enable = 1;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	90 93 15 02 	sts	0x0215, r25
 802:	80 93 14 02 	sts	0x0214, r24
 806:	04 c0       	rjmp	.+8      	; 0x810 <Big_Packet+0x12c>
		       }
		       else
		       {
			       Eye_Enable = 0;
 808:	10 92 15 02 	sts	0x0215, r1
 80c:	10 92 14 02 	sts	0x0214, r1
		       }
	  }
  }
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	1f 91       	pop	r17
 816:	0f 91       	pop	r16
 818:	08 95       	ret

0000081a <init_devices>:
   }

 }
void init_devices(void)
{
	cli(); //Clears the global interrupts
 81a:	f8 94       	cli
	port_init();  //Initializes all the ports
 81c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <port_init>
	uart1_init(); //Initialize UART1 for serial communication
 820:	0e 94 b1 01 	call	0x362	; 0x362 <uart1_init>
	timer5_init();
 824:	0e 94 96 01 	call	0x32c	; 0x32c <timer5_init>
	sei();   //Enables the global interrupts
 828:	78 94       	sei
}
 82a:	08 95       	ret

0000082c <main>:
 void main(void)                     // Main Function
 {
	 init_devices();
 82c:	0e 94 0d 04 	call	0x81a	; 0x81a <init_devices>
	 int j=0;
	 while (1)
	 {

	 if(USART1_RX_vect() == 170)        // AA 1 st Sync data
 830:	0e 94 c5 01 	call	0x38a	; 0x38a <__vector_36>
 834:	8a 3a       	cpi	r24, 0xAA	; 170
 836:	e1 f7       	brne	.-8      	; 0x830 <main+0x4>
	 {
		 if(USART1_RX_vect() == 170)      // AA 2 st Sync data
 838:	0e 94 c5 01 	call	0x38a	; 0x38a <__vector_36>
 83c:	8a 3a       	cpi	r24, 0xAA	; 170
 83e:	c1 f7       	brne	.-16     	; 0x830 <main+0x4>
		 {
			 Plength = USART1_RX_vect();
 840:	0e 94 c5 01 	call	0x38a	; 0x38a <__vector_36>
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	90 93 43 02 	sts	0x0243, r25
 84a:	80 93 42 02 	sts	0x0242, r24
			 if(Plength == 4)   // Small Packet
 84e:	84 30       	cpi	r24, 0x04	; 4
 850:	91 05       	cpc	r25, r1
 852:	19 f4       	brne	.+6      	; 0x85a <main+0x2e>
			 {

				 Small_Packet ();
 854:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Small_Packet>
 858:	eb cf       	rjmp	.-42     	; 0x830 <main+0x4>
			 }
			 else if(Plength == 32)   // Big Packet
 85a:	80 32       	cpi	r24, 0x20	; 32
 85c:	91 05       	cpc	r25, r1
 85e:	41 f7       	brne	.-48     	; 0x830 <main+0x4>
			 {
				 Big_Packet ();
 860:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Big_Packet>
 864:	e5 cf       	rjmp	.-54     	; 0x830 <main+0x4>

00000866 <__divmodsi4>:
 866:	97 fb       	bst	r25, 7
 868:	09 2e       	mov	r0, r25
 86a:	05 26       	eor	r0, r21
 86c:	0e d0       	rcall	.+28     	; 0x88a <__divmodsi4_neg1>
 86e:	57 fd       	sbrc	r21, 7
 870:	04 d0       	rcall	.+8      	; 0x87a <__divmodsi4_neg2>
 872:	14 d0       	rcall	.+40     	; 0x89c <__udivmodsi4>
 874:	0a d0       	rcall	.+20     	; 0x88a <__divmodsi4_neg1>
 876:	00 1c       	adc	r0, r0
 878:	38 f4       	brcc	.+14     	; 0x888 <__divmodsi4_exit>

0000087a <__divmodsi4_neg2>:
 87a:	50 95       	com	r21
 87c:	40 95       	com	r20
 87e:	30 95       	com	r19
 880:	21 95       	neg	r18
 882:	3f 4f       	sbci	r19, 0xFF	; 255
 884:	4f 4f       	sbci	r20, 0xFF	; 255
 886:	5f 4f       	sbci	r21, 0xFF	; 255

00000888 <__divmodsi4_exit>:
 888:	08 95       	ret

0000088a <__divmodsi4_neg1>:
 88a:	f6 f7       	brtc	.-4      	; 0x888 <__divmodsi4_exit>
 88c:	90 95       	com	r25
 88e:	80 95       	com	r24
 890:	70 95       	com	r23
 892:	61 95       	neg	r22
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	8f 4f       	sbci	r24, 0xFF	; 255
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	08 95       	ret

0000089c <__udivmodsi4>:
 89c:	a1 e2       	ldi	r26, 0x21	; 33
 89e:	1a 2e       	mov	r1, r26
 8a0:	aa 1b       	sub	r26, r26
 8a2:	bb 1b       	sub	r27, r27
 8a4:	fd 01       	movw	r30, r26
 8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <__udivmodsi4_ep>

000008a8 <__udivmodsi4_loop>:
 8a8:	aa 1f       	adc	r26, r26
 8aa:	bb 1f       	adc	r27, r27
 8ac:	ee 1f       	adc	r30, r30
 8ae:	ff 1f       	adc	r31, r31
 8b0:	a2 17       	cp	r26, r18
 8b2:	b3 07       	cpc	r27, r19
 8b4:	e4 07       	cpc	r30, r20
 8b6:	f5 07       	cpc	r31, r21
 8b8:	20 f0       	brcs	.+8      	; 0x8c2 <__udivmodsi4_ep>
 8ba:	a2 1b       	sub	r26, r18
 8bc:	b3 0b       	sbc	r27, r19
 8be:	e4 0b       	sbc	r30, r20
 8c0:	f5 0b       	sbc	r31, r21

000008c2 <__udivmodsi4_ep>:
 8c2:	66 1f       	adc	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	88 1f       	adc	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	1a 94       	dec	r1
 8cc:	69 f7       	brne	.-38     	; 0x8a8 <__udivmodsi4_loop>
 8ce:	60 95       	com	r22
 8d0:	70 95       	com	r23
 8d2:	80 95       	com	r24
 8d4:	90 95       	com	r25
 8d6:	9b 01       	movw	r18, r22
 8d8:	ac 01       	movw	r20, r24
 8da:	bd 01       	movw	r22, r26
 8dc:	cf 01       	movw	r24, r30
 8de:	08 95       	ret

000008e0 <_exit>:
 8e0:	f8 94       	cli

000008e2 <__stop_program>:
 8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <__stop_program>
