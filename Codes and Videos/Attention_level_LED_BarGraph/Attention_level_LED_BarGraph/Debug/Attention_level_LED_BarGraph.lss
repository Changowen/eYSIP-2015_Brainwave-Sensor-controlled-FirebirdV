
Attention_level_LED_BarGraph.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000030  00800200  00800200  000005e2  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000d50  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000742  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000188  00000000  00000000  00001552  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048b  00000000  00000000  000016da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bf  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bd  00000000  00000000  00001e9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 33       	cpi	r26, 0x30	; 48
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
 122:	0c 94 b5 02 	jmp	0x56a	; 0x56a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED_bargraph_config>:
unsigned int f,k=0;
long Temp1;

//Configuration of LED Bar graph
void LED_bargraph_config (void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	DDRJ = 0xFF;  //PORT J is configured as output
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
	PORTJ = 0x00; //Output is set to 0
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	fc 01       	movw	r30, r24
 142:	10 82       	st	Z, r1
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <buzzer_pin_config>:
//Configuration of Buzzer
void buzzer_pin_config (void)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 152:	87 e2       	ldi	r24, 0x27	; 39
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	27 e2       	ldi	r18, 0x27	; 39
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	f9 01       	movw	r30, r18
 15c:	20 81       	ld	r18, Z
 15e:	28 60       	ori	r18, 0x08	; 8
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
	PORTC = PORTC & 0xF7;   //Setting PORTC 3 logic low to turnoff buzzer
 164:	88 e2       	ldi	r24, 0x28	; 40
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	28 e2       	ldi	r18, 0x28	; 40
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	27 7f       	andi	r18, 0xF7	; 247
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <buzzer_on>:
//Buzzer On
void buzzer_on (void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	0f 92       	push	r0
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
 186:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
 188:	86 e2       	ldi	r24, 0x26	; 38
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	80 81       	ld	r24, Z
 190:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | 0x08;
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	88 60       	ori	r24, 0x08	; 8
 196:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	29 81       	ldd	r18, Y+1	; 0x01
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
}
 1a2:	0f 90       	pop	r0
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <buzzer_off>:
//Buzzer Off
void buzzer_off (void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	0f 92       	push	r0
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
 1b4:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
 1b6:	86 e2       	ldi	r24, 0x26	; 38
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	80 81       	ld	r24, Z
 1be:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	87 7f       	andi	r24, 0xF7	; 247
 1c4:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	29 81       	ldd	r18, Y+1	; 0x01
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
}
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <uart1_init>:
//Configuration of UART1 for receiving data packets via bluetooth from EEG sensor
void uart1_init(void)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
	UCSR1B = 0x00; //disable while setting baud rate
 1e0:	89 ec       	ldi	r24, 0xC9	; 201
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	10 82       	st	Z, r1
	UCSR1A = 0x00;
 1e8:	88 ec       	ldi	r24, 0xC8	; 200
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	10 82       	st	Z, r1
	UCSR1C = 0x06;
 1f0:	8a ec       	ldi	r24, 0xCA	; 202
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	26 e0       	ldi	r18, 0x06	; 6
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
	UBRR1L = 0x5F; //set baud rate lo
 1fa:	8c ec       	ldi	r24, 0xCC	; 204
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	2f e5       	ldi	r18, 0x5F	; 95
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
	UBRR1H = 0x00; //set baud rate hi
 204:	8d ec       	ldi	r24, 0xCD	; 205
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	10 82       	st	Z, r1
	UCSR1B = 0xD8;
 20c:	89 ec       	ldi	r24, 0xC9	; 201
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	28 ed       	ldi	r18, 0xD8	; 216
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <__vector_36>:
// Receives data packets and store them in the buffer
char USART1_RX_vect()
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR1A & (1<<RXC1)));
 224:	00 00       	nop
 226:	88 ec       	ldi	r24, 0xC8	; 200
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	80 81       	ld	r24, Z
 22e:	88 23       	and	r24, r24
 230:	d4 f7       	brge	.-12     	; 0x226 <__vector_36+0xa>
	return UDR1;
 232:	8e ec       	ldi	r24, 0xCE	; 206
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <port_init>:
//Initialization of buzzer and LED bargraph 
void port_init()
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
	buzzer_pin_config();
 248:	0e 94 a5 00 	call	0x14a	; 0x14a <buzzer_pin_config>
	LED_bargraph_config();
 24c:	0e 94 95 00 	call	0x12a	; 0x12a <LED_bargraph_config>
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <checkData>:
//function for detecting various levels of attention 
void checkData(){
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
	if(Att_Avg>=1 && Att_Avg<=10){  //Mind wandering level
 25e:	80 91 2b 02 	lds	r24, 0x022B
 262:	88 23       	and	r24, r24
 264:	51 f0       	breq	.+20     	; 0x27a <checkData+0x24>
 266:	80 91 2b 02 	lds	r24, 0x022B
 26a:	8b 30       	cpi	r24, 0x0B	; 11
 26c:	30 f4       	brcc	.+12     	; 0x27a <checkData+0x24>
		PORTJ=0X01;
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
 278:	61 c0       	rjmp	.+194    	; 0x33c <checkData+0xe6>
	}
	else if(Att_Avg>10 && Att_Avg<=30){  //poor attention level
 27a:	80 91 2b 02 	lds	r24, 0x022B
 27e:	8b 30       	cpi	r24, 0x0B	; 11
 280:	50 f0       	brcs	.+20     	; 0x296 <checkData+0x40>
 282:	80 91 2b 02 	lds	r24, 0x022B
 286:	8f 31       	cpi	r24, 0x1F	; 31
 288:	30 f4       	brcc	.+12     	; 0x296 <checkData+0x40>
		PORTJ=0x03;
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	23 e0       	ldi	r18, 0x03	; 3
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
 294:	53 c0       	rjmp	.+166    	; 0x33c <checkData+0xe6>
	}
	else if(Att_Avg>30 && Att_Avg<=40){ //Attention level building up
 296:	80 91 2b 02 	lds	r24, 0x022B
 29a:	8f 31       	cpi	r24, 0x1F	; 31
 29c:	50 f0       	brcs	.+20     	; 0x2b2 <checkData+0x5c>
 29e:	80 91 2b 02 	lds	r24, 0x022B
 2a2:	89 32       	cpi	r24, 0x29	; 41
 2a4:	30 f4       	brcc	.+12     	; 0x2b2 <checkData+0x5c>
		PORTJ=0X07;
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	27 e0       	ldi	r18, 0x07	; 7
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
 2b0:	45 c0       	rjmp	.+138    	; 0x33c <checkData+0xe6>
	}
	else if(Att_Avg>40 && Att_Avg<=50){  //neutral
 2b2:	80 91 2b 02 	lds	r24, 0x022B
 2b6:	89 32       	cpi	r24, 0x29	; 41
 2b8:	50 f0       	brcs	.+20     	; 0x2ce <checkData+0x78>
 2ba:	80 91 2b 02 	lds	r24, 0x022B
 2be:	83 33       	cpi	r24, 0x33	; 51
 2c0:	30 f4       	brcc	.+12     	; 0x2ce <checkData+0x78>
		PORTJ=0X0F;
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	2f e0       	ldi	r18, 0x0F	; 15
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
 2cc:	37 c0       	rjmp	.+110    	; 0x33c <checkData+0xe6>
	}
	else if(Att_Avg>50 && Att_Avg<=60){  //neutral
 2ce:	80 91 2b 02 	lds	r24, 0x022B
 2d2:	83 33       	cpi	r24, 0x33	; 51
 2d4:	50 f0       	brcs	.+20     	; 0x2ea <checkData+0x94>
 2d6:	80 91 2b 02 	lds	r24, 0x022B
 2da:	8d 33       	cpi	r24, 0x3D	; 61
 2dc:	30 f4       	brcc	.+12     	; 0x2ea <checkData+0x94>
		PORTJ=0X1F;
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	2f e1       	ldi	r18, 0x1F	; 31
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
 2e8:	29 c0       	rjmp	.+82     	; 0x33c <checkData+0xe6>
	}
	else if(Att_Avg>60 && Att_Avg<=70){  //Slightly elevated
 2ea:	80 91 2b 02 	lds	r24, 0x022B
 2ee:	8d 33       	cpi	r24, 0x3D	; 61
 2f0:	50 f0       	brcs	.+20     	; 0x306 <checkData+0xb0>
 2f2:	80 91 2b 02 	lds	r24, 0x022B
 2f6:	87 34       	cpi	r24, 0x47	; 71
 2f8:	30 f4       	brcc	.+12     	; 0x306 <checkData+0xb0>
		PORTJ=0X3F;
 2fa:	85 e0       	ldi	r24, 0x05	; 5
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	2f e3       	ldi	r18, 0x3F	; 63
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
 304:	1b c0       	rjmp	.+54     	; 0x33c <checkData+0xe6>
	}
	else if(Att_Avg>70 && Att_Avg<=80){  //Slightly elevated
 306:	80 91 2b 02 	lds	r24, 0x022B
 30a:	87 34       	cpi	r24, 0x47	; 71
 30c:	50 f0       	brcs	.+20     	; 0x322 <checkData+0xcc>
 30e:	80 91 2b 02 	lds	r24, 0x022B
 312:	81 35       	cpi	r24, 0x51	; 81
 314:	30 f4       	brcc	.+12     	; 0x322 <checkData+0xcc>
		PORTJ=0X7F;
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	2f e7       	ldi	r18, 0x7F	; 127
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
 320:	0d c0       	rjmp	.+26     	; 0x33c <checkData+0xe6>
	}
	else if(Att_Avg>80 && Att_Avg<=100){  //elevated
 322:	80 91 2b 02 	lds	r24, 0x022B
 326:	81 35       	cpi	r24, 0x51	; 81
 328:	48 f0       	brcs	.+18     	; 0x33c <checkData+0xe6>
 32a:	80 91 2b 02 	lds	r24, 0x022B
 32e:	85 36       	cpi	r24, 0x65	; 101
 330:	28 f4       	brcc	.+10     	; 0x33c <checkData+0xe6>
		PORTJ=0xFF;
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
	}
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <Big_Packet>:


void Big_Packet()
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	0f 92       	push	r0
 348:	0f 92       	push	r0
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
	generatedchecksum = 0;
 34e:	10 92 24 02 	sts	0x0224, r1
	for(int i = 0; i < Plength; i++)
 352:	1a 82       	std	Y+2, r1	; 0x02
 354:	19 82       	std	Y+1, r1	; 0x01
 356:	19 c0       	rjmp	.+50     	; 0x38a <Big_Packet+0x48>
	{
		payloadDataB[i]     = USART1_RX_vect();      //Read payload into memory
 358:	0e 94 0e 01 	call	0x21c	; 0x21c <__vector_36>
 35c:	28 2f       	mov	r18, r24
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	9a 81       	ldd	r25, Y+2	; 0x02
 362:	8d 5f       	subi	r24, 0xFD	; 253
 364:	9d 4f       	sbci	r25, 0xFD	; 253
 366:	fc 01       	movw	r30, r24
 368:	20 83       	st	Z, r18
		generatedchecksum  += payloadDataB[i] ;
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	9a 81       	ldd	r25, Y+2	; 0x02
 36e:	8d 5f       	subi	r24, 0xFD	; 253
 370:	9d 4f       	sbci	r25, 0xFD	; 253
 372:	fc 01       	movw	r30, r24
 374:	90 81       	ld	r25, Z
 376:	80 91 24 02 	lds	r24, 0x0224
 37a:	89 0f       	add	r24, r25
 37c:	80 93 24 02 	sts	0x0224, r24


void Big_Packet()
{
	generatedchecksum = 0;
	for(int i = 0; i < Plength; i++)
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	9a 83       	std	Y+2, r25	; 0x02
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	29 81       	ldd	r18, Y+1	; 0x01
 38c:	3a 81       	ldd	r19, Y+2	; 0x02
 38e:	80 91 27 02 	lds	r24, 0x0227
 392:	90 91 28 02 	lds	r25, 0x0228
 396:	28 17       	cp	r18, r24
 398:	39 07       	cpc	r19, r25
 39a:	f0 f2       	brcs	.-68     	; 0x358 <Big_Packet+0x16>
	{
		payloadDataB[i]     = USART1_RX_vect();      //Read payload into memory
		generatedchecksum  += payloadDataB[i] ;
	}
	generatedchecksum = 255 - generatedchecksum;
 39c:	80 91 24 02 	lds	r24, 0x0224
 3a0:	80 95       	com	r24
 3a2:	80 93 24 02 	sts	0x0224, r24
	checksum  = USART1_RX_vect();
 3a6:	0e 94 0e 01 	call	0x21c	; 0x21c <__vector_36>
 3aa:	80 93 23 02 	sts	0x0223, r24
	
	if(checksum == generatedchecksum)        // Verify Checksum
 3ae:	90 91 23 02 	lds	r25, 0x0223
 3b2:	80 91 24 02 	lds	r24, 0x0224
 3b6:	98 17       	cp	r25, r24
 3b8:	09 f0       	breq	.+2      	; 0x3bc <Big_Packet+0x7a>
 3ba:	62 c0       	rjmp	.+196    	; 0x480 <Big_Packet+0x13e>
	{
		if (payloadDataB[28]==4) //Checking for attention level 
 3bc:	80 91 1f 02 	lds	r24, 0x021F
 3c0:	84 30       	cpi	r24, 0x04	; 4
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <Big_Packet+0x84>
 3c4:	5d c0       	rjmp	.+186    	; 0x480 <Big_Packet+0x13e>
		{
			if (f<2)
 3c6:	80 91 29 02 	lds	r24, 0x0229
 3ca:	90 91 2a 02 	lds	r25, 0x022A
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	91 05       	cpc	r25, r1
 3d2:	a0 f5       	brcc	.+104    	; 0x43c <Big_Packet+0xfa>
			{
				attention [k] = payloadDataB[29];  //Attention level indication
 3d4:	80 91 25 02 	lds	r24, 0x0225
 3d8:	90 91 26 02 	lds	r25, 0x0226
 3dc:	20 91 20 02 	lds	r18, 0x0220
 3e0:	80 50       	subi	r24, 0x00	; 0
 3e2:	9e 4f       	sbci	r25, 0xFE	; 254
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
				Temp1 += attention [k];
 3e8:	80 91 25 02 	lds	r24, 0x0225
 3ec:	90 91 26 02 	lds	r25, 0x0226
 3f0:	80 50       	subi	r24, 0x00	; 0
 3f2:	9e 4f       	sbci	r25, 0xFE	; 254
 3f4:	fc 01       	movw	r30, r24
 3f6:	80 81       	ld	r24, Z
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	80 91 2c 02 	lds	r24, 0x022C
 404:	90 91 2d 02 	lds	r25, 0x022D
 408:	a0 91 2e 02 	lds	r26, 0x022E
 40c:	b0 91 2f 02 	lds	r27, 0x022F
 410:	82 0f       	add	r24, r18
 412:	93 1f       	adc	r25, r19
 414:	a4 1f       	adc	r26, r20
 416:	b5 1f       	adc	r27, r21
 418:	80 93 2c 02 	sts	0x022C, r24
 41c:	90 93 2d 02 	sts	0x022D, r25
 420:	a0 93 2e 02 	sts	0x022E, r26
 424:	b0 93 2f 02 	sts	0x022F, r27
				f++;
 428:	80 91 29 02 	lds	r24, 0x0229
 42c:	90 91 2a 02 	lds	r25, 0x022A
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	90 93 2a 02 	sts	0x022A, r25
 436:	80 93 29 02 	sts	0x0229, r24
 43a:	22 c0       	rjmp	.+68     	; 0x480 <Big_Packet+0x13e>
			}
			else
			{
				Att_Avg = Temp1/2;
 43c:	80 91 2c 02 	lds	r24, 0x022C
 440:	90 91 2d 02 	lds	r25, 0x022D
 444:	a0 91 2e 02 	lds	r26, 0x022E
 448:	b0 91 2f 02 	lds	r27, 0x022F
 44c:	22 e0       	ldi	r18, 0x02	; 2
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	bc 01       	movw	r22, r24
 456:	cd 01       	movw	r24, r26
 458:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__divmodsi4>
 45c:	da 01       	movw	r26, r20
 45e:	c9 01       	movw	r24, r18
 460:	80 93 2b 02 	sts	0x022B, r24
				checkData();
 464:	0e 94 2b 01 	call	0x256	; 0x256 <checkData>
				f=0;
 468:	10 92 2a 02 	sts	0x022A, r1
 46c:	10 92 29 02 	sts	0x0229, r1
				Temp1=0;
 470:	10 92 2c 02 	sts	0x022C, r1
 474:	10 92 2d 02 	sts	0x022D, r1
 478:	10 92 2e 02 	sts	0x022E, r1
 47c:	10 92 2f 02 	sts	0x022F, r1
			}
		}
	}
}	
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <init_devices>:

void init_devices(void)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupts
 492:	f8 94       	cli
	port_init();  //Initializes all the ports
 494:	0e 94 20 01 	call	0x240	; 0x240 <port_init>
	uart1_init(); //Initialize UART1 for serial communication
 498:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <uart1_init>
	sei();   //Enables the global interrupts
 49c:	78 94       	sei
}
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <main>:


void main(void)                     // Main Function
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	0f 92       	push	r0
 4aa:	0f 92       	push	r0
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 4b0:	0e 94 45 02 	call	0x48a	; 0x48a <init_devices>
	int j=0;
 4b4:	1a 82       	std	Y+2, r1	; 0x02
 4b6:	19 82       	std	Y+1, r1	; 0x01
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <main+0x18>
				{
					Big_Packet ();
				}
			}
		}
	}
 4ba:	00 00       	nop
	init_devices();
	int j=0;
	while (1)
	{
		
		if(USART1_RX_vect() == 170)        // AA 1 st Sync data
 4bc:	0e 94 0e 01 	call	0x21c	; 0x21c <__vector_36>
 4c0:	8a 3a       	cpi	r24, 0xAA	; 170
 4c2:	d9 f7       	brne	.-10     	; 0x4ba <main+0x16>
		{
			if(USART1_RX_vect() == 170)      // AA 2 st Sync data
 4c4:	0e 94 0e 01 	call	0x21c	; 0x21c <__vector_36>
 4c8:	8a 3a       	cpi	r24, 0xAA	; 170
 4ca:	b9 f7       	brne	.-18     	; 0x4ba <main+0x16>
			{
				Plength = USART1_RX_vect();
 4cc:	0e 94 0e 01 	call	0x21c	; 0x21c <__vector_36>
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	90 93 28 02 	sts	0x0228, r25
 4d8:	80 93 27 02 	sts	0x0227, r24
				if(Plength == 32)   // Big Packet
 4dc:	80 91 27 02 	lds	r24, 0x0227
 4e0:	90 91 28 02 	lds	r25, 0x0228
 4e4:	80 32       	cpi	r24, 0x20	; 32
 4e6:	91 05       	cpc	r25, r1
 4e8:	41 f7       	brne	.-48     	; 0x4ba <main+0x16>
				{
					Big_Packet ();
 4ea:	0e 94 a1 01 	call	0x342	; 0x342 <Big_Packet>
				}
			}
		}
	}
 4ee:	e5 cf       	rjmp	.-54     	; 0x4ba <main+0x16>

000004f0 <__divmodsi4>:
 4f0:	97 fb       	bst	r25, 7
 4f2:	09 2e       	mov	r0, r25
 4f4:	05 26       	eor	r0, r21
 4f6:	0e d0       	rcall	.+28     	; 0x514 <__divmodsi4_neg1>
 4f8:	57 fd       	sbrc	r21, 7
 4fa:	04 d0       	rcall	.+8      	; 0x504 <__divmodsi4_neg2>
 4fc:	14 d0       	rcall	.+40     	; 0x526 <__udivmodsi4>
 4fe:	0a d0       	rcall	.+20     	; 0x514 <__divmodsi4_neg1>
 500:	00 1c       	adc	r0, r0
 502:	38 f4       	brcc	.+14     	; 0x512 <__divmodsi4_exit>

00000504 <__divmodsi4_neg2>:
 504:	50 95       	com	r21
 506:	40 95       	com	r20
 508:	30 95       	com	r19
 50a:	21 95       	neg	r18
 50c:	3f 4f       	sbci	r19, 0xFF	; 255
 50e:	4f 4f       	sbci	r20, 0xFF	; 255
 510:	5f 4f       	sbci	r21, 0xFF	; 255

00000512 <__divmodsi4_exit>:
 512:	08 95       	ret

00000514 <__divmodsi4_neg1>:
 514:	f6 f7       	brtc	.-4      	; 0x512 <__divmodsi4_exit>
 516:	90 95       	com	r25
 518:	80 95       	com	r24
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	08 95       	ret

00000526 <__udivmodsi4>:
 526:	a1 e2       	ldi	r26, 0x21	; 33
 528:	1a 2e       	mov	r1, r26
 52a:	aa 1b       	sub	r26, r26
 52c:	bb 1b       	sub	r27, r27
 52e:	fd 01       	movw	r30, r26
 530:	0d c0       	rjmp	.+26     	; 0x54c <__udivmodsi4_ep>

00000532 <__udivmodsi4_loop>:
 532:	aa 1f       	adc	r26, r26
 534:	bb 1f       	adc	r27, r27
 536:	ee 1f       	adc	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	a2 17       	cp	r26, r18
 53c:	b3 07       	cpc	r27, r19
 53e:	e4 07       	cpc	r30, r20
 540:	f5 07       	cpc	r31, r21
 542:	20 f0       	brcs	.+8      	; 0x54c <__udivmodsi4_ep>
 544:	a2 1b       	sub	r26, r18
 546:	b3 0b       	sbc	r27, r19
 548:	e4 0b       	sbc	r30, r20
 54a:	f5 0b       	sbc	r31, r21

0000054c <__udivmodsi4_ep>:
 54c:	66 1f       	adc	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	1a 94       	dec	r1
 556:	69 f7       	brne	.-38     	; 0x532 <__udivmodsi4_loop>
 558:	60 95       	com	r22
 55a:	70 95       	com	r23
 55c:	80 95       	com	r24
 55e:	90 95       	com	r25
 560:	9b 01       	movw	r18, r22
 562:	ac 01       	movw	r20, r24
 564:	bd 01       	movw	r22, r26
 566:	cf 01       	movw	r24, r30
 568:	08 95       	ret

0000056a <_exit>:
 56a:	f8 94       	cli

0000056c <__stop_program>:
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stop_program>
