
Attention_level_LED_BarGraph.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000578  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800200  00800200  000005ec  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000d58  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000565  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000182  00000000  00000000  0000133d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034e  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d9  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002eb  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e7       	ldi	r30, 0x78	; 120
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 b1 02 	call	0x562	; 0x562 <main>
 122:	0c 94 ba 02 	jmp	0x574	; 0x574 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED_bargraph_config>:
volatile unsigned char attention;
volatile unsigned char generatedChecksum;
volatile unsigned char payloaddata[]={0};
volatile unsigned char data_array[]={0};
void LED_bargraph_config (void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	DDRJ = 0xFF;  //PORT J is configured as output
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
	PORTJ = 0x00; //Output is set to 0
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	fc 01       	movw	r30, r24
 142:	10 82       	st	Z, r1
		
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <buzzer_pin_config>:

void buzzer_pin_config (void)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 152:	87 e2       	ldi	r24, 0x27	; 39
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	27 e2       	ldi	r18, 0x27	; 39
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	f9 01       	movw	r30, r18
 15c:	20 81       	ld	r18, Z
 15e:	28 60       	ori	r18, 0x08	; 8
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 164:	88 e2       	ldi	r24, 0x28	; 40
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	28 e2       	ldi	r18, 0x28	; 40
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	27 7f       	andi	r18, 0xF7	; 247
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <motion_pin_config>:

void motion_pin_config (void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	DDRA = DDRA | 0x0F;
 184:	81 e2       	ldi	r24, 0x21	; 33
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	21 e2       	ldi	r18, 0x21	; 33
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	f9 01       	movw	r30, r18
 18e:	20 81       	ld	r18, Z
 190:	2f 60       	ori	r18, 0x0F	; 15
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
	PORTA = PORTA & 0xF0;
 196:	82 e2       	ldi	r24, 0x22	; 34
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	22 e2       	ldi	r18, 0x22	; 34
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	20 7f       	andi	r18, 0xF0	; 240
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	2a e0       	ldi	r18, 0x0A	; 10
 1ae:	31 e0       	ldi	r19, 0x01	; 1
 1b0:	f9 01       	movw	r30, r18
 1b2:	20 81       	ld	r18, Z
 1b4:	28 61       	ori	r18, 0x18	; 24
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 1ba:	8b e0       	ldi	r24, 0x0B	; 11
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	2b e0       	ldi	r18, 0x0B	; 11
 1c0:	31 e0       	ldi	r19, 0x01	; 1
 1c2:	f9 01       	movw	r30, r18
 1c4:	20 81       	ld	r18, Z
 1c6:	28 61       	ori	r18, 0x18	; 24
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <port_init>:

//Function to initialize ports
void port_init()
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
 1da:	0e 94 be 00 	call	0x17c	; 0x17c <motion_pin_config>
	buzzer_pin_config();
 1de:	0e 94 a5 00 	call	0x14a	; 0x14a <buzzer_pin_config>
	LED_bargraph_config();
 1e2:	0e 94 95 00 	call	0x12a	; 0x12a <LED_bargraph_config>
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <buzzer_on>:

void buzzer_on (void)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	0f 92       	push	r0
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
 1f6:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
 1f8:	86 e2       	ldi	r24, 0x26	; 38
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	80 81       	ld	r24, Z
 200:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | 0x08;
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 60       	ori	r24, 0x08	; 8
 206:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	29 81       	ldd	r18, Y+1	; 0x01
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
}
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <buzzer_off>:

void buzzer_off (void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	0f 92       	push	r0
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
 224:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
 226:	86 e2       	ldi	r24, 0x26	; 38
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	80 81       	ld	r24, Z
 22e:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	87 7f       	andi	r24, 0xF7	; 247
 234:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
 236:	88 e2       	ldi	r24, 0x28	; 40
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
}
 240:	0f 90       	pop	r0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <uart1_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart1_init(void)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
	UCSR1B = 0x00; //disable while setting baud rate
 250:	89 ec       	ldi	r24, 0xC9	; 201
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	10 82       	st	Z, r1
	UCSR1A = 0x00;
 258:	88 ec       	ldi	r24, 0xC8	; 200
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	10 82       	st	Z, r1
	UCSR1C = 0x06;
 260:	8a ec       	ldi	r24, 0xCA	; 202
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	26 e0       	ldi	r18, 0x06	; 6
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
	UBRR1L = 0x5F; //set baud rate lo
 26a:	8c ec       	ldi	r24, 0xCC	; 204
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	2f e5       	ldi	r18, 0x5F	; 95
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
	UBRR1H = 0x00; //set baud rate hi
 274:	8d ec       	ldi	r24, 0xCD	; 205
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	10 82       	st	Z, r1
	UCSR1B = 0xD8;
 27c:	89 ec       	ldi	r24, 0xC9	; 201
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	28 ed       	ldi	r18, 0xD8	; 216
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <__vector_36>:

char USART1_RX_vect(){
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR1A & (1<<RXC1)));
 294:	00 00       	nop
 296:	88 ec       	ldi	r24, 0xC8	; 200
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	fc 01       	movw	r30, r24
 29c:	80 81       	ld	r24, Z
 29e:	88 23       	and	r24, r24
 2a0:	d4 f7       	brge	.-12     	; 0x296 <__vector_36+0xa>
	return UDR1;
 2a2:	8e ec       	ldi	r24, 0xCE	; 206
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	fc 01       	movw	r30, r24
 2a8:	80 81       	ld	r24, Z
	
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <checkData>:
void checkData(){
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
	if(payloaddata[i]>=1 && payloaddata[i]<=10){
 2b8:	80 91 03 02 	lds	r24, 0x0203
 2bc:	90 91 04 02 	lds	r25, 0x0204
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	9d 4f       	sbci	r25, 0xFD	; 253
 2c4:	fc 01       	movw	r30, r24
 2c6:	80 81       	ld	r24, Z
 2c8:	88 23       	and	r24, r24
 2ca:	81 f0       	breq	.+32     	; 0x2ec <checkData+0x3c>
 2cc:	80 91 03 02 	lds	r24, 0x0203
 2d0:	90 91 04 02 	lds	r25, 0x0204
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	9d 4f       	sbci	r25, 0xFD	; 253
 2d8:	fc 01       	movw	r30, r24
 2da:	80 81       	ld	r24, Z
 2dc:	8b 30       	cpi	r24, 0x0B	; 11
 2de:	30 f4       	brcc	.+12     	; 0x2ec <checkData+0x3c>
	PORTJ=0X01;}
 2e0:	85 e0       	ldi	r24, 0x05	; 5
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	b5 c0       	rjmp	.+362    	; 0x456 <checkData+0x1a6>
	else if(payloaddata[i]>10 && payloaddata[i]<=30){
 2ec:	80 91 03 02 	lds	r24, 0x0203
 2f0:	90 91 04 02 	lds	r25, 0x0204
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	9d 4f       	sbci	r25, 0xFD	; 253
 2f8:	fc 01       	movw	r30, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	8b 30       	cpi	r24, 0x0B	; 11
 2fe:	80 f0       	brcs	.+32     	; 0x320 <checkData+0x70>
 300:	80 91 03 02 	lds	r24, 0x0203
 304:	90 91 04 02 	lds	r25, 0x0204
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	9d 4f       	sbci	r25, 0xFD	; 253
 30c:	fc 01       	movw	r30, r24
 30e:	80 81       	ld	r24, Z
 310:	8f 31       	cpi	r24, 0x1F	; 31
 312:	30 f4       	brcc	.+12     	; 0x320 <checkData+0x70>
	PORTJ=0x03;}
 314:	85 e0       	ldi	r24, 0x05	; 5
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	23 e0       	ldi	r18, 0x03	; 3
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
 31e:	9b c0       	rjmp	.+310    	; 0x456 <checkData+0x1a6>
	else if(payloaddata[i]>30 && payloaddata[i]<=40){
 320:	80 91 03 02 	lds	r24, 0x0203
 324:	90 91 04 02 	lds	r25, 0x0204
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	9d 4f       	sbci	r25, 0xFD	; 253
 32c:	fc 01       	movw	r30, r24
 32e:	80 81       	ld	r24, Z
 330:	8f 31       	cpi	r24, 0x1F	; 31
 332:	80 f0       	brcs	.+32     	; 0x354 <checkData+0xa4>
 334:	80 91 03 02 	lds	r24, 0x0203
 338:	90 91 04 02 	lds	r25, 0x0204
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	9d 4f       	sbci	r25, 0xFD	; 253
 340:	fc 01       	movw	r30, r24
 342:	80 81       	ld	r24, Z
 344:	89 32       	cpi	r24, 0x29	; 41
 346:	30 f4       	brcc	.+12     	; 0x354 <checkData+0xa4>
	PORTJ=0X07;}
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	27 e0       	ldi	r18, 0x07	; 7
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
 352:	81 c0       	rjmp	.+258    	; 0x456 <checkData+0x1a6>
	else if(payloaddata[i]>40 && payloaddata[i]<=50){
 354:	80 91 03 02 	lds	r24, 0x0203
 358:	90 91 04 02 	lds	r25, 0x0204
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	9d 4f       	sbci	r25, 0xFD	; 253
 360:	fc 01       	movw	r30, r24
 362:	80 81       	ld	r24, Z
 364:	89 32       	cpi	r24, 0x29	; 41
 366:	80 f0       	brcs	.+32     	; 0x388 <checkData+0xd8>
 368:	80 91 03 02 	lds	r24, 0x0203
 36c:	90 91 04 02 	lds	r25, 0x0204
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	9d 4f       	sbci	r25, 0xFD	; 253
 374:	fc 01       	movw	r30, r24
 376:	80 81       	ld	r24, Z
 378:	83 33       	cpi	r24, 0x33	; 51
 37a:	30 f4       	brcc	.+12     	; 0x388 <checkData+0xd8>
	PORTJ=0X0F;}
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	2f e0       	ldi	r18, 0x0F	; 15
 382:	fc 01       	movw	r30, r24
 384:	20 83       	st	Z, r18
 386:	67 c0       	rjmp	.+206    	; 0x456 <checkData+0x1a6>
	else if(payloaddata[i]>50 && payloaddata[i]<=60){
 388:	80 91 03 02 	lds	r24, 0x0203
 38c:	90 91 04 02 	lds	r25, 0x0204
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	9d 4f       	sbci	r25, 0xFD	; 253
 394:	fc 01       	movw	r30, r24
 396:	80 81       	ld	r24, Z
 398:	83 33       	cpi	r24, 0x33	; 51
 39a:	80 f0       	brcs	.+32     	; 0x3bc <checkData+0x10c>
 39c:	80 91 03 02 	lds	r24, 0x0203
 3a0:	90 91 04 02 	lds	r25, 0x0204
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	9d 4f       	sbci	r25, 0xFD	; 253
 3a8:	fc 01       	movw	r30, r24
 3aa:	80 81       	ld	r24, Z
 3ac:	8d 33       	cpi	r24, 0x3D	; 61
 3ae:	30 f4       	brcc	.+12     	; 0x3bc <checkData+0x10c>
	PORTJ=0X1F;}
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	2f e1       	ldi	r18, 0x1F	; 31
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
 3ba:	4d c0       	rjmp	.+154    	; 0x456 <checkData+0x1a6>
	else if(payloaddata[i]>60 && payloaddata[i]<=70){
 3bc:	80 91 03 02 	lds	r24, 0x0203
 3c0:	90 91 04 02 	lds	r25, 0x0204
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	9d 4f       	sbci	r25, 0xFD	; 253
 3c8:	fc 01       	movw	r30, r24
 3ca:	80 81       	ld	r24, Z
 3cc:	8d 33       	cpi	r24, 0x3D	; 61
 3ce:	80 f0       	brcs	.+32     	; 0x3f0 <checkData+0x140>
 3d0:	80 91 03 02 	lds	r24, 0x0203
 3d4:	90 91 04 02 	lds	r25, 0x0204
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	9d 4f       	sbci	r25, 0xFD	; 253
 3dc:	fc 01       	movw	r30, r24
 3de:	80 81       	ld	r24, Z
 3e0:	87 34       	cpi	r24, 0x47	; 71
 3e2:	30 f4       	brcc	.+12     	; 0x3f0 <checkData+0x140>
	PORTJ=0X3F;}
 3e4:	85 e0       	ldi	r24, 0x05	; 5
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	2f e3       	ldi	r18, 0x3F	; 63
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	33 c0       	rjmp	.+102    	; 0x456 <checkData+0x1a6>
	else if(payloaddata[i]>70 && payloaddata[i]<=80){
 3f0:	80 91 03 02 	lds	r24, 0x0203
 3f4:	90 91 04 02 	lds	r25, 0x0204
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	9d 4f       	sbci	r25, 0xFD	; 253
 3fc:	fc 01       	movw	r30, r24
 3fe:	80 81       	ld	r24, Z
 400:	87 34       	cpi	r24, 0x47	; 71
 402:	80 f0       	brcs	.+32     	; 0x424 <checkData+0x174>
 404:	80 91 03 02 	lds	r24, 0x0203
 408:	90 91 04 02 	lds	r25, 0x0204
 40c:	8f 5f       	subi	r24, 0xFF	; 255
 40e:	9d 4f       	sbci	r25, 0xFD	; 253
 410:	fc 01       	movw	r30, r24
 412:	80 81       	ld	r24, Z
 414:	81 35       	cpi	r24, 0x51	; 81
 416:	30 f4       	brcc	.+12     	; 0x424 <checkData+0x174>
	PORTJ=0X7F;}
 418:	85 e0       	ldi	r24, 0x05	; 5
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	2f e7       	ldi	r18, 0x7F	; 127
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18
 422:	19 c0       	rjmp	.+50     	; 0x456 <checkData+0x1a6>
	else if(payloaddata[i]>80 && payloaddata[i]<=100){
 424:	80 91 03 02 	lds	r24, 0x0203
 428:	90 91 04 02 	lds	r25, 0x0204
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	9d 4f       	sbci	r25, 0xFD	; 253
 430:	fc 01       	movw	r30, r24
 432:	80 81       	ld	r24, Z
 434:	81 35       	cpi	r24, 0x51	; 81
 436:	78 f0       	brcs	.+30     	; 0x456 <checkData+0x1a6>
 438:	80 91 03 02 	lds	r24, 0x0203
 43c:	90 91 04 02 	lds	r25, 0x0204
 440:	8f 5f       	subi	r24, 0xFF	; 255
 442:	9d 4f       	sbci	r25, 0xFD	; 253
 444:	fc 01       	movw	r30, r24
 446:	80 81       	ld	r24, Z
 448:	85 36       	cpi	r24, 0x65	; 101
 44a:	28 f4       	brcc	.+10     	; 0x456 <checkData+0x1a6>
	PORTJ=0xFF;}
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	2f ef       	ldi	r18, 0xFF	; 255
 452:	fc 01       	movw	r30, r24
 454:	20 83       	st	Z, r18
	
}
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <detect>:


void detect(){	
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	00 d0       	rcall	.+0      	; 0x462 <detect+0x6>
 462:	0f 92       	push	r0
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
if(USART1_RX_vect()==0xAA){ //check SYNC byte 1
 468:	0e 94 46 01 	call	0x28c	; 0x28c <__vector_36>
 46c:	8a 3a       	cpi	r24, 0xAA	; 170
 46e:	09 f0       	breq	.+2      	; 0x472 <detect+0x16>
 470:	64 c0       	rjmp	.+200    	; 0x53a <detect+0xde>
if(USART1_RX_vect()==0xAA){ //check SYNC byte 2
 472:	0e 94 46 01 	call	0x28c	; 0x28c <__vector_36>
 476:	8a 3a       	cpi	r24, 0xAA	; 170
 478:	09 f0       	breq	.+2      	; 0x47c <detect+0x20>
 47a:	5f c0       	rjmp	.+190    	; 0x53a <detect+0xde>
	payloadlength=USART1_RX_vect();
 47c:	0e 94 46 01 	call	0x28c	; 0x28c <__vector_36>
 480:	80 93 05 02 	sts	0x0205, r24
	      if(payloadlength < 169) {                     //Payload length can not be greater than 169
 484:	80 91 05 02 	lds	r24, 0x0205
 488:	89 3a       	cpi	r24, 0xA9	; 169
 48a:	08 f0       	brcs	.+2      	; 0x48e <detect+0x32>
 48c:	56 c0       	rjmp	.+172    	; 0x53a <detect+0xde>
      generatedChecksum = 0;
 48e:	10 92 08 02 	sts	0x0208, r1
      for(int i = 0; i < payloadlength; i++) {
 492:	1a 82       	std	Y+2, r1	; 0x02
 494:	19 82       	std	Y+1, r1	; 0x01
 496:	19 c0       	rjmp	.+50     	; 0x4ca <detect+0x6e>
	      payloaddata[i] = USART1_RX_vect();            //Read payload into memory
 498:	0e 94 46 01 	call	0x28c	; 0x28c <__vector_36>
 49c:	28 2f       	mov	r18, r24
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	9a 81       	ldd	r25, Y+2	; 0x02
 4a2:	8f 5f       	subi	r24, 0xFF	; 255
 4a4:	9d 4f       	sbci	r25, 0xFD	; 253
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
	      generatedChecksum += payloaddata[i];
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	9d 4f       	sbci	r25, 0xFD	; 253
 4b2:	fc 01       	movw	r30, r24
 4b4:	90 81       	ld	r25, Z
 4b6:	80 91 08 02 	lds	r24, 0x0208
 4ba:	89 0f       	add	r24, r25
 4bc:	80 93 08 02 	sts	0x0208, r24
if(USART1_RX_vect()==0xAA){ //check SYNC byte 1
if(USART1_RX_vect()==0xAA){ //check SYNC byte 2
	payloadlength=USART1_RX_vect();
	      if(payloadlength < 169) {                     //Payload length can not be greater than 169
      generatedChecksum = 0;
      for(int i = 0; i < payloadlength; i++) {
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	9a 83       	std	Y+2, r25	; 0x02
 4c8:	89 83       	std	Y+1, r24	; 0x01
 4ca:	80 91 05 02 	lds	r24, 0x0205
 4ce:	28 2f       	mov	r18, r24
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	9a 81       	ldd	r25, Y+2	; 0x02
 4d6:	82 17       	cp	r24, r18
 4d8:	93 07       	cpc	r25, r19
 4da:	f4 f2       	brlt	.-68     	; 0x498 <detect+0x3c>
	      payloaddata[i] = USART1_RX_vect();            //Read payload into memory
	      generatedChecksum += payloaddata[i];
      }
	checksum = USART1_RX_vect();                      //Read checksum byte from stream
 4dc:	0e 94 46 01 	call	0x28c	; 0x28c <__vector_36>
 4e0:	80 93 09 02 	sts	0x0209, r24
	generatedChecksum = 255 - generatedChecksum;
 4e4:	80 91 08 02 	lds	r24, 0x0208
 4e8:	80 95       	com	r24
 4ea:	80 93 08 02 	sts	0x0208, r24
	
	        if(checksum == generatedChecksum) {
 4ee:	90 91 09 02 	lds	r25, 0x0209
 4f2:	80 91 08 02 	lds	r24, 0x0208
 4f6:	98 17       	cp	r25, r24
 4f8:	01 f5       	brne	.+64     	; 0x53a <detect+0xde>
		        for(int i = 0; i < payloadlength; i++) {    // Parse the payload
 4fa:	1c 82       	std	Y+4, r1	; 0x04
 4fc:	1b 82       	std	Y+3, r1	; 0x03
 4fe:	14 c0       	rjmp	.+40     	; 0x528 <detect+0xcc>
			        if (payloaddata[i]==0x04){ //check attention level and display
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	9c 81       	ldd	r25, Y+4	; 0x04
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	9d 4f       	sbci	r25, 0xFD	; 253
 508:	fc 01       	movw	r30, r24
 50a:	80 81       	ld	r24, Z
 50c:	84 30       	cpi	r24, 0x04	; 4
 50e:	39 f4       	brne	.+14     	; 0x51e <detect+0xc2>
			        i++;
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	9c 81       	ldd	r25, Y+4	; 0x04
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	9c 83       	std	Y+4, r25	; 0x04
 518:	8b 83       	std	Y+3, r24	; 0x03
			        checkData();
 51a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <checkData>
      }
	checksum = USART1_RX_vect();                      //Read checksum byte from stream
	generatedChecksum = 255 - generatedChecksum;
	
	        if(checksum == generatedChecksum) {
		        for(int i = 0; i < payloadlength; i++) {    // Parse the payload
 51e:	8b 81       	ldd	r24, Y+3	; 0x03
 520:	9c 81       	ldd	r25, Y+4	; 0x04
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	9c 83       	std	Y+4, r25	; 0x04
 526:	8b 83       	std	Y+3, r24	; 0x03
 528:	80 91 05 02 	lds	r24, 0x0205
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	9c 81       	ldd	r25, Y+4	; 0x04
 534:	82 17       	cp	r24, r18
 536:	93 07       	cpc	r25, r19
 538:	1c f3       	brlt	.-58     	; 0x500 <detect+0xa4>
					}
				}												        
				}	
}	
}
} 
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <init_devices>:
//Function To Initialize all The Devices
void init_devices(void)
{
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupts
 550:	f8 94       	cli
	port_init();  //Initializes all the ports
 552:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <port_init>
	uart1_init(); //Initailize UART1 for serial communiaction
 556:	0e 94 24 01 	call	0x248	; 0x248 <uart1_init>
	sei();   //Enables the global interrupts
 55a:	78 94       	sei
}
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <main>:

//Main Function
int main(void)
{
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 56a:	0e 94 a4 02 	call	0x548	; 0x548 <init_devices>
	while(1){
		detect();
 56e:	0e 94 2e 02 	call	0x45c	; 0x45c <detect>
	}
 572:	fd cf       	rjmp	.-6      	; 0x56e <main+0xc>

00000574 <_exit>:
 574:	f8 94       	cli

00000576 <__stop_program>:
 576:	ff cf       	rjmp	.-2      	; 0x576 <__stop_program>
