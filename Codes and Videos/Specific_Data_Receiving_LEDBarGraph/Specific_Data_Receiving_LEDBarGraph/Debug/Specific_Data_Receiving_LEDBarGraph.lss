
Specific_Data_Receiving_LEDBarGraph.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b76  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800200  00800200  00000bea  2**0
                  ALLOC
  2 .stab         00001650  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000057e  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000027c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bd  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a2  00000000  00000000  00002efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000457  00000000  00000000  0000309f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  000034f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b0  00000000  00000000  00003674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002be  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e7       	ldi	r30, 0x76	; 118
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 30       	cpi	r26, 0x03	; 3
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 a4 04 	call	0x948	; 0x948 <main>
 122:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED_bargraph_config>:
#include<util/delay.h>
int i;
volatile unsigned char data=0;             //to take data
//Led configuration
void LED_bargraph_config (void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	DDRJ = 0xFF;  //PORT J is configured as output
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
	PORTJ = 0x00; //Output is set to 0
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	fc 01       	movw	r30, r24
 142:	10 82       	st	Z, r1
	
	//LCD
	DDRC = DDRC | 0xF7;
 144:	87 e2       	ldi	r24, 0x27	; 39
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	27 e2       	ldi	r18, 0x27	; 39
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	27 6f       	ori	r18, 0xF7	; 247
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	PORTC = PORTC & 0x80;
 156:	88 e2       	ldi	r24, 0x28	; 40
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	28 e2       	ldi	r18, 0x28	; 40
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	20 78       	andi	r18, 0x80	; 128
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <buzzer_pin_config>:
//Pin configuration
void buzzer_pin_config (void)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 176:	87 e2       	ldi	r24, 0x27	; 39
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	27 e2       	ldi	r18, 0x27	; 39
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	20 81       	ld	r18, Z
 182:	28 60       	ori	r18, 0x08	; 8
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	28 e2       	ldi	r18, 0x28	; 40
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	27 7f       	andi	r18, 0xF7	; 247
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <motion_pin_config>:
//Motion configuration
void motion_pin_config (void)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
	DDRA = DDRA | 0x0F;
 1a8:	81 e2       	ldi	r24, 0x21	; 33
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	21 e2       	ldi	r18, 0x21	; 33
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	f9 01       	movw	r30, r18
 1b2:	20 81       	ld	r18, Z
 1b4:	2f 60       	ori	r18, 0x0F	; 15
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
	PORTA = PORTA & 0xF0;
 1ba:	82 e2       	ldi	r24, 0x22	; 34
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	22 e2       	ldi	r18, 0x22	; 34
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	20 81       	ld	r18, Z
 1c6:	20 7f       	andi	r18, 0xF0	; 240
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	2a e0       	ldi	r18, 0x0A	; 10
 1d2:	31 e0       	ldi	r19, 0x01	; 1
 1d4:	f9 01       	movw	r30, r18
 1d6:	20 81       	ld	r18, Z
 1d8:	28 61       	ori	r18, 0x18	; 24
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	2b e0       	ldi	r18, 0x0B	; 11
 1e4:	31 e0       	ldi	r19, 0x01	; 1
 1e6:	f9 01       	movw	r30, r18
 1e8:	20 81       	ld	r18, Z
 1ea:	28 61       	ori	r18, 0x18	; 24
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <port_init>:

//Function to initialize ports
void port_init()
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
 1fe:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <motion_pin_config>
	buzzer_pin_config();
 202:	0e 94 b7 00 	call	0x16e	; 0x16e <buzzer_pin_config>
	LED_bargraph_config();
 206:	0e 94 95 00 	call	0x12a	; 0x12a <LED_bargraph_config>
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <buzzer_on>:
//Buzzer On
void buzzer_on (void)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	0f 92       	push	r0
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
 21a:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
 21c:	86 e2       	ldi	r24, 0x26	; 38
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	fc 01       	movw	r30, r24
 222:	80 81       	ld	r24, Z
 224:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | 0x08;
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	88 60       	ori	r24, 0x08	; 8
 22a:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
 22c:	88 e2       	ldi	r24, 0x28	; 40
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	29 81       	ldd	r18, Y+1	; 0x01
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
}
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <buzzer_off>:
//Buzzer Off
void buzzer_off (void)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	0f 92       	push	r0
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
 248:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
 24a:	86 e2       	ldi	r24, 0x26	; 38
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	87 7f       	andi	r24, 0xF7	; 247
 258:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
 25a:	88 e2       	ldi	r24, 0x28	; 40
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	29 81       	ldd	r18, Y+1	; 0x01
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
}
 264:	0f 90       	pop	r0
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <uart1_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart1_init(void)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
	UCSR1B = 0x00; //disable while setting baud rate
 274:	89 ec       	ldi	r24, 0xC9	; 201
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	10 82       	st	Z, r1
	UCSR1A = 0x00;
 27c:	88 ec       	ldi	r24, 0xC8	; 200
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	10 82       	st	Z, r1
	UCSR1C = 0x06;
 284:	8a ec       	ldi	r24, 0xCA	; 202
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	26 e0       	ldi	r18, 0x06	; 6
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
	UBRR1L = 0x5F; //set baud rate lo
 28e:	8c ec       	ldi	r24, 0xCC	; 204
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	2f e5       	ldi	r18, 0x5F	; 95
 294:	fc 01       	movw	r30, r24
 296:	20 83       	st	Z, r18
	UBRR1H = 0x00; //set baud rate hi
 298:	8d ec       	ldi	r24, 0xCD	; 205
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	10 82       	st	Z, r1
	UCSR1B = 0xD8;
 2a0:	89 ec       	ldi	r24, 0xC9	; 201
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	28 ed       	ldi	r18, 0xD8	; 216
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <__vector_36>:
//Function to take data from ISR byte by byte
char USART1_RX_vect()
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR1A & (1<<RXC1)));
 2b8:	00 00       	nop
 2ba:	88 ec       	ldi	r24, 0xC8	; 200
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	fc 01       	movw	r30, r24
 2c0:	80 81       	ld	r24, Z
 2c2:	88 23       	and	r24, r24
 2c4:	d4 f7       	brge	.-12     	; 0x2ba <__vector_36+0xa>
	return UDR1;
 2c6:	8e ec       	ldi	r24, 0xCE	; 206
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	80 81       	ld	r24, Z
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <detect>:
void detect()
{
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	c6 54       	subi	r28, 0x46	; 70
 2e2:	d0 40       	sbci	r29, 0x00	; 0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
	data=USART1_RX_vect();
 2ee:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__vector_36>
 2f2:	80 93 00 02 	sts	0x0200, r24
	switch(data)
 2f6:	80 91 00 02 	lds	r24, 0x0200
 2fa:	88 2f       	mov	r24, r24
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	80 32       	cpi	r24, 0x20	; 32
 300:	91 05       	cpc	r25, r1
 302:	09 f4       	brne	.+2      	; 0x306 <detect+0x32>
 304:	b1 c1       	rjmp	.+866    	; 0x668 <detect+0x394>
 306:	81 32       	cpi	r24, 0x21	; 33
 308:	91 05       	cpc	r25, r1
 30a:	4c f4       	brge	.+18     	; 0x31e <detect+0x4a>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	91 05       	cpc	r25, r1
 310:	09 f4       	brne	.+2      	; 0x314 <detect+0x40>
 312:	97 c0       	rjmp	.+302    	; 0x442 <detect+0x16e>
 314:	84 30       	cpi	r24, 0x04	; 4
 316:	91 05       	cpc	r25, r1
 318:	09 f4       	brne	.+2      	; 0x31c <detect+0x48>
 31a:	1c c1       	rjmp	.+568    	; 0x554 <detect+0x280>
 31c:	fc c2       	rjmp	.+1528   	; 0x916 <detect+0x642>
 31e:	80 38       	cpi	r24, 0x80	; 128
 320:	91 05       	cpc	r25, r1
 322:	09 f4       	brne	.+2      	; 0x326 <detect+0x52>
 324:	2b c2       	rjmp	.+1110   	; 0x77c <detect+0x4a8>
 326:	8a 3a       	cpi	r24, 0xAA	; 170
 328:	91 05       	cpc	r25, r1
 32a:	09 f0       	breq	.+2      	; 0x32e <detect+0x5a>
 32c:	f4 c2       	rjmp	.+1512   	; 0x916 <detect+0x642>
	{
		case 0xAA: PORTJ=0xFF;  //Detection of [SYNC] bytes
 32e:	85 e0       	ldi	r24, 0x05	; 5
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	a8 ec       	ldi	r26, 0xC8	; 200
 33e:	b2 e4       	ldi	r27, 0x42	; 66
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	9a 83       	std	Y+2, r25	; 0x02
 344:	ab 83       	std	Y+3, r26	; 0x03
 346:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 348:	69 81       	ldd	r22, Y+1	; 0x01
 34a:	7a 81       	ldd	r23, Y+2	; 0x02
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	9c 81       	ldd	r25, Y+4	; 0x04
 350:	26 e6       	ldi	r18, 0x66	; 102
 352:	36 e6       	ldi	r19, 0x66	; 102
 354:	46 e6       	ldi	r20, 0x66	; 102
 356:	55 e4       	ldi	r21, 0x45	; 69
 358:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 35c:	dc 01       	movw	r26, r24
 35e:	cb 01       	movw	r24, r22
 360:	8d 83       	std	Y+5, r24	; 0x05
 362:	9e 83       	std	Y+6, r25	; 0x06
 364:	af 83       	std	Y+7, r26	; 0x07
 366:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 368:	11 e0       	ldi	r17, 0x01	; 1
 36a:	6d 81       	ldd	r22, Y+5	; 0x05
 36c:	7e 81       	ldd	r23, Y+6	; 0x06
 36e:	8f 81       	ldd	r24, Y+7	; 0x07
 370:	98 85       	ldd	r25, Y+8	; 0x08
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	40 e8       	ldi	r20, 0x80	; 128
 378:	5f e3       	ldi	r21, 0x3F	; 63
 37a:	0e 94 ad 04 	call	0x95a	; 0x95a <__cmpsf2>
 37e:	88 23       	and	r24, r24
 380:	0c f0       	brlt	.+2      	; 0x384 <detect+0xb0>
 382:	10 e0       	ldi	r17, 0x00	; 0
 384:	11 23       	and	r17, r17
 386:	29 f0       	breq	.+10     	; 0x392 <detect+0xbe>
		__ticks = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	9a 87       	std	Y+10, r25	; 0x0a
 38e:	89 87       	std	Y+9, r24	; 0x09
 390:	46 c0       	rjmp	.+140    	; 0x41e <detect+0x14a>
	else if (__tmp > 65535)
 392:	11 e0       	ldi	r17, 0x01	; 1
 394:	6d 81       	ldd	r22, Y+5	; 0x05
 396:	7e 81       	ldd	r23, Y+6	; 0x06
 398:	8f 81       	ldd	r24, Y+7	; 0x07
 39a:	98 85       	ldd	r25, Y+8	; 0x08
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	3f ef       	ldi	r19, 0xFF	; 255
 3a0:	4f e7       	ldi	r20, 0x7F	; 127
 3a2:	57 e4       	ldi	r21, 0x47	; 71
 3a4:	0e 94 2a 05 	call	0xa54	; 0xa54 <__gesf2>
 3a8:	18 16       	cp	r1, r24
 3aa:	0c f0       	brlt	.+2      	; 0x3ae <detect+0xda>
 3ac:	10 e0       	ldi	r17, 0x00	; 0
 3ae:	11 23       	and	r17, r17
 3b0:	61 f1       	breq	.+88     	; 0x40a <detect+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3b2:	69 81       	ldd	r22, Y+1	; 0x01
 3b4:	7a 81       	ldd	r23, Y+2	; 0x02
 3b6:	8b 81       	ldd	r24, Y+3	; 0x03
 3b8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e2       	ldi	r20, 0x20	; 32
 3c0:	51 e4       	ldi	r21, 0x41	; 65
 3c2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 3c6:	dc 01       	movw	r26, r24
 3c8:	cb 01       	movw	r24, r22
 3ca:	bc 01       	movw	r22, r24
 3cc:	cd 01       	movw	r24, r26
 3ce:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 3d2:	dc 01       	movw	r26, r24
 3d4:	cb 01       	movw	r24, r22
 3d6:	9a 87       	std	Y+10, r25	; 0x0a
 3d8:	89 87       	std	Y+9, r24	; 0x09
 3da:	12 c0       	rjmp	.+36     	; 0x400 <detect+0x12c>
 3dc:	80 e7       	ldi	r24, 0x70	; 112
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	9c 87       	std	Y+12, r25	; 0x0c
 3e2:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3e4:	8b 85       	ldd	r24, Y+11	; 0x0b
 3e6:	9c 85       	ldd	r25, Y+12	; 0x0c
 3e8:	8c 01       	movw	r16, r24
 3ea:	c8 01       	movw	r24, r16
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <detect+0x118>
 3f0:	8c 01       	movw	r16, r24
 3f2:	1c 87       	std	Y+12, r17	; 0x0c
 3f4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f6:	89 85       	ldd	r24, Y+9	; 0x09
 3f8:	9a 85       	ldd	r25, Y+10	; 0x0a
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	9a 87       	std	Y+10, r25	; 0x0a
 3fe:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 400:	89 85       	ldd	r24, Y+9	; 0x09
 402:	9a 85       	ldd	r25, Y+10	; 0x0a
 404:	00 97       	sbiw	r24, 0x00	; 0
 406:	51 f7       	brne	.-44     	; 0x3dc <detect+0x108>
 408:	17 c0       	rjmp	.+46     	; 0x438 <detect+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 40a:	6d 81       	ldd	r22, Y+5	; 0x05
 40c:	7e 81       	ldd	r23, Y+6	; 0x06
 40e:	8f 81       	ldd	r24, Y+7	; 0x07
 410:	98 85       	ldd	r25, Y+8	; 0x08
 412:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 416:	dc 01       	movw	r26, r24
 418:	cb 01       	movw	r24, r22
 41a:	9a 87       	std	Y+10, r25	; 0x0a
 41c:	89 87       	std	Y+9, r24	; 0x09
 41e:	89 85       	ldd	r24, Y+9	; 0x09
 420:	9a 85       	ldd	r25, Y+10	; 0x0a
 422:	9e 87       	std	Y+14, r25	; 0x0e
 424:	8d 87       	std	Y+13, r24	; 0x0d
 426:	8d 85       	ldd	r24, Y+13	; 0x0d
 428:	9e 85       	ldd	r25, Y+14	; 0x0e
 42a:	8c 01       	movw	r16, r24
 42c:	f8 01       	movw	r30, r16
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <detect+0x15a>
 432:	8f 01       	movw	r16, r30
 434:	1e 87       	std	Y+14, r17	; 0x0e
 436:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(100);
		PORTJ=0x00;
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	fc 01       	movw	r30, r24
 43e:	10 82       	st	Z, r1
		break;
 440:	6a c2       	rjmp	.+1236   	; 0x916 <detect+0x642>
		case 0x02: PORTJ=0x01;  //Detection of poor quality
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	fc 01       	movw	r30, r24
 44a:	20 83       	st	Z, r18
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	a8 ec       	ldi	r26, 0xC8	; 200
 452:	b2 e4       	ldi	r27, 0x42	; 66
 454:	8f 87       	std	Y+15, r24	; 0x0f
 456:	98 8b       	std	Y+16, r25	; 0x10
 458:	a9 8b       	std	Y+17, r26	; 0x11
 45a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 45c:	6f 85       	ldd	r22, Y+15	; 0x0f
 45e:	78 89       	ldd	r23, Y+16	; 0x10
 460:	89 89       	ldd	r24, Y+17	; 0x11
 462:	9a 89       	ldd	r25, Y+18	; 0x12
 464:	26 e6       	ldi	r18, 0x66	; 102
 466:	36 e6       	ldi	r19, 0x66	; 102
 468:	46 e6       	ldi	r20, 0x66	; 102
 46a:	55 e4       	ldi	r21, 0x45	; 69
 46c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 470:	dc 01       	movw	r26, r24
 472:	cb 01       	movw	r24, r22
 474:	8b 8b       	std	Y+19, r24	; 0x13
 476:	9c 8b       	std	Y+20, r25	; 0x14
 478:	ad 8b       	std	Y+21, r26	; 0x15
 47a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 47c:	11 e0       	ldi	r17, 0x01	; 1
 47e:	6b 89       	ldd	r22, Y+19	; 0x13
 480:	7c 89       	ldd	r23, Y+20	; 0x14
 482:	8d 89       	ldd	r24, Y+21	; 0x15
 484:	9e 89       	ldd	r25, Y+22	; 0x16
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	40 e8       	ldi	r20, 0x80	; 128
 48c:	5f e3       	ldi	r21, 0x3F	; 63
 48e:	0e 94 ad 04 	call	0x95a	; 0x95a <__cmpsf2>
 492:	88 23       	and	r24, r24
 494:	0c f0       	brlt	.+2      	; 0x498 <detect+0x1c4>
 496:	10 e0       	ldi	r17, 0x00	; 0
 498:	11 23       	and	r17, r17
 49a:	29 f0       	breq	.+10     	; 0x4a6 <detect+0x1d2>
		__ticks = 1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	98 8f       	std	Y+24, r25	; 0x18
 4a2:	8f 8b       	std	Y+23, r24	; 0x17
 4a4:	46 c0       	rjmp	.+140    	; 0x532 <detect+0x25e>
	else if (__tmp > 65535)
 4a6:	11 e0       	ldi	r17, 0x01	; 1
 4a8:	6b 89       	ldd	r22, Y+19	; 0x13
 4aa:	7c 89       	ldd	r23, Y+20	; 0x14
 4ac:	8d 89       	ldd	r24, Y+21	; 0x15
 4ae:	9e 89       	ldd	r25, Y+22	; 0x16
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	3f ef       	ldi	r19, 0xFF	; 255
 4b4:	4f e7       	ldi	r20, 0x7F	; 127
 4b6:	57 e4       	ldi	r21, 0x47	; 71
 4b8:	0e 94 2a 05 	call	0xa54	; 0xa54 <__gesf2>
 4bc:	18 16       	cp	r1, r24
 4be:	0c f0       	brlt	.+2      	; 0x4c2 <detect+0x1ee>
 4c0:	10 e0       	ldi	r17, 0x00	; 0
 4c2:	11 23       	and	r17, r17
 4c4:	61 f1       	breq	.+88     	; 0x51e <detect+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4c6:	6f 85       	ldd	r22, Y+15	; 0x0f
 4c8:	78 89       	ldd	r23, Y+16	; 0x10
 4ca:	89 89       	ldd	r24, Y+17	; 0x11
 4cc:	9a 89       	ldd	r25, Y+18	; 0x12
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e2       	ldi	r20, 0x20	; 32
 4d4:	51 e4       	ldi	r21, 0x41	; 65
 4d6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 4da:	dc 01       	movw	r26, r24
 4dc:	cb 01       	movw	r24, r22
 4de:	bc 01       	movw	r22, r24
 4e0:	cd 01       	movw	r24, r26
 4e2:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 4e6:	dc 01       	movw	r26, r24
 4e8:	cb 01       	movw	r24, r22
 4ea:	98 8f       	std	Y+24, r25	; 0x18
 4ec:	8f 8b       	std	Y+23, r24	; 0x17
 4ee:	12 c0       	rjmp	.+36     	; 0x514 <detect+0x240>
 4f0:	80 e7       	ldi	r24, 0x70	; 112
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	9a 8f       	std	Y+26, r25	; 0x1a
 4f6:	89 8f       	std	Y+25, r24	; 0x19
 4f8:	89 8d       	ldd	r24, Y+25	; 0x19
 4fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
 4fc:	8c 01       	movw	r16, r24
 4fe:	c8 01       	movw	r24, r16
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <detect+0x22c>
 504:	8c 01       	movw	r16, r24
 506:	1a 8f       	std	Y+26, r17	; 0x1a
 508:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 50a:	8f 89       	ldd	r24, Y+23	; 0x17
 50c:	98 8d       	ldd	r25, Y+24	; 0x18
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	98 8f       	std	Y+24, r25	; 0x18
 512:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 514:	8f 89       	ldd	r24, Y+23	; 0x17
 516:	98 8d       	ldd	r25, Y+24	; 0x18
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	51 f7       	brne	.-44     	; 0x4f0 <detect+0x21c>
 51c:	17 c0       	rjmp	.+46     	; 0x54c <detect+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 51e:	6b 89       	ldd	r22, Y+19	; 0x13
 520:	7c 89       	ldd	r23, Y+20	; 0x14
 522:	8d 89       	ldd	r24, Y+21	; 0x15
 524:	9e 89       	ldd	r25, Y+22	; 0x16
 526:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 52a:	dc 01       	movw	r26, r24
 52c:	cb 01       	movw	r24, r22
 52e:	98 8f       	std	Y+24, r25	; 0x18
 530:	8f 8b       	std	Y+23, r24	; 0x17
 532:	8f 89       	ldd	r24, Y+23	; 0x17
 534:	98 8d       	ldd	r25, Y+24	; 0x18
 536:	9c 8f       	std	Y+28, r25	; 0x1c
 538:	8b 8f       	std	Y+27, r24	; 0x1b
 53a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 53c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 53e:	8c 01       	movw	r16, r24
 540:	f8 01       	movw	r30, r16
 542:	31 97       	sbiw	r30, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <detect+0x26e>
 546:	8f 01       	movw	r16, r30
 548:	1c 8f       	std	Y+28, r17	; 0x1c
 54a:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(100);
		PORTJ=0x00;
 54c:	85 e0       	ldi	r24, 0x05	; 5
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	fc 01       	movw	r30, r24
 552:	10 82       	st	Z, r1
		case 0x04: PORTJ=0x03;  //Detection of Attention level
 554:	85 e0       	ldi	r24, 0x05	; 5
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	23 e0       	ldi	r18, 0x03	; 3
 55a:	fc 01       	movw	r30, r24
 55c:	20 83       	st	Z, r18
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	a8 ec       	ldi	r26, 0xC8	; 200
 564:	b2 e4       	ldi	r27, 0x42	; 66
 566:	8d 8f       	std	Y+29, r24	; 0x1d
 568:	9e 8f       	std	Y+30, r25	; 0x1e
 56a:	af 8f       	std	Y+31, r26	; 0x1f
 56c:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 56e:	6d 8d       	ldd	r22, Y+29	; 0x1d
 570:	7e 8d       	ldd	r23, Y+30	; 0x1e
 572:	8f 8d       	ldd	r24, Y+31	; 0x1f
 574:	98 a1       	lds	r25, 0x48
 576:	26 e6       	ldi	r18, 0x66	; 102
 578:	36 e6       	ldi	r19, 0x66	; 102
 57a:	46 e6       	ldi	r20, 0x66	; 102
 57c:	55 e4       	ldi	r21, 0x45	; 69
 57e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 582:	dc 01       	movw	r26, r24
 584:	cb 01       	movw	r24, r22
 586:	89 a3       	lds	r24, 0x59
 588:	9a a3       	lds	r25, 0x5a
 58a:	ab a3       	lds	r26, 0x5b
 58c:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
 58e:	11 e0       	ldi	r17, 0x01	; 1
 590:	69 a1       	lds	r22, 0x49
 592:	7a a1       	lds	r23, 0x4a
 594:	8b a1       	lds	r24, 0x4b
 596:	9c a1       	lds	r25, 0x4c
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	40 e8       	ldi	r20, 0x80	; 128
 59e:	5f e3       	ldi	r21, 0x3F	; 63
 5a0:	0e 94 ad 04 	call	0x95a	; 0x95a <__cmpsf2>
 5a4:	88 23       	and	r24, r24
 5a6:	0c f0       	brlt	.+2      	; 0x5aa <detect+0x2d6>
 5a8:	10 e0       	ldi	r17, 0x00	; 0
 5aa:	11 23       	and	r17, r17
 5ac:	29 f0       	breq	.+10     	; 0x5b8 <detect+0x2e4>
		__ticks = 1;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	9e a3       	lds	r25, 0x5e
 5b4:	8d a3       	lds	r24, 0x5d
 5b6:	46 c0       	rjmp	.+140    	; 0x644 <detect+0x370>
	else if (__tmp > 65535)
 5b8:	11 e0       	ldi	r17, 0x01	; 1
 5ba:	69 a1       	lds	r22, 0x49
 5bc:	7a a1       	lds	r23, 0x4a
 5be:	8b a1       	lds	r24, 0x4b
 5c0:	9c a1       	lds	r25, 0x4c
 5c2:	20 e0       	ldi	r18, 0x00	; 0
 5c4:	3f ef       	ldi	r19, 0xFF	; 255
 5c6:	4f e7       	ldi	r20, 0x7F	; 127
 5c8:	57 e4       	ldi	r21, 0x47	; 71
 5ca:	0e 94 2a 05 	call	0xa54	; 0xa54 <__gesf2>
 5ce:	18 16       	cp	r1, r24
 5d0:	0c f0       	brlt	.+2      	; 0x5d4 <detect+0x300>
 5d2:	10 e0       	ldi	r17, 0x00	; 0
 5d4:	11 23       	and	r17, r17
 5d6:	61 f1       	breq	.+88     	; 0x630 <detect+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5d8:	6d 8d       	ldd	r22, Y+29	; 0x1d
 5da:	7e 8d       	ldd	r23, Y+30	; 0x1e
 5dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
 5de:	98 a1       	lds	r25, 0x48
 5e0:	20 e0       	ldi	r18, 0x00	; 0
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	40 e2       	ldi	r20, 0x20	; 32
 5e6:	51 e4       	ldi	r21, 0x41	; 65
 5e8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 5ec:	dc 01       	movw	r26, r24
 5ee:	cb 01       	movw	r24, r22
 5f0:	bc 01       	movw	r22, r24
 5f2:	cd 01       	movw	r24, r26
 5f4:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 5f8:	dc 01       	movw	r26, r24
 5fa:	cb 01       	movw	r24, r22
 5fc:	9e a3       	lds	r25, 0x5e
 5fe:	8d a3       	lds	r24, 0x5d
 600:	12 c0       	rjmp	.+36     	; 0x626 <detect+0x352>
 602:	80 e7       	ldi	r24, 0x70	; 112
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	98 a7       	lds	r25, 0x78
 608:	8f a3       	lds	r24, 0x5f
 60a:	8f a1       	lds	r24, 0x4f
 60c:	98 a5       	lds	r25, 0x68
 60e:	8c 01       	movw	r16, r24
 610:	c8 01       	movw	r24, r16
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	f1 f7       	brne	.-4      	; 0x612 <detect+0x33e>
 616:	8c 01       	movw	r16, r24
 618:	18 a7       	lds	r17, 0x78
 61a:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 61c:	8d a1       	lds	r24, 0x4d
 61e:	9e a1       	lds	r25, 0x4e
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	9e a3       	lds	r25, 0x5e
 624:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 626:	8d a1       	lds	r24, 0x4d
 628:	9e a1       	lds	r25, 0x4e
 62a:	00 97       	sbiw	r24, 0x00	; 0
 62c:	51 f7       	brne	.-44     	; 0x602 <detect+0x32e>
 62e:	17 c0       	rjmp	.+46     	; 0x65e <detect+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 630:	69 a1       	lds	r22, 0x49
 632:	7a a1       	lds	r23, 0x4a
 634:	8b a1       	lds	r24, 0x4b
 636:	9c a1       	lds	r25, 0x4c
 638:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 63c:	dc 01       	movw	r26, r24
 63e:	cb 01       	movw	r24, r22
 640:	9e a3       	lds	r25, 0x5e
 642:	8d a3       	lds	r24, 0x5d
 644:	8d a1       	lds	r24, 0x4d
 646:	9e a1       	lds	r25, 0x4e
 648:	9a a7       	lds	r25, 0x7a
 64a:	89 a7       	lds	r24, 0x79
 64c:	89 a5       	lds	r24, 0x69
 64e:	9a a5       	lds	r25, 0x6a
 650:	8c 01       	movw	r16, r24
 652:	f8 01       	movw	r30, r16
 654:	31 97       	sbiw	r30, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <detect+0x380>
 658:	8f 01       	movw	r16, r30
 65a:	1a a7       	lds	r17, 0x7a
 65c:	09 a7       	lds	r16, 0x79
		_delay_ms(100);
		PORTJ=0x00;
 65e:	85 e0       	ldi	r24, 0x05	; 5
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	fc 01       	movw	r30, r24
 664:	10 82       	st	Z, r1
		break;
 666:	57 c1       	rjmp	.+686    	; 0x916 <detect+0x642>
		case  0x20: PORTJ=0x07;  //For payload length
 668:	85 e0       	ldi	r24, 0x05	; 5
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	27 e0       	ldi	r18, 0x07	; 7
 66e:	fc 01       	movw	r30, r24
 670:	20 83       	st	Z, r18
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	a8 ec       	ldi	r26, 0xC8	; 200
 678:	b2 e4       	ldi	r27, 0x42	; 66
 67a:	8b a7       	lds	r24, 0x7b
 67c:	9c a7       	lds	r25, 0x7c
 67e:	ad a7       	lds	r26, 0x7d
 680:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 682:	6b a5       	lds	r22, 0x6b
 684:	7c a5       	lds	r23, 0x6c
 686:	8d a5       	lds	r24, 0x6d
 688:	9e a5       	lds	r25, 0x6e
 68a:	26 e6       	ldi	r18, 0x66	; 102
 68c:	36 e6       	ldi	r19, 0x66	; 102
 68e:	46 e6       	ldi	r20, 0x66	; 102
 690:	55 e4       	ldi	r21, 0x45	; 69
 692:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 696:	dc 01       	movw	r26, r24
 698:	cb 01       	movw	r24, r22
 69a:	8f a7       	lds	r24, 0x7f
 69c:	98 ab       	sts	0x58, r25
 69e:	a9 ab       	sts	0x59, r26
 6a0:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
 6a2:	11 e0       	ldi	r17, 0x01	; 1
 6a4:	6f a5       	lds	r22, 0x6f
 6a6:	78 a9       	sts	0x48, r23
 6a8:	89 a9       	sts	0x49, r24
 6aa:	9a a9       	sts	0x4a, r25
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	40 e8       	ldi	r20, 0x80	; 128
 6b2:	5f e3       	ldi	r21, 0x3F	; 63
 6b4:	0e 94 ad 04 	call	0x95a	; 0x95a <__cmpsf2>
 6b8:	88 23       	and	r24, r24
 6ba:	0c f0       	brlt	.+2      	; 0x6be <detect+0x3ea>
 6bc:	10 e0       	ldi	r17, 0x00	; 0
 6be:	11 23       	and	r17, r17
 6c0:	29 f0       	breq	.+10     	; 0x6cc <detect+0x3f8>
		__ticks = 1;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	9c ab       	sts	0x5c, r25
 6c8:	8b ab       	sts	0x5b, r24
 6ca:	46 c0       	rjmp	.+140    	; 0x758 <detect+0x484>
	else if (__tmp > 65535)
 6cc:	11 e0       	ldi	r17, 0x01	; 1
 6ce:	6f a5       	lds	r22, 0x6f
 6d0:	78 a9       	sts	0x48, r23
 6d2:	89 a9       	sts	0x49, r24
 6d4:	9a a9       	sts	0x4a, r25
 6d6:	20 e0       	ldi	r18, 0x00	; 0
 6d8:	3f ef       	ldi	r19, 0xFF	; 255
 6da:	4f e7       	ldi	r20, 0x7F	; 127
 6dc:	57 e4       	ldi	r21, 0x47	; 71
 6de:	0e 94 2a 05 	call	0xa54	; 0xa54 <__gesf2>
 6e2:	18 16       	cp	r1, r24
 6e4:	0c f0       	brlt	.+2      	; 0x6e8 <detect+0x414>
 6e6:	10 e0       	ldi	r17, 0x00	; 0
 6e8:	11 23       	and	r17, r17
 6ea:	61 f1       	breq	.+88     	; 0x744 <detect+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6ec:	6b a5       	lds	r22, 0x6b
 6ee:	7c a5       	lds	r23, 0x6c
 6f0:	8d a5       	lds	r24, 0x6d
 6f2:	9e a5       	lds	r25, 0x6e
 6f4:	20 e0       	ldi	r18, 0x00	; 0
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	40 e2       	ldi	r20, 0x20	; 32
 6fa:	51 e4       	ldi	r21, 0x41	; 65
 6fc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 700:	dc 01       	movw	r26, r24
 702:	cb 01       	movw	r24, r22
 704:	bc 01       	movw	r22, r24
 706:	cd 01       	movw	r24, r26
 708:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 70c:	dc 01       	movw	r26, r24
 70e:	cb 01       	movw	r24, r22
 710:	9c ab       	sts	0x5c, r25
 712:	8b ab       	sts	0x5b, r24
 714:	12 c0       	rjmp	.+36     	; 0x73a <detect+0x466>
 716:	80 e7       	ldi	r24, 0x70	; 112
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	9e ab       	sts	0x5e, r25
 71c:	8d ab       	sts	0x5d, r24
 71e:	8d a9       	sts	0x4d, r24
 720:	9e a9       	sts	0x4e, r25
 722:	8c 01       	movw	r16, r24
 724:	c8 01       	movw	r24, r16
 726:	01 97       	sbiw	r24, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <detect+0x452>
 72a:	8c 01       	movw	r16, r24
 72c:	1e ab       	sts	0x5e, r17
 72e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 730:	8b a9       	sts	0x4b, r24
 732:	9c a9       	sts	0x4c, r25
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	9c ab       	sts	0x5c, r25
 738:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 73a:	8b a9       	sts	0x4b, r24
 73c:	9c a9       	sts	0x4c, r25
 73e:	00 97       	sbiw	r24, 0x00	; 0
 740:	51 f7       	brne	.-44     	; 0x716 <detect+0x442>
 742:	17 c0       	rjmp	.+46     	; 0x772 <detect+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 744:	6f a5       	lds	r22, 0x6f
 746:	78 a9       	sts	0x48, r23
 748:	89 a9       	sts	0x49, r24
 74a:	9a a9       	sts	0x4a, r25
 74c:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 750:	dc 01       	movw	r26, r24
 752:	cb 01       	movw	r24, r22
 754:	9c ab       	sts	0x5c, r25
 756:	8b ab       	sts	0x5b, r24
 758:	8b a9       	sts	0x4b, r24
 75a:	9c a9       	sts	0x4c, r25
 75c:	98 af       	sts	0x78, r25
 75e:	8f ab       	sts	0x5f, r24
 760:	8f a9       	sts	0x4f, r24
 762:	98 ad       	sts	0x68, r25
 764:	8c 01       	movw	r16, r24
 766:	f8 01       	movw	r30, r16
 768:	31 97       	sbiw	r30, 0x01	; 1
 76a:	f1 f7       	brne	.-4      	; 0x768 <detect+0x494>
 76c:	8f 01       	movw	r16, r30
 76e:	18 af       	sts	0x78, r17
 770:	0f ab       	sts	0x5f, r16
		_delay_ms(100);
		PORTJ=0x00;
 772:	85 e0       	ldi	r24, 0x05	; 5
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	fc 01       	movw	r30, r24
 778:	10 82       	st	Z, r1
		break;
 77a:	cd c0       	rjmp	.+410    	; 0x916 <detect+0x642>
		case 0x80: PORTJ=0x0F;   //detection of raw value
 77c:	85 e0       	ldi	r24, 0x05	; 5
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	2f e0       	ldi	r18, 0x0F	; 15
 782:	fc 01       	movw	r30, r24
 784:	20 83       	st	Z, r18
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	a8 ec       	ldi	r26, 0xC8	; 200
 78c:	b2 e4       	ldi	r27, 0x42	; 66
 78e:	89 af       	sts	0x79, r24
 790:	9a af       	sts	0x7a, r25
 792:	ab af       	sts	0x7b, r26
 794:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 796:	69 ad       	sts	0x69, r22
 798:	7a ad       	sts	0x6a, r23
 79a:	8b ad       	sts	0x6b, r24
 79c:	9c ad       	sts	0x6c, r25
 79e:	26 e6       	ldi	r18, 0x66	; 102
 7a0:	36 e6       	ldi	r19, 0x66	; 102
 7a2:	46 e6       	ldi	r20, 0x66	; 102
 7a4:	55 e4       	ldi	r21, 0x45	; 69
 7a6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 7aa:	dc 01       	movw	r26, r24
 7ac:	cb 01       	movw	r24, r22
 7ae:	9e 01       	movw	r18, r28
 7b0:	23 5c       	subi	r18, 0xC3	; 195
 7b2:	3f 4f       	sbci	r19, 0xFF	; 255
 7b4:	f9 01       	movw	r30, r18
 7b6:	80 83       	st	Z, r24
 7b8:	91 83       	std	Z+1, r25	; 0x01
 7ba:	a2 83       	std	Z+2, r26	; 0x02
 7bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 7be:	11 e0       	ldi	r17, 0x01	; 1
 7c0:	ce 01       	movw	r24, r28
 7c2:	cd 96       	adiw	r24, 0x3d	; 61
 7c4:	fc 01       	movw	r30, r24
 7c6:	60 81       	ld	r22, Z
 7c8:	71 81       	ldd	r23, Z+1	; 0x01
 7ca:	82 81       	ldd	r24, Z+2	; 0x02
 7cc:	93 81       	ldd	r25, Z+3	; 0x03
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	40 e8       	ldi	r20, 0x80	; 128
 7d4:	5f e3       	ldi	r21, 0x3F	; 63
 7d6:	0e 94 ad 04 	call	0x95a	; 0x95a <__cmpsf2>
 7da:	88 23       	and	r24, r24
 7dc:	0c f0       	brlt	.+2      	; 0x7e0 <detect+0x50c>
 7de:	10 e0       	ldi	r17, 0x00	; 0
 7e0:	11 23       	and	r17, r17
 7e2:	49 f0       	breq	.+18     	; 0x7f6 <detect+0x522>
		__ticks = 1;
 7e4:	ce 01       	movw	r24, r28
 7e6:	8f 5b       	subi	r24, 0xBF	; 191
 7e8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ea:	21 e0       	ldi	r18, 0x01	; 1
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	fc 01       	movw	r30, r24
 7f0:	31 83       	std	Z+1, r19	; 0x01
 7f2:	20 83       	st	Z, r18
 7f4:	6e c0       	rjmp	.+220    	; 0x8d2 <detect+0x5fe>
	else if (__tmp > 65535)
 7f6:	11 e0       	ldi	r17, 0x01	; 1
 7f8:	ce 01       	movw	r24, r28
 7fa:	cd 96       	adiw	r24, 0x3d	; 61
 7fc:	fc 01       	movw	r30, r24
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	82 81       	ldd	r24, Z+2	; 0x02
 804:	93 81       	ldd	r25, Z+3	; 0x03
 806:	20 e0       	ldi	r18, 0x00	; 0
 808:	3f ef       	ldi	r19, 0xFF	; 255
 80a:	4f e7       	ldi	r20, 0x7F	; 127
 80c:	57 e4       	ldi	r21, 0x47	; 71
 80e:	0e 94 2a 05 	call	0xa54	; 0xa54 <__gesf2>
 812:	18 16       	cp	r1, r24
 814:	0c f0       	brlt	.+2      	; 0x818 <detect+0x544>
 816:	10 e0       	ldi	r17, 0x00	; 0
 818:	11 23       	and	r17, r17
 81a:	09 f4       	brne	.+2      	; 0x81e <detect+0x54a>
 81c:	49 c0       	rjmp	.+146    	; 0x8b0 <detect+0x5dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 81e:	69 ad       	sts	0x69, r22
 820:	7a ad       	sts	0x6a, r23
 822:	8b ad       	sts	0x6b, r24
 824:	9c ad       	sts	0x6c, r25
 826:	20 e0       	ldi	r18, 0x00	; 0
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	40 e2       	ldi	r20, 0x20	; 32
 82c:	51 e4       	ldi	r21, 0x41	; 65
 82e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 832:	dc 01       	movw	r26, r24
 834:	cb 01       	movw	r24, r22
 836:	8e 01       	movw	r16, r28
 838:	0f 5b       	subi	r16, 0xBF	; 191
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	bc 01       	movw	r22, r24
 83e:	cd 01       	movw	r24, r26
 840:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 844:	dc 01       	movw	r26, r24
 846:	cb 01       	movw	r24, r22
 848:	f8 01       	movw	r30, r16
 84a:	91 83       	std	Z+1, r25	; 0x01
 84c:	80 83       	st	Z, r24
 84e:	27 c0       	rjmp	.+78     	; 0x89e <detect+0x5ca>
 850:	ce 01       	movw	r24, r28
 852:	8d 5b       	subi	r24, 0xBD	; 189
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	20 e7       	ldi	r18, 0x70	; 112
 858:	31 e0       	ldi	r19, 0x01	; 1
 85a:	fc 01       	movw	r30, r24
 85c:	31 83       	std	Z+1, r19	; 0x01
 85e:	20 83       	st	Z, r18
 860:	ce 01       	movw	r24, r28
 862:	8d 5b       	subi	r24, 0xBD	; 189
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	fc 01       	movw	r30, r24
 868:	80 81       	ld	r24, Z
 86a:	91 81       	ldd	r25, Z+1	; 0x01
 86c:	8c 01       	movw	r16, r24
 86e:	c8 01       	movw	r24, r16
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	f1 f7       	brne	.-4      	; 0x870 <detect+0x59c>
 874:	8c 01       	movw	r16, r24
 876:	ce 01       	movw	r24, r28
 878:	8d 5b       	subi	r24, 0xBD	; 189
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	fc 01       	movw	r30, r24
 87e:	11 83       	std	Z+1, r17	; 0x01
 880:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 882:	ce 01       	movw	r24, r28
 884:	8f 5b       	subi	r24, 0xBF	; 191
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	9e 01       	movw	r18, r28
 88a:	2f 5b       	subi	r18, 0xBF	; 191
 88c:	3f 4f       	sbci	r19, 0xFF	; 255
 88e:	f9 01       	movw	r30, r18
 890:	20 81       	ld	r18, Z
 892:	31 81       	ldd	r19, Z+1	; 0x01
 894:	21 50       	subi	r18, 0x01	; 1
 896:	30 40       	sbci	r19, 0x00	; 0
 898:	fc 01       	movw	r30, r24
 89a:	31 83       	std	Z+1, r19	; 0x01
 89c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 89e:	ce 01       	movw	r24, r28
 8a0:	8f 5b       	subi	r24, 0xBF	; 191
 8a2:	9f 4f       	sbci	r25, 0xFF	; 255
 8a4:	fc 01       	movw	r30, r24
 8a6:	80 81       	ld	r24, Z
 8a8:	91 81       	ldd	r25, Z+1	; 0x01
 8aa:	00 97       	sbiw	r24, 0x00	; 0
 8ac:	89 f6       	brne	.-94     	; 0x850 <detect+0x57c>
 8ae:	2e c0       	rjmp	.+92     	; 0x90c <detect+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 8b0:	8e 01       	movw	r16, r28
 8b2:	0f 5b       	subi	r16, 0xBF	; 191
 8b4:	1f 4f       	sbci	r17, 0xFF	; 255
 8b6:	ce 01       	movw	r24, r28
 8b8:	cd 96       	adiw	r24, 0x3d	; 61
 8ba:	fc 01       	movw	r30, r24
 8bc:	60 81       	ld	r22, Z
 8be:	71 81       	ldd	r23, Z+1	; 0x01
 8c0:	82 81       	ldd	r24, Z+2	; 0x02
 8c2:	93 81       	ldd	r25, Z+3	; 0x03
 8c4:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 8c8:	dc 01       	movw	r26, r24
 8ca:	cb 01       	movw	r24, r22
 8cc:	f8 01       	movw	r30, r16
 8ce:	91 83       	std	Z+1, r25	; 0x01
 8d0:	80 83       	st	Z, r24
 8d2:	ce 01       	movw	r24, r28
 8d4:	8b 5b       	subi	r24, 0xBB	; 187
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	9e 01       	movw	r18, r28
 8da:	2f 5b       	subi	r18, 0xBF	; 191
 8dc:	3f 4f       	sbci	r19, 0xFF	; 255
 8de:	f9 01       	movw	r30, r18
 8e0:	20 81       	ld	r18, Z
 8e2:	31 81       	ldd	r19, Z+1	; 0x01
 8e4:	fc 01       	movw	r30, r24
 8e6:	31 83       	std	Z+1, r19	; 0x01
 8e8:	20 83       	st	Z, r18
 8ea:	ce 01       	movw	r24, r28
 8ec:	8b 5b       	subi	r24, 0xBB	; 187
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	fc 01       	movw	r30, r24
 8f2:	80 81       	ld	r24, Z
 8f4:	91 81       	ldd	r25, Z+1	; 0x01
 8f6:	8c 01       	movw	r16, r24
 8f8:	c8 01       	movw	r24, r16
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <detect+0x626>
 8fe:	8c 01       	movw	r16, r24
 900:	ce 01       	movw	r24, r28
 902:	8b 5b       	subi	r24, 0xBB	; 187
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	fc 01       	movw	r30, r24
 908:	11 83       	std	Z+1, r17	; 0x01
 90a:	00 83       	st	Z, r16
		_delay_ms(100);
		PORTJ=0x00;
 90c:	85 e0       	ldi	r24, 0x05	; 5
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	fc 01       	movw	r30, r24
 912:	10 82       	st	Z, r1
		break;
 914:	00 00       	nop
	}
	
}
 916:	ca 5b       	subi	r28, 0xBA	; 186
 918:	df 4f       	sbci	r29, 0xFF	; 255
 91a:	0f b6       	in	r0, 0x3f	; 63
 91c:	f8 94       	cli
 91e:	de bf       	out	0x3e, r29	; 62
 920:	0f be       	out	0x3f, r0	; 63
 922:	cd bf       	out	0x3d, r28	; 61
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	08 95       	ret

0000092e <init_devices>:
//Function To Initialize all The Devices
void init_devices(void)
{
 92e:	cf 93       	push	r28
 930:	df 93       	push	r29
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupts
 936:	f8 94       	cli
	port_init();  //Initializes all the ports
 938:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <port_init>
	uart1_init(); //Initailize UART1 for serial communiaction
 93c:	0e 94 36 01 	call	0x26c	; 0x26c <uart1_init>
	sei();   //Enables the global interrupts
 940:	78 94       	sei
}
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	08 95       	ret

00000948 <main>:

//Main Function
int main(void)
{
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 950:	0e 94 97 04 	call	0x92e	; 0x92e <init_devices>
	while(1){
		detect();
 954:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <detect>
	}
 958:	fd cf       	rjmp	.-6      	; 0x954 <main+0xc>

0000095a <__cmpsf2>:
 95a:	2f d0       	rcall	.+94     	; 0x9ba <__fp_cmp>
 95c:	08 f4       	brcc	.+2      	; 0x960 <__cmpsf2+0x6>
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	08 95       	ret

00000962 <__fixunssfsi>:
 962:	57 d0       	rcall	.+174    	; 0xa12 <__fp_splitA>
 964:	88 f0       	brcs	.+34     	; 0x988 <__fixunssfsi+0x26>
 966:	9f 57       	subi	r25, 0x7F	; 127
 968:	90 f0       	brcs	.+36     	; 0x98e <__fixunssfsi+0x2c>
 96a:	b9 2f       	mov	r27, r25
 96c:	99 27       	eor	r25, r25
 96e:	b7 51       	subi	r27, 0x17	; 23
 970:	a0 f0       	brcs	.+40     	; 0x99a <__fixunssfsi+0x38>
 972:	d1 f0       	breq	.+52     	; 0x9a8 <__fixunssfsi+0x46>
 974:	66 0f       	add	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	88 1f       	adc	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	1a f0       	brmi	.+6      	; 0x984 <__fixunssfsi+0x22>
 97e:	ba 95       	dec	r27
 980:	c9 f7       	brne	.-14     	; 0x974 <__fixunssfsi+0x12>
 982:	12 c0       	rjmp	.+36     	; 0x9a8 <__fixunssfsi+0x46>
 984:	b1 30       	cpi	r27, 0x01	; 1
 986:	81 f0       	breq	.+32     	; 0x9a8 <__fixunssfsi+0x46>
 988:	5e d0       	rcall	.+188    	; 0xa46 <__fp_zero>
 98a:	b1 e0       	ldi	r27, 0x01	; 1
 98c:	08 95       	ret
 98e:	5b c0       	rjmp	.+182    	; 0xa46 <__fp_zero>
 990:	67 2f       	mov	r22, r23
 992:	78 2f       	mov	r23, r24
 994:	88 27       	eor	r24, r24
 996:	b8 5f       	subi	r27, 0xF8	; 248
 998:	39 f0       	breq	.+14     	; 0x9a8 <__fixunssfsi+0x46>
 99a:	b9 3f       	cpi	r27, 0xF9	; 249
 99c:	cc f3       	brlt	.-14     	; 0x990 <__fixunssfsi+0x2e>
 99e:	86 95       	lsr	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	b3 95       	inc	r27
 9a6:	d9 f7       	brne	.-10     	; 0x99e <__fixunssfsi+0x3c>
 9a8:	3e f4       	brtc	.+14     	; 0x9b8 <__fixunssfsi+0x56>
 9aa:	90 95       	com	r25
 9ac:	80 95       	com	r24
 9ae:	70 95       	com	r23
 9b0:	61 95       	neg	r22
 9b2:	7f 4f       	sbci	r23, 0xFF	; 255
 9b4:	8f 4f       	sbci	r24, 0xFF	; 255
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	08 95       	ret

000009ba <__fp_cmp>:
 9ba:	99 0f       	add	r25, r25
 9bc:	00 08       	sbc	r0, r0
 9be:	55 0f       	add	r21, r21
 9c0:	aa 0b       	sbc	r26, r26
 9c2:	e0 e8       	ldi	r30, 0x80	; 128
 9c4:	fe ef       	ldi	r31, 0xFE	; 254
 9c6:	16 16       	cp	r1, r22
 9c8:	17 06       	cpc	r1, r23
 9ca:	e8 07       	cpc	r30, r24
 9cc:	f9 07       	cpc	r31, r25
 9ce:	c0 f0       	brcs	.+48     	; 0xa00 <__fp_cmp+0x46>
 9d0:	12 16       	cp	r1, r18
 9d2:	13 06       	cpc	r1, r19
 9d4:	e4 07       	cpc	r30, r20
 9d6:	f5 07       	cpc	r31, r21
 9d8:	98 f0       	brcs	.+38     	; 0xa00 <__fp_cmp+0x46>
 9da:	62 1b       	sub	r22, r18
 9dc:	73 0b       	sbc	r23, r19
 9de:	84 0b       	sbc	r24, r20
 9e0:	95 0b       	sbc	r25, r21
 9e2:	39 f4       	brne	.+14     	; 0x9f2 <__fp_cmp+0x38>
 9e4:	0a 26       	eor	r0, r26
 9e6:	61 f0       	breq	.+24     	; 0xa00 <__fp_cmp+0x46>
 9e8:	23 2b       	or	r18, r19
 9ea:	24 2b       	or	r18, r20
 9ec:	25 2b       	or	r18, r21
 9ee:	21 f4       	brne	.+8      	; 0x9f8 <__fp_cmp+0x3e>
 9f0:	08 95       	ret
 9f2:	0a 26       	eor	r0, r26
 9f4:	09 f4       	brne	.+2      	; 0x9f8 <__fp_cmp+0x3e>
 9f6:	a1 40       	sbci	r26, 0x01	; 1
 9f8:	a6 95       	lsr	r26
 9fa:	8f ef       	ldi	r24, 0xFF	; 255
 9fc:	81 1d       	adc	r24, r1
 9fe:	81 1d       	adc	r24, r1
 a00:	08 95       	ret

00000a02 <__fp_split3>:
 a02:	57 fd       	sbrc	r21, 7
 a04:	90 58       	subi	r25, 0x80	; 128
 a06:	44 0f       	add	r20, r20
 a08:	55 1f       	adc	r21, r21
 a0a:	59 f0       	breq	.+22     	; 0xa22 <__fp_splitA+0x10>
 a0c:	5f 3f       	cpi	r21, 0xFF	; 255
 a0e:	71 f0       	breq	.+28     	; 0xa2c <__fp_splitA+0x1a>
 a10:	47 95       	ror	r20

00000a12 <__fp_splitA>:
 a12:	88 0f       	add	r24, r24
 a14:	97 fb       	bst	r25, 7
 a16:	99 1f       	adc	r25, r25
 a18:	61 f0       	breq	.+24     	; 0xa32 <__fp_splitA+0x20>
 a1a:	9f 3f       	cpi	r25, 0xFF	; 255
 a1c:	79 f0       	breq	.+30     	; 0xa3c <__fp_splitA+0x2a>
 a1e:	87 95       	ror	r24
 a20:	08 95       	ret
 a22:	12 16       	cp	r1, r18
 a24:	13 06       	cpc	r1, r19
 a26:	14 06       	cpc	r1, r20
 a28:	55 1f       	adc	r21, r21
 a2a:	f2 cf       	rjmp	.-28     	; 0xa10 <__fp_split3+0xe>
 a2c:	46 95       	lsr	r20
 a2e:	f1 df       	rcall	.-30     	; 0xa12 <__fp_splitA>
 a30:	08 c0       	rjmp	.+16     	; 0xa42 <__fp_splitA+0x30>
 a32:	16 16       	cp	r1, r22
 a34:	17 06       	cpc	r1, r23
 a36:	18 06       	cpc	r1, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	f1 cf       	rjmp	.-30     	; 0xa1e <__fp_splitA+0xc>
 a3c:	86 95       	lsr	r24
 a3e:	71 05       	cpc	r23, r1
 a40:	61 05       	cpc	r22, r1
 a42:	08 94       	sec
 a44:	08 95       	ret

00000a46 <__fp_zero>:
 a46:	e8 94       	clt

00000a48 <__fp_szero>:
 a48:	bb 27       	eor	r27, r27
 a4a:	66 27       	eor	r22, r22
 a4c:	77 27       	eor	r23, r23
 a4e:	cb 01       	movw	r24, r22
 a50:	97 f9       	bld	r25, 7
 a52:	08 95       	ret

00000a54 <__gesf2>:
 a54:	b2 df       	rcall	.-156    	; 0x9ba <__fp_cmp>
 a56:	08 f4       	brcc	.+2      	; 0xa5a <__gesf2+0x6>
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	08 95       	ret

00000a5c <__mulsf3>:
 a5c:	0b d0       	rcall	.+22     	; 0xa74 <__mulsf3x>
 a5e:	78 c0       	rjmp	.+240    	; 0xb50 <__fp_round>
 a60:	69 d0       	rcall	.+210    	; 0xb34 <__fp_pscA>
 a62:	28 f0       	brcs	.+10     	; 0xa6e <__mulsf3+0x12>
 a64:	6e d0       	rcall	.+220    	; 0xb42 <__fp_pscB>
 a66:	18 f0       	brcs	.+6      	; 0xa6e <__mulsf3+0x12>
 a68:	95 23       	and	r25, r21
 a6a:	09 f0       	breq	.+2      	; 0xa6e <__mulsf3+0x12>
 a6c:	5a c0       	rjmp	.+180    	; 0xb22 <__fp_inf>
 a6e:	5f c0       	rjmp	.+190    	; 0xb2e <__fp_nan>
 a70:	11 24       	eor	r1, r1
 a72:	ea cf       	rjmp	.-44     	; 0xa48 <__fp_szero>

00000a74 <__mulsf3x>:
 a74:	c6 df       	rcall	.-116    	; 0xa02 <__fp_split3>
 a76:	a0 f3       	brcs	.-24     	; 0xa60 <__mulsf3+0x4>

00000a78 <__mulsf3_pse>:
 a78:	95 9f       	mul	r25, r21
 a7a:	d1 f3       	breq	.-12     	; 0xa70 <__mulsf3+0x14>
 a7c:	95 0f       	add	r25, r21
 a7e:	50 e0       	ldi	r21, 0x00	; 0
 a80:	55 1f       	adc	r21, r21
 a82:	62 9f       	mul	r22, r18
 a84:	f0 01       	movw	r30, r0
 a86:	72 9f       	mul	r23, r18
 a88:	bb 27       	eor	r27, r27
 a8a:	f0 0d       	add	r31, r0
 a8c:	b1 1d       	adc	r27, r1
 a8e:	63 9f       	mul	r22, r19
 a90:	aa 27       	eor	r26, r26
 a92:	f0 0d       	add	r31, r0
 a94:	b1 1d       	adc	r27, r1
 a96:	aa 1f       	adc	r26, r26
 a98:	64 9f       	mul	r22, r20
 a9a:	66 27       	eor	r22, r22
 a9c:	b0 0d       	add	r27, r0
 a9e:	a1 1d       	adc	r26, r1
 aa0:	66 1f       	adc	r22, r22
 aa2:	82 9f       	mul	r24, r18
 aa4:	22 27       	eor	r18, r18
 aa6:	b0 0d       	add	r27, r0
 aa8:	a1 1d       	adc	r26, r1
 aaa:	62 1f       	adc	r22, r18
 aac:	73 9f       	mul	r23, r19
 aae:	b0 0d       	add	r27, r0
 ab0:	a1 1d       	adc	r26, r1
 ab2:	62 1f       	adc	r22, r18
 ab4:	83 9f       	mul	r24, r19
 ab6:	a0 0d       	add	r26, r0
 ab8:	61 1d       	adc	r22, r1
 aba:	22 1f       	adc	r18, r18
 abc:	74 9f       	mul	r23, r20
 abe:	33 27       	eor	r19, r19
 ac0:	a0 0d       	add	r26, r0
 ac2:	61 1d       	adc	r22, r1
 ac4:	23 1f       	adc	r18, r19
 ac6:	84 9f       	mul	r24, r20
 ac8:	60 0d       	add	r22, r0
 aca:	21 1d       	adc	r18, r1
 acc:	82 2f       	mov	r24, r18
 ace:	76 2f       	mov	r23, r22
 ad0:	6a 2f       	mov	r22, r26
 ad2:	11 24       	eor	r1, r1
 ad4:	9f 57       	subi	r25, 0x7F	; 127
 ad6:	50 40       	sbci	r21, 0x00	; 0
 ad8:	8a f0       	brmi	.+34     	; 0xafc <__mulsf3_pse+0x84>
 ada:	e1 f0       	breq	.+56     	; 0xb14 <__mulsf3_pse+0x9c>
 adc:	88 23       	and	r24, r24
 ade:	4a f0       	brmi	.+18     	; 0xaf2 <__mulsf3_pse+0x7a>
 ae0:	ee 0f       	add	r30, r30
 ae2:	ff 1f       	adc	r31, r31
 ae4:	bb 1f       	adc	r27, r27
 ae6:	66 1f       	adc	r22, r22
 ae8:	77 1f       	adc	r23, r23
 aea:	88 1f       	adc	r24, r24
 aec:	91 50       	subi	r25, 0x01	; 1
 aee:	50 40       	sbci	r21, 0x00	; 0
 af0:	a9 f7       	brne	.-22     	; 0xadc <__mulsf3_pse+0x64>
 af2:	9e 3f       	cpi	r25, 0xFE	; 254
 af4:	51 05       	cpc	r21, r1
 af6:	70 f0       	brcs	.+28     	; 0xb14 <__mulsf3_pse+0x9c>
 af8:	14 c0       	rjmp	.+40     	; 0xb22 <__fp_inf>
 afa:	a6 cf       	rjmp	.-180    	; 0xa48 <__fp_szero>
 afc:	5f 3f       	cpi	r21, 0xFF	; 255
 afe:	ec f3       	brlt	.-6      	; 0xafa <__mulsf3_pse+0x82>
 b00:	98 3e       	cpi	r25, 0xE8	; 232
 b02:	dc f3       	brlt	.-10     	; 0xafa <__mulsf3_pse+0x82>
 b04:	86 95       	lsr	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b7 95       	ror	r27
 b0c:	f7 95       	ror	r31
 b0e:	e7 95       	ror	r30
 b10:	9f 5f       	subi	r25, 0xFF	; 255
 b12:	c1 f7       	brne	.-16     	; 0xb04 <__mulsf3_pse+0x8c>
 b14:	fe 2b       	or	r31, r30
 b16:	88 0f       	add	r24, r24
 b18:	91 1d       	adc	r25, r1
 b1a:	96 95       	lsr	r25
 b1c:	87 95       	ror	r24
 b1e:	97 f9       	bld	r25, 7
 b20:	08 95       	ret

00000b22 <__fp_inf>:
 b22:	97 f9       	bld	r25, 7
 b24:	9f 67       	ori	r25, 0x7F	; 127
 b26:	80 e8       	ldi	r24, 0x80	; 128
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	60 e0       	ldi	r22, 0x00	; 0
 b2c:	08 95       	ret

00000b2e <__fp_nan>:
 b2e:	9f ef       	ldi	r25, 0xFF	; 255
 b30:	80 ec       	ldi	r24, 0xC0	; 192
 b32:	08 95       	ret

00000b34 <__fp_pscA>:
 b34:	00 24       	eor	r0, r0
 b36:	0a 94       	dec	r0
 b38:	16 16       	cp	r1, r22
 b3a:	17 06       	cpc	r1, r23
 b3c:	18 06       	cpc	r1, r24
 b3e:	09 06       	cpc	r0, r25
 b40:	08 95       	ret

00000b42 <__fp_pscB>:
 b42:	00 24       	eor	r0, r0
 b44:	0a 94       	dec	r0
 b46:	12 16       	cp	r1, r18
 b48:	13 06       	cpc	r1, r19
 b4a:	14 06       	cpc	r1, r20
 b4c:	05 06       	cpc	r0, r21
 b4e:	08 95       	ret

00000b50 <__fp_round>:
 b50:	09 2e       	mov	r0, r25
 b52:	03 94       	inc	r0
 b54:	00 0c       	add	r0, r0
 b56:	11 f4       	brne	.+4      	; 0xb5c <__fp_round+0xc>
 b58:	88 23       	and	r24, r24
 b5a:	52 f0       	brmi	.+20     	; 0xb70 <__fp_round+0x20>
 b5c:	bb 0f       	add	r27, r27
 b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fp_round+0x20>
 b60:	bf 2b       	or	r27, r31
 b62:	11 f4       	brne	.+4      	; 0xb68 <__fp_round+0x18>
 b64:	60 ff       	sbrs	r22, 0
 b66:	04 c0       	rjmp	.+8      	; 0xb70 <__fp_round+0x20>
 b68:	6f 5f       	subi	r22, 0xFF	; 255
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	08 95       	ret

00000b72 <_exit>:
 b72:	f8 94       	cli

00000b74 <__stop_program>:
 b74:	ff cf       	rjmp	.-2      	; 0xb74 <__stop_program>
